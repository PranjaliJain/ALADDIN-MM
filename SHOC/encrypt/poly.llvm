; ModuleID = 'poly.c'
source_filename = "poly.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.poly = type { i32, i32* }

@.str = private unnamed_addr constant [7 x i8] c"%dx^%d\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c" + %dx^%d\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" + %d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"x_size < mod_size && y_size < mod_size\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"poly.c\00", align 1
@__PRETTY_FUNCTION__.polyadd = private unnamed_addr constant [54 x i8] c"int *polyadd(int *, int, int *, int, int, int *, int)\00", align 1
@__PRETTY_FUNCTION__.polymul = private unnamed_addr constant [54 x i8] c"int *polymul(int *, int, int *, int, int, int *, int)\00", align 1

; Function Attrs: noinline nounwind uwtable
define void @free_poly(%struct.poly* %x) local_unnamed_addr #0 !dbg !17 {
  call void @llvm.dbg.value(metadata %struct.poly* %x, metadata !21, metadata !DIExpression()), !dbg !22
  %coeffs = getelementptr inbounds %struct.poly, %struct.poly* %x, i64 0, i32 1, !dbg !23
  %1 = bitcast i32** %coeffs to i8**, !dbg !23
  %2 = load i8*, i8** %1, align 8, !dbg !23, !tbaa !24
  tail call void @free(i8* %2) #5, !dbg !30
  %3 = bitcast %struct.poly* %x to i8*, !dbg !31
  tail call void @free(i8* %3) #5, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: nounwind
declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define void @print_poly(i32* nocapture readonly %x, i32 %size) local_unnamed_addr #0 !dbg !34 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !38, metadata !DIExpression()), !dbg !43
  call void @llvm.dbg.value(metadata i32 %size, metadata !39, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !40, metadata !DIExpression()), !dbg !45
  call void @llvm.dbg.value(metadata i32 %size, metadata !41, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !46
  call void @llvm.dbg.value(metadata i32 %size, metadata !41, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !46
  %cmp28 = icmp sgt i32 %size, 1, !dbg !47
  br i1 %cmp28, label %.lr.ph, label %._crit_edge, !dbg !49

.lr.ph:                                           ; preds = %0
  %1 = sext i32 %size to i64, !dbg !49
  br label %3, !dbg !49

._crit_edge:                                      ; preds = %10, %0
  %2 = load i32, i32* %x, align 4, !dbg !50, !tbaa !52
  %cmp11 = icmp eq i32 %2, 0, !dbg !53
  br i1 %cmp11, label %12, label %11, !dbg !54

; <label>:3:                                      ; preds = %.lr.ph, %10
  %indvars.iv = phi i64 [ %1, %.lr.ph ], [ %indvars.iv.next, %10 ]
  %first.029 = phi i32 [ 0, %.lr.ph ], [ %first.1, %10 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  call void @llvm.dbg.value(metadata i32 %first.029, metadata !40, metadata !DIExpression()), !dbg !45
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv.next, !dbg !55
  %4 = load i32, i32* %arrayidx, align 4, !dbg !55, !tbaa !52
  %cmp1 = icmp eq i32 %4, 0, !dbg !58
  %tobool = icmp ne i32 %first.029, 0, !dbg !59
  %or.cond = or i1 %tobool, %cmp1, !dbg !60
  br i1 %or.cond, label %7, label %5, !dbg !60

; <label>:5:                                      ; preds = %3
  %6 = trunc i64 %indvars.iv.next to i32, !dbg !61
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6) #5, !dbg !61
  call void @llvm.dbg.value(metadata i32 1, metadata !40, metadata !DIExpression()), !dbg !45
  br label %10, !dbg !63

; <label>:7:                                      ; preds = %3
  br i1 %cmp1, label %10, label %8, !dbg !64

; <label>:8:                                      ; preds = %7
  %9 = trunc i64 %indvars.iv.next to i32, !dbg !65
  %call9 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 %4, i32 %9) #5, !dbg !65
  br label %10, !dbg !65

; <label>:10:                                     ; preds = %7, %5, %8
  %first.1 = phi i32 [ %first.029, %8 ], [ %first.029, %7 ], [ 1, %5 ]
  call void @llvm.dbg.value(metadata i32 %first.1, metadata !40, metadata !DIExpression()), !dbg !45
  %cmp = icmp sgt i64 %indvars.iv, 2, !dbg !47
  br i1 %cmp, label %3, label %._crit_edge, !dbg !49, !llvm.loop !67

; <label>:11:                                     ; preds = %._crit_edge
  %call13 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 %2) #5, !dbg !69
  br label %12, !dbg !69

; <label>:12:                                     ; preds = %._crit_edge, %11
  %call14 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #5, !dbg !70
  ret void, !dbg !71
}

declare i32 @printf(i8*, ...) local_unnamed_addr #2

; Function Attrs: noinline nounwind uwtable
define noalias %struct.poly* @new_poly(i32 %degree, i32* nocapture readonly %coeffs) local_unnamed_addr #0 !dbg !72 {
  call void @llvm.dbg.value(metadata i32 %degree, metadata !76, metadata !DIExpression()), !dbg !81
  call void @llvm.dbg.value(metadata i32* %coeffs, metadata !77, metadata !DIExpression()), !dbg !82
  %call = tail call noalias i8* @malloc(i64 16) #5, !dbg !83
  %1 = bitcast i8* %call to %struct.poly*, !dbg !84
  call void @llvm.dbg.value(metadata %struct.poly* %1, metadata !78, metadata !DIExpression()), !dbg !85
  %degree1 = bitcast i8* %call to i32*, !dbg !86
  store i32 %degree, i32* %degree1, align 8, !dbg !87, !tbaa !88
  %add = add nsw i32 %degree, 1, !dbg !89
  %conv = sext i32 %add to i64, !dbg !90
  %mul = shl nsw i64 %conv, 2, !dbg !91
  %call2 = tail call noalias i8* @malloc(i64 %mul) #5, !dbg !92
  %coeffs3 = getelementptr inbounds i8, i8* %call, i64 8, !dbg !93
  %2 = bitcast i8* %coeffs3 to i8**, !dbg !94
  store i8* %call2, i8** %2, align 8, !dbg !94, !tbaa !24
  call void @llvm.dbg.value(metadata i32 0, metadata !79, metadata !DIExpression()), !dbg !95
  %cmp18 = icmp slt i32 %degree, 0, !dbg !96
  br i1 %cmp18, label %._crit_edge, label %.lr.ph, !dbg !98

.lr.ph:                                           ; preds = %0
  %3 = bitcast i8* %coeffs3 to i32**, !dbg !93
  %4 = load i32*, i32** %3, align 8, !tbaa !24
  %5 = add i32 %degree, 1, !dbg !98
  %wide.trip.count = zext i32 %5 to i64
  br label %6, !dbg !98

._crit_edge:                                      ; preds = %6, %0
  ret %struct.poly* %1, !dbg !99

; <label>:6:                                      ; preds = %6, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %6 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !79, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds i32, i32* %coeffs, i64 %indvars.iv, !dbg !100
  %7 = load i32, i32* %arrayidx, align 4, !dbg !100, !tbaa !52
  %arrayidx7 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv, !dbg !102
  store i32 %7, i32* %arrayidx7, align 4, !dbg !103, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !104
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !96
  br i1 %exitcond, label %._crit_edge, label %6, !dbg !98, !llvm.loop !105
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define void @neg_poly(i32* nocapture %x, i32 %size, i32 %mod) local_unnamed_addr #0 !dbg !107 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !111, metadata !DIExpression()), !dbg !116
  call void @llvm.dbg.value(metadata i32 %size, metadata !112, metadata !DIExpression()), !dbg !117
  call void @llvm.dbg.value(metadata i32 %mod, metadata !113, metadata !DIExpression()), !dbg !118
  call void @llvm.dbg.value(metadata i32 0, metadata !114, metadata !DIExpression()), !dbg !119
  %cmp8 = icmp slt i32 %size, 0, !dbg !120
  br i1 %cmp8, label %._crit_edge, label %.lr.ph, !dbg !122

.lr.ph:                                           ; preds = %0
  %1 = add i32 %size, 1, !dbg !122
  %wide.trip.count = zext i32 %1 to i64
  br label %2, !dbg !122

._crit_edge:                                      ; preds = %2, %0
  ret void, !dbg !123

; <label>:2:                                      ; preds = %2, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %2 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !114, metadata !DIExpression()), !dbg !119
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv, !dbg !124
  %3 = load i32, i32* %arrayidx, align 4, !dbg !124, !tbaa !52
  %sub = sub nsw i32 0, %3, !dbg !126
  %rem = srem i32 %sub, %mod, !dbg !127
  store i32 %rem, i32* %arrayidx, align 4, !dbg !128, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !129
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !120
  br i1 %exitcond, label %._crit_edge, label %2, !dbg !122, !llvm.loop !130
}

; Function Attrs: noinline nounwind uwtable
define void @scalar_mul(i32* nocapture %x, i32 %size, i32 %y, i32 %mod) local_unnamed_addr #0 !dbg !132 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !136, metadata !DIExpression()), !dbg !142
  call void @llvm.dbg.value(metadata i32 %size, metadata !137, metadata !DIExpression()), !dbg !143
  call void @llvm.dbg.value(metadata i32 %y, metadata !138, metadata !DIExpression()), !dbg !144
  call void @llvm.dbg.value(metadata i32 %mod, metadata !139, metadata !DIExpression()), !dbg !145
  call void @llvm.dbg.value(metadata i32 0, metadata !140, metadata !DIExpression()), !dbg !146
  %cmp8 = icmp slt i32 %size, 0, !dbg !147
  br i1 %cmp8, label %._crit_edge, label %.lr.ph, !dbg !149

.lr.ph:                                           ; preds = %0
  %1 = add i32 %size, 1, !dbg !149
  %wide.trip.count = zext i32 %1 to i64
  br label %2, !dbg !149

._crit_edge:                                      ; preds = %2, %0
  ret void, !dbg !150

; <label>:2:                                      ; preds = %2, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %2 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !140, metadata !DIExpression()), !dbg !146
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv, !dbg !151
  %3 = load i32, i32* %arrayidx, align 4, !dbg !151, !tbaa !52
  %mul = mul nsw i32 %3, %y, !dbg !153
  %rem = srem i32 %mul, %mod, !dbg !154
  store i32 %rem, i32* %arrayidx, align 4, !dbg !155, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !156
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !147
  br i1 %exitcond, label %._crit_edge, label %2, !dbg !149, !llvm.loop !157
}

; Function Attrs: noinline nounwind uwtable
define void @poly_divide(i32* nocapture %x, i32 %size, double %y, i32 %mod) local_unnamed_addr #0 !dbg !159 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !164, metadata !DIExpression()), !dbg !174
  call void @llvm.dbg.value(metadata i32 %size, metadata !165, metadata !DIExpression()), !dbg !175
  call void @llvm.dbg.value(metadata double %y, metadata !166, metadata !DIExpression()), !dbg !176
  call void @llvm.dbg.value(metadata i32 %mod, metadata !167, metadata !DIExpression()), !dbg !177
  call void @llvm.dbg.value(metadata i32 0, metadata !168, metadata !DIExpression()), !dbg !178
  %cmp31 = icmp slt i32 %size, 0, !dbg !179
  br i1 %cmp31, label %._crit_edge, label %.lr.ph, !dbg !180

.lr.ph:                                           ; preds = %0
  %1 = add i32 %size, 1, !dbg !180
  %wide.trip.count = zext i32 %1 to i64
  br label %2, !dbg !180

._crit_edge:                                      ; preds = %2, %0
  ret void, !dbg !181

; <label>:2:                                      ; preds = %2, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %2 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !168, metadata !DIExpression()), !dbg !178
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv, !dbg !182
  %3 = load i32, i32* %arrayidx, align 4, !dbg !182, !tbaa !52
  %conv = sitofp i32 %3 to double, !dbg !182
  %div1 = fdiv double %conv, %y, !dbg !183
  call void @llvm.dbg.value(metadata double %div1, metadata !170, metadata !DIExpression()), !dbg !184
  %conv6 = fptosi double %div1 to i32, !dbg !185
  call void @llvm.dbg.value(metadata i32 %conv6, metadata !173, metadata !DIExpression()), !dbg !186
  %conv7 = sitofp i32 %conv6 to double, !dbg !187
  %sub = fsub double %div1, %conv7, !dbg !188
  %cmp8 = fcmp ogt double %sub, 5.000000e-01, !dbg !189
  %add = zext i1 %cmp8 to i32, !dbg !190
  %cond = add nsw i32 %add, %conv6, !dbg !190
  %rem = srem i32 %cond, %mod, !dbg !191
  store i32 %rem, i32* %arrayidx, align 4, !dbg !192, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !193
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !179
  br i1 %exitcond, label %._crit_edge, label %2, !dbg !180, !llvm.loop !194
}

; Function Attrs: noinline nounwind uwtable
define noalias i32* @copy_poly(i32* nocapture readonly %x, i32 %size) local_unnamed_addr #0 !dbg !196 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !200, metadata !DIExpression()), !dbg !205
  call void @llvm.dbg.value(metadata i32 %size, metadata !201, metadata !DIExpression()), !dbg !206
  %conv = sext i32 %size to i64, !dbg !207
  %mul = shl nsw i64 %conv, 2, !dbg !208
  %call = tail call noalias i8* @malloc(i64 %mul) #5, !dbg !209
  %1 = bitcast i8* %call to i32*, !dbg !210
  call void @llvm.dbg.value(metadata i32* %1, metadata !202, metadata !DIExpression()), !dbg !211
  call void @llvm.dbg.value(metadata i32 0, metadata !203, metadata !DIExpression()), !dbg !212
  %cmp11 = icmp sgt i32 %size, 0, !dbg !213
  br i1 %cmp11, label %.lr.ph, label %._crit_edge, !dbg !215

.lr.ph:                                           ; preds = %0
  %wide.trip.count = zext i32 %size to i64
  br label %2, !dbg !215

._crit_edge:                                      ; preds = %2, %0
  ret i32* %1, !dbg !216

; <label>:2:                                      ; preds = %2, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %2 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !203, metadata !DIExpression()), !dbg !212
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv, !dbg !217
  %3 = load i32, i32* %arrayidx, align 4, !dbg !217, !tbaa !52
  %arrayidx3 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !218
  store i32 %3, i32* %arrayidx3, align 4, !dbg !219, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !220
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !213
  br i1 %exitcond, label %._crit_edge, label %2, !dbg !215, !llvm.loop !221
}

; Function Attrs: noinline nounwind uwtable
define i32* @polyadd(i32* %x, i32 %x_size, i32* %y, i32 %y_size, i32 %mod, i32* nocapture readnone %polymod, i32 %mod_size) local_unnamed_addr #0 !dbg !223 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !227, metadata !DIExpression()), !dbg !238
  call void @llvm.dbg.value(metadata i32 %x_size, metadata !228, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32* %y, metadata !229, metadata !DIExpression()), !dbg !240
  call void @llvm.dbg.value(metadata i32 %y_size, metadata !230, metadata !DIExpression()), !dbg !241
  call void @llvm.dbg.value(metadata i32 %mod, metadata !231, metadata !DIExpression()), !dbg !242
  call void @llvm.dbg.value(metadata i32* %polymod, metadata !232, metadata !DIExpression()), !dbg !243
  call void @llvm.dbg.value(metadata i32 %mod_size, metadata !233, metadata !DIExpression()), !dbg !244
  %cmp = icmp slt i32 %x_size, %mod_size, !dbg !245
  %cmp1 = icmp slt i32 %y_size, %mod_size, !dbg !245
  %or.cond = and i1 %cmp, %cmp1, !dbg !245
  br i1 %or.cond, label %2, label %1, !dbg !245

; <label>:1:                                      ; preds = %0
  tail call void @__assert_fail(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i32 66, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__.polyadd, i64 0, i64 0)) #6, !dbg !245
  unreachable, !dbg !245

; <label>:2:                                      ; preds = %0
  %cmp2 = icmp sge i32 %x_size, %y_size, !dbg !248
  %cond = select i1 %cmp2, i32 %y_size, i32 %x_size, !dbg !249
  call void @llvm.dbg.value(metadata i32 %cond, metadata !234, metadata !DIExpression()), !dbg !250
  %cond6 = select i1 %cmp2, i32* %x, i32* %y, !dbg !251
  call void @llvm.dbg.value(metadata i32* %cond6, metadata !236, metadata !DIExpression()), !dbg !252
  call void @llvm.dbg.value(metadata i32 0, metadata !237, metadata !DIExpression()), !dbg !253
  %cmp734 = icmp slt i32 %cond, 0, !dbg !254
  br i1 %cmp734, label %._crit_edge, label %.lr.ph, !dbg !257

.lr.ph:                                           ; preds = %2
  %3 = sext i32 %cond to i64, !dbg !257
  br label %4, !dbg !257

; <label>:4:                                      ; preds = %4, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %4 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !237, metadata !DIExpression()), !dbg !253
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv, !dbg !258
  %5 = load i32, i32* %arrayidx, align 4, !dbg !258, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32, i32* %y, i64 %indvars.iv, !dbg !260
  %6 = load i32, i32* %arrayidx9, align 4, !dbg !260, !tbaa !52
  %add = add nsw i32 %6, %5, !dbg !261
  %rem = srem i32 %add, %mod, !dbg !262
  %arrayidx11 = getelementptr inbounds i32, i32* %cond6, i64 %indvars.iv, !dbg !263
  store i32 %rem, i32* %arrayidx11, align 4, !dbg !264, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !265
  %cmp7 = icmp slt i64 %indvars.iv, %3, !dbg !254
  br i1 %cmp7, label %4, label %._crit_edge, !dbg !257, !llvm.loop !266

._crit_edge:                                      ; preds = %4, %2
  ret i32* %cond6, !dbg !268
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable
define i32* @polymodulo(i32* returned %x, i32 %x_size, i32* nocapture readnone %polymod, i32 %mod_size, i32 %mod) local_unnamed_addr #0 !dbg !269 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !273, metadata !DIExpression()), !dbg !289
  call void @llvm.dbg.value(metadata i32 %x_size, metadata !274, metadata !DIExpression()), !dbg !290
  call void @llvm.dbg.value(metadata i32* %polymod, metadata !275, metadata !DIExpression()), !dbg !291
  call void @llvm.dbg.value(metadata i32 %mod_size, metadata !276, metadata !DIExpression()), !dbg !292
  call void @llvm.dbg.value(metadata i32 %mod, metadata !277, metadata !DIExpression()), !dbg !293
  %1 = icmp slt i32 %mod_size, %x_size, !dbg !294
  call void @llvm.dbg.value(metadata i32 %mod_size, metadata !278, metadata !DIExpression()), !dbg !295
  call void @llvm.dbg.value(metadata i32 1, metadata !279, metadata !DIExpression()), !dbg !296
  call void @llvm.dbg.value(metadata i32 %mod_size, metadata !280, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !297
  call void @llvm.dbg.value(metadata i32 %mod_size, metadata !280, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !297
  br i1 %1, label %.lr.ph84, label %.critedge, !dbg !294

.lr.ph84:                                         ; preds = %0
  %2 = sext i32 %mod_size to i64, !dbg !298
  %3 = sext i32 %x_size to i64, !dbg !298
  br label %5, !dbg !298

; <label>:4:                                      ; preds = %5
  %cmp1 = icmp slt i64 %indvars.iv.next90, %3, !dbg !299
  br i1 %cmp1, label %5, label %.critedge, !dbg !298, !llvm.loop !301

; <label>:5:                                      ; preds = %.lr.ph84, %4
  %indvars.iv89 = phi i64 [ %2, %.lr.ph84 ], [ %indvars.iv.next90, %4 ]
  %indvars.iv.next90 = add nsw i64 %indvars.iv89, 1
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv.next90, !dbg !303
  %6 = load i32, i32* %arrayidx, align 4, !dbg !303, !tbaa !52
  %cmp2 = icmp eq i32 %6, 0, !dbg !306
  br i1 %cmp2, label %4, label %7, !dbg !307

; <label>:7:                                      ; preds = %5
  call void @llvm.dbg.value(metadata i32 %x_size, metadata !282, metadata !DIExpression()), !dbg !308
  %cmp477 = icmp slt i32 %x_size, %mod_size, !dbg !309
  br i1 %cmp477, label %._crit_edge, label %.lr.ph79, !dbg !310

.lr.ph79:                                         ; preds = %7
  %8 = sext i32 %x_size to i64, !dbg !310
  %9 = sext i32 %mod_size to i64, !dbg !310
  %10 = sext i32 %mod_size to i64, !dbg !310
  br label %12, !dbg !310

._crit_edge:                                      ; preds = %12, %7
  call void @llvm.dbg.value(metadata i32 0, metadata !287, metadata !DIExpression()), !dbg !311
  %cmp1575 = icmp slt i32 %mod_size, 0, !dbg !312
  br i1 %cmp1575, label %.critedge, label %.lr.ph, !dbg !314

.lr.ph:                                           ; preds = %._crit_edge
  %11 = add i32 %mod_size, 1, !dbg !314
  %wide.trip.count = zext i32 %11 to i64
  br label %16, !dbg !314

; <label>:12:                                     ; preds = %12, %.lr.ph79
  %indvars.iv86 = phi i64 [ %indvars.iv.next87, %12 ], [ %8, %.lr.ph79 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv86, metadata !282, metadata !DIExpression()), !dbg !308
  %13 = sub nsw i64 %indvars.iv86, %9, !dbg !315
  %arrayidx6 = getelementptr inbounds i32, i32* %x, i64 %13, !dbg !316
  %14 = load i32, i32* %arrayidx6, align 4, !dbg !316, !tbaa !52
  %arrayidx8 = getelementptr inbounds i32, i32* %x, i64 %indvars.iv86, !dbg !317
  %15 = load i32, i32* %arrayidx8, align 4, !dbg !317, !tbaa !52
  %sub9 = sub nsw i32 %14, %15, !dbg !318
  store i32 %sub9, i32* %arrayidx6, align 4, !dbg !319, !tbaa !52
  store i32 0, i32* %arrayidx8, align 4, !dbg !320, !tbaa !52
  %indvars.iv.next87 = add nsw i64 %indvars.iv86, -1, !dbg !321
  %cmp4 = icmp sgt i64 %indvars.iv86, %10, !dbg !309
  br i1 %cmp4, label %12, label %._crit_edge, !dbg !310, !llvm.loop !322

; <label>:16:                                     ; preds = %16, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %16 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !287, metadata !DIExpression()), !dbg !311
  %arrayidx17 = getelementptr inbounds i32, i32* %x, i64 %indvars.iv, !dbg !324
  %17 = load i32, i32* %arrayidx17, align 4, !dbg !324, !tbaa !52
  %sub18 = sub nsw i32 0, %17, !dbg !326
  %cmp23 = icmp slt i32 %17, 0, !dbg !327
  %rem = srem i32 %sub18, %mod
  %add29 = select i1 %cmp23, i32 0, i32 %mod, !dbg !328
  %cond = add nsw i32 %add29, %rem, !dbg !328
  store i32 %cond, i32* %arrayidx17, align 4, !dbg !329, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !330
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !312
  br i1 %exitcond, label %.critedge, label %16, !dbg !314, !llvm.loop !331

.critedge:                                        ; preds = %4, %16, %0, %._crit_edge
  ret i32* %x, !dbg !333
}

; Function Attrs: noinline nounwind uwtable
define i32* @polymul(i32* nocapture readonly %x, i32 %x_size, i32* nocapture readonly %y, i32 %y_size, i32 %mod, i32* nocapture readnone %polymod, i32 %mod_size) local_unnamed_addr #0 !dbg !334 {
  call void @llvm.dbg.value(metadata i32* %x, metadata !336, metadata !DIExpression()), !dbg !354
  call void @llvm.dbg.value(metadata i32 %x_size, metadata !337, metadata !DIExpression()), !dbg !355
  call void @llvm.dbg.value(metadata i32* %y, metadata !338, metadata !DIExpression()), !dbg !356
  call void @llvm.dbg.value(metadata i32 %y_size, metadata !339, metadata !DIExpression()), !dbg !357
  call void @llvm.dbg.value(metadata i32 %mod, metadata !340, metadata !DIExpression()), !dbg !358
  call void @llvm.dbg.value(metadata i32* %polymod, metadata !341, metadata !DIExpression()), !dbg !359
  call void @llvm.dbg.value(metadata i32 %mod_size, metadata !342, metadata !DIExpression()), !dbg !360
  %cmp = icmp slt i32 %x_size, %mod_size, !dbg !361
  %cmp1 = icmp slt i32 %y_size, %mod_size, !dbg !361
  %or.cond = and i1 %cmp, %cmp1, !dbg !361
  br i1 %or.cond, label %2, label %1, !dbg !361

; <label>:1:                                      ; preds = %0
  tail call void @__assert_fail(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i32 108, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__.polymul, i64 0, i64 0)) #6, !dbg !361
  unreachable, !dbg !361

; <label>:2:                                      ; preds = %0
  %add = add nsw i32 %y_size, %x_size, !dbg !364
  call void @llvm.dbg.value(metadata i32 %add, metadata !343, metadata !DIExpression()), !dbg !365
  %add2 = add nsw i32 %add, 1, !dbg !366
  %conv = sext i32 %add2 to i64, !dbg !367
  %mul = shl nsw i64 %conv, 2, !dbg !368
  %call = tail call noalias i8* @malloc(i64 %mul) #5, !dbg !369
  %3 = bitcast i8* %call to i32*, !dbg !370
  call void @llvm.dbg.value(metadata i32* %3, metadata !344, metadata !DIExpression()), !dbg !371
  call void @llvm.dbg.value(metadata i32 0, metadata !345, metadata !DIExpression()), !dbg !372
  %cmp366 = icmp slt i32 %add, 0, !dbg !373
  br i1 %cmp366, label %._crit_edge70, label %.lr.ph69, !dbg !375

.lr.ph69:                                         ; preds = %2
  %4 = add i32 %y_size, %x_size, !dbg !375
  %5 = add i32 %4, 1, !dbg !375
  %wide.trip.count78 = zext i32 %5 to i64
  br label %8, !dbg !375

._crit_edge70:                                    ; preds = %8, %2
  call void @llvm.dbg.value(metadata i32 0, metadata !347, metadata !DIExpression()), !dbg !376
  %cmp660 = icmp slt i32 %x_size, 0, !dbg !377
  br i1 %cmp660, label %._crit_edge65, label %.lr.ph64, !dbg !378

.lr.ph64:                                         ; preds = %._crit_edge70
  %cmp858 = icmp slt i32 %y_size, 0
  %6 = add i32 %y_size, 1, !dbg !378
  %7 = add i32 %x_size, 1, !dbg !378
  %wide.trip.count74 = zext i32 %7 to i64
  %wide.trip.count = zext i32 %6 to i64
  br label %9, !dbg !378

; <label>:8:                                      ; preds = %8, %.lr.ph69
  %indvars.iv76 = phi i64 [ %indvars.iv.next77, %8 ], [ 0, %.lr.ph69 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv76, metadata !345, metadata !DIExpression()), !dbg !372
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %indvars.iv76, !dbg !379
  store i32 0, i32* %arrayidx, align 4, !dbg !381, !tbaa !52
  %indvars.iv.next77 = add nuw nsw i64 %indvars.iv76, 1, !dbg !382
  %exitcond79 = icmp eq i64 %indvars.iv.next77, %wide.trip.count78, !dbg !373
  br i1 %exitcond79, label %._crit_edge70, label %8, !dbg !375, !llvm.loop !383

._crit_edge65:                                    ; preds = %._crit_edge, %._crit_edge70
  %call27 = tail call i32* @polymodulo(i32* %3, i32 %add, i32* undef, i32 %mod_size, i32 %mod) #7, !dbg !385
  call void @llvm.dbg.value(metadata i32* %call27, metadata !353, metadata !DIExpression()), !dbg !386
  ret i32* %call27, !dbg !387

; <label>:9:                                      ; preds = %._crit_edge, %.lr.ph64
  %indvars.iv72 = phi i64 [ %indvars.iv.next73, %._crit_edge ], [ 0, %.lr.ph64 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !349, metadata !DIExpression()), !dbg !388
  call void @llvm.dbg.value(metadata i64 %indvars.iv72, metadata !347, metadata !DIExpression()), !dbg !376
  br i1 %cmp858, label %._crit_edge, label %.lr.ph, !dbg !389

.lr.ph:                                           ; preds = %9
  %arrayidx11 = getelementptr inbounds i32, i32* %x, i64 %indvars.iv72
  %10 = load i32, i32* %arrayidx11, align 4, !tbaa !52
  br label %11, !dbg !389

._crit_edge:                                      ; preds = %11, %9
  %indvars.iv.next73 = add nuw nsw i64 %indvars.iv72, 1, !dbg !390
  %exitcond75 = icmp eq i64 %indvars.iv.next73, %wide.trip.count74, !dbg !377
  br i1 %exitcond75, label %._crit_edge65, label %9, !dbg !378, !llvm.loop !391

; <label>:11:                                     ; preds = %11, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %11 ], [ 0, %.lr.ph ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !349, metadata !DIExpression()), !dbg !388
  %arrayidx13 = getelementptr inbounds i32, i32* %y, i64 %indvars.iv, !dbg !393
  %12 = load i32, i32* %arrayidx13, align 4, !dbg !393, !tbaa !52
  %mul14 = mul nsw i32 %12, %10, !dbg !396
  %13 = add nuw nsw i64 %indvars.iv, %indvars.iv72, !dbg !397
  %arrayidx17 = getelementptr inbounds i32, i32* %3, i64 %13, !dbg !398
  %14 = load i32, i32* %arrayidx17, align 4, !dbg !399, !tbaa !52
  %add18 = add nsw i32 %14, %mul14, !dbg !399
  %rem = srem i32 %add18, %mod, !dbg !400
  store i32 %rem, i32* %arrayidx17, align 4, !dbg !401, !tbaa !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !402
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !403
  br i1 %exitcond, label %._crit_edge, label %11, !dbg !389, !llvm.loop !404
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind }
attributes #6 = { nobuiltin noreturn nounwind }
attributes #7 = { nobuiltin }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!13, !14, !15}
!llvm.ident = !{!16}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 6.0.0 (tags/RELEASE_600/final)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "poly.c", directory: "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt")
!2 = !{}
!3 = !{!4, !12, !10}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "poly", file: !6, line: 11, baseType: !7)
!6 = !DIFile(filename: "./poly.h", directory: "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt")
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "poly", file: !6, line: 8, size: 128, elements: !8)
!8 = !{!9, !11}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "degree", scope: !7, file: !6, line: 9, baseType: !10, size: 32)
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "coeffs", scope: !7, file: !6, line: 10, baseType: !12, size: 64, offset: 64)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!13 = !{i32 2, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
!17 = distinct !DISubprogram(name: "free_poly", scope: !1, file: !1, line: 3, type: !18, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !20)
!18 = !DISubroutineType(types: !19)
!19 = !{null, !4}
!20 = !{!21}
!21 = !DILocalVariable(name: "x", arg: 1, scope: !17, file: !1, line: 3, type: !4)
!22 = !DILocation(line: 3, column: 22, scope: !17)
!23 = !DILocation(line: 6, column: 13, scope: !17)
!24 = !{!25, !29, i64 8}
!25 = !{!"poly", !26, i64 0, !29, i64 8}
!26 = !{!"int", !27, i64 0}
!27 = !{!"omnipotent char", !28, i64 0}
!28 = !{!"Simple C/C++ TBAA"}
!29 = !{!"any pointer", !27, i64 0}
!30 = !DILocation(line: 6, column: 5, scope: !17)
!31 = !DILocation(line: 7, column: 10, scope: !17)
!32 = !DILocation(line: 7, column: 5, scope: !17)
!33 = !DILocation(line: 8, column: 1, scope: !17)
!34 = distinct !DISubprogram(name: "print_poly", scope: !1, file: !1, line: 10, type: !35, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !37)
!35 = !DISubroutineType(types: !36)
!36 = !{null, !12, !10}
!37 = !{!38, !39, !40, !41}
!38 = !DILocalVariable(name: "x", arg: 1, scope: !34, file: !1, line: 10, type: !12)
!39 = !DILocalVariable(name: "size", arg: 2, scope: !34, file: !1, line: 10, type: !10)
!40 = !DILocalVariable(name: "first", scope: !34, file: !1, line: 11, type: !10)
!41 = !DILocalVariable(name: "i", scope: !42, file: !1, line: 12, type: !10)
!42 = distinct !DILexicalBlock(scope: !34, file: !1, line: 12, column: 5)
!43 = !DILocation(line: 10, column: 22, scope: !34)
!44 = !DILocation(line: 10, column: 29, scope: !34)
!45 = !DILocation(line: 11, column: 9, scope: !34)
!46 = !DILocation(line: 12, column: 13, scope: !42)
!47 = !DILocation(line: 12, column: 26, scope: !48)
!48 = distinct !DILexicalBlock(scope: !42, file: !1, line: 12, column: 5)
!49 = !DILocation(line: 12, column: 5, scope: !42)
!50 = !DILocation(line: 20, column: 8, scope: !51)
!51 = distinct !DILexicalBlock(scope: !34, file: !1, line: 20, column: 8)
!52 = !{!26, !26, i64 0}
!53 = !DILocation(line: 20, column: 13, scope: !51)
!54 = !DILocation(line: 20, column: 8, scope: !34)
!55 = !DILocation(line: 13, column: 12, scope: !56)
!56 = distinct !DILexicalBlock(scope: !57, file: !1, line: 13, column: 12)
!57 = distinct !DILexicalBlock(scope: !48, file: !1, line: 12, column: 34)
!58 = !DILocation(line: 13, column: 17, scope: !56)
!59 = !DILocation(line: 13, column: 26, scope: !56)
!60 = !DILocation(line: 13, column: 22, scope: !56)
!61 = !DILocation(line: 14, column: 13, scope: !62)
!62 = distinct !DILexicalBlock(scope: !56, file: !1, line: 13, column: 32)
!63 = !DILocation(line: 16, column: 9, scope: !62)
!64 = !DILocation(line: 17, column: 17, scope: !56)
!65 = !DILocation(line: 18, column: 13, scope: !66)
!66 = distinct !DILexicalBlock(scope: !56, file: !1, line: 17, column: 17)
!67 = distinct !{!67, !49, !68}
!68 = !DILocation(line: 19, column: 5, scope: !42)
!69 = !DILocation(line: 20, column: 19, scope: !51)
!70 = !DILocation(line: 21, column: 5, scope: !34)
!71 = !DILocation(line: 22, column: 1, scope: !34)
!72 = distinct !DISubprogram(name: "new_poly", scope: !1, file: !1, line: 24, type: !73, isLocal: false, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !75)
!73 = !DISubroutineType(types: !74)
!74 = !{!4, !10, !12}
!75 = !{!76, !77, !78, !79}
!76 = !DILocalVariable(name: "degree", arg: 1, scope: !72, file: !1, line: 24, type: !10)
!77 = !DILocalVariable(name: "coeffs", arg: 2, scope: !72, file: !1, line: 24, type: !12)
!78 = !DILocalVariable(name: "x", scope: !72, file: !1, line: 25, type: !4)
!79 = !DILocalVariable(name: "i", scope: !80, file: !1, line: 28, type: !10)
!80 = distinct !DILexicalBlock(scope: !72, file: !1, line: 28, column: 5)
!81 = !DILocation(line: 24, column: 20, scope: !72)
!82 = !DILocation(line: 24, column: 33, scope: !72)
!83 = !DILocation(line: 25, column: 23, scope: !72)
!84 = !DILocation(line: 25, column: 15, scope: !72)
!85 = !DILocation(line: 25, column: 11, scope: !72)
!86 = !DILocation(line: 26, column: 8, scope: !72)
!87 = !DILocation(line: 26, column: 15, scope: !72)
!88 = !{!25, !26, i64 0}
!89 = !DILocation(line: 27, column: 38, scope: !72)
!90 = !DILocation(line: 27, column: 31, scope: !72)
!91 = !DILocation(line: 27, column: 41, scope: !72)
!92 = !DILocation(line: 27, column: 24, scope: !72)
!93 = !DILocation(line: 27, column: 8, scope: !72)
!94 = !DILocation(line: 27, column: 15, scope: !72)
!95 = !DILocation(line: 28, column: 13, scope: !80)
!96 = !DILocation(line: 28, column: 19, scope: !97)
!97 = distinct !DILexicalBlock(scope: !80, file: !1, line: 28, column: 5)
!98 = !DILocation(line: 28, column: 5, scope: !80)
!99 = !DILocation(line: 31, column: 5, scope: !72)
!100 = !DILocation(line: 29, column: 24, scope: !101)
!101 = distinct !DILexicalBlock(scope: !97, file: !1, line: 28, column: 33)
!102 = !DILocation(line: 29, column: 9, scope: !101)
!103 = !DILocation(line: 29, column: 22, scope: !101)
!104 = !DILocation(line: 28, column: 30, scope: !97)
!105 = distinct !{!105, !98, !106}
!106 = !DILocation(line: 30, column: 5, scope: !80)
!107 = distinct !DISubprogram(name: "neg_poly", scope: !1, file: !1, line: 34, type: !108, isLocal: false, isDefinition: true, scopeLine: 34, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !110)
!108 = !DISubroutineType(types: !109)
!109 = !{null, !12, !10, !10}
!110 = !{!111, !112, !113, !114}
!111 = !DILocalVariable(name: "x", arg: 1, scope: !107, file: !1, line: 34, type: !12)
!112 = !DILocalVariable(name: "size", arg: 2, scope: !107, file: !1, line: 34, type: !10)
!113 = !DILocalVariable(name: "mod", arg: 3, scope: !107, file: !1, line: 34, type: !10)
!114 = !DILocalVariable(name: "i", scope: !115, file: !1, line: 35, type: !10)
!115 = distinct !DILexicalBlock(scope: !107, file: !1, line: 35, column: 5)
!116 = !DILocation(line: 34, column: 20, scope: !107)
!117 = !DILocation(line: 34, column: 27, scope: !107)
!118 = !DILocation(line: 34, column: 37, scope: !107)
!119 = !DILocation(line: 35, column: 13, scope: !115)
!120 = !DILocation(line: 35, column: 19, scope: !121)
!121 = distinct !DILexicalBlock(scope: !115, file: !1, line: 35, column: 5)
!122 = !DILocation(line: 35, column: 5, scope: !115)
!123 = !DILocation(line: 38, column: 1, scope: !107)
!124 = !DILocation(line: 36, column: 18, scope: !125)
!125 = distinct !DILexicalBlock(scope: !121, file: !1, line: 35, column: 31)
!126 = !DILocation(line: 36, column: 17, scope: !125)
!127 = !DILocation(line: 36, column: 24, scope: !125)
!128 = !DILocation(line: 36, column: 14, scope: !125)
!129 = !DILocation(line: 35, column: 28, scope: !121)
!130 = distinct !{!130, !122, !131}
!131 = !DILocation(line: 37, column: 5, scope: !115)
!132 = distinct !DISubprogram(name: "scalar_mul", scope: !1, file: !1, line: 40, type: !133, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !135)
!133 = !DISubroutineType(types: !134)
!134 = !{null, !12, !10, !10, !10}
!135 = !{!136, !137, !138, !139, !140}
!136 = !DILocalVariable(name: "x", arg: 1, scope: !132, file: !1, line: 40, type: !12)
!137 = !DILocalVariable(name: "size", arg: 2, scope: !132, file: !1, line: 40, type: !10)
!138 = !DILocalVariable(name: "y", arg: 3, scope: !132, file: !1, line: 40, type: !10)
!139 = !DILocalVariable(name: "mod", arg: 4, scope: !132, file: !1, line: 40, type: !10)
!140 = !DILocalVariable(name: "i", scope: !141, file: !1, line: 41, type: !10)
!141 = distinct !DILexicalBlock(scope: !132, file: !1, line: 41, column: 5)
!142 = !DILocation(line: 40, column: 22, scope: !132)
!143 = !DILocation(line: 40, column: 29, scope: !132)
!144 = !DILocation(line: 40, column: 39, scope: !132)
!145 = !DILocation(line: 40, column: 46, scope: !132)
!146 = !DILocation(line: 41, column: 13, scope: !141)
!147 = !DILocation(line: 41, column: 19, scope: !148)
!148 = distinct !DILexicalBlock(scope: !141, file: !1, line: 41, column: 5)
!149 = !DILocation(line: 41, column: 5, scope: !141)
!150 = !DILocation(line: 44, column: 1, scope: !132)
!151 = !DILocation(line: 42, column: 21, scope: !152)
!152 = distinct !DILexicalBlock(scope: !148, file: !1, line: 41, column: 31)
!153 = !DILocation(line: 42, column: 19, scope: !152)
!154 = !DILocation(line: 42, column: 27, scope: !152)
!155 = !DILocation(line: 42, column: 14, scope: !152)
!156 = !DILocation(line: 41, column: 28, scope: !148)
!157 = distinct !{!157, !149, !158}
!158 = !DILocation(line: 43, column: 5, scope: !141)
!159 = distinct !DISubprogram(name: "poly_divide", scope: !1, file: !1, line: 46, type: !160, isLocal: false, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !163)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !12, !10, !162, !10}
!162 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!163 = !{!164, !165, !166, !167, !168, !170, !173}
!164 = !DILocalVariable(name: "x", arg: 1, scope: !159, file: !1, line: 46, type: !12)
!165 = !DILocalVariable(name: "size", arg: 2, scope: !159, file: !1, line: 46, type: !10)
!166 = !DILocalVariable(name: "y", arg: 3, scope: !159, file: !1, line: 46, type: !162)
!167 = !DILocalVariable(name: "mod", arg: 4, scope: !159, file: !1, line: 46, type: !10)
!168 = !DILocalVariable(name: "i", scope: !169, file: !1, line: 47, type: !10)
!169 = distinct !DILexicalBlock(scope: !159, file: !1, line: 47, column: 5)
!170 = !DILocalVariable(name: "div", scope: !171, file: !1, line: 48, type: !162)
!171 = distinct !DILexicalBlock(scope: !172, file: !1, line: 47, column: 31)
!172 = distinct !DILexicalBlock(scope: !169, file: !1, line: 47, column: 5)
!173 = !DILocalVariable(name: "floor", scope: !171, file: !1, line: 49, type: !10)
!174 = !DILocation(line: 46, column: 23, scope: !159)
!175 = !DILocation(line: 46, column: 30, scope: !159)
!176 = !DILocation(line: 46, column: 43, scope: !159)
!177 = !DILocation(line: 46, column: 50, scope: !159)
!178 = !DILocation(line: 47, column: 13, scope: !169)
!179 = !DILocation(line: 47, column: 19, scope: !172)
!180 = !DILocation(line: 47, column: 5, scope: !169)
!181 = !DILocation(line: 53, column: 1, scope: !159)
!182 = !DILocation(line: 48, column: 22, scope: !171)
!183 = !DILocation(line: 48, column: 26, scope: !171)
!184 = !DILocation(line: 48, column: 16, scope: !171)
!185 = !DILocation(line: 49, column: 21, scope: !171)
!186 = !DILocation(line: 49, column: 13, scope: !171)
!187 = !DILocation(line: 50, column: 22, scope: !171)
!188 = !DILocation(line: 50, column: 20, scope: !171)
!189 = !DILocation(line: 50, column: 28, scope: !171)
!190 = !DILocation(line: 50, column: 16, scope: !171)
!191 = !DILocation(line: 51, column: 21, scope: !171)
!192 = !DILocation(line: 51, column: 14, scope: !171)
!193 = !DILocation(line: 47, column: 28, scope: !172)
!194 = distinct !{!194, !180, !195}
!195 = !DILocation(line: 52, column: 5, scope: !169)
!196 = distinct !DISubprogram(name: "copy_poly", scope: !1, file: !1, line: 55, type: !197, isLocal: false, isDefinition: true, scopeLine: 55, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !199)
!197 = !DISubroutineType(types: !198)
!198 = !{!12, !12, !10}
!199 = !{!200, !201, !202, !203}
!200 = !DILocalVariable(name: "x", arg: 1, scope: !196, file: !1, line: 55, type: !12)
!201 = !DILocalVariable(name: "size", arg: 2, scope: !196, file: !1, line: 55, type: !10)
!202 = !DILocalVariable(name: "coeffs", scope: !196, file: !1, line: 56, type: !12)
!203 = !DILocalVariable(name: "i", scope: !204, file: !1, line: 57, type: !10)
!204 = distinct !DILexicalBlock(scope: !196, file: !1, line: 57, column: 5)
!205 = !DILocation(line: 55, column: 21, scope: !196)
!206 = !DILocation(line: 55, column: 28, scope: !196)
!207 = !DILocation(line: 56, column: 33, scope: !196)
!208 = !DILocation(line: 56, column: 39, scope: !196)
!209 = !DILocation(line: 56, column: 26, scope: !196)
!210 = !DILocation(line: 56, column: 19, scope: !196)
!211 = !DILocation(line: 56, column: 10, scope: !196)
!212 = !DILocation(line: 57, column: 13, scope: !204)
!213 = !DILocation(line: 57, column: 19, scope: !214)
!214 = distinct !DILexicalBlock(scope: !204, file: !1, line: 57, column: 5)
!215 = !DILocation(line: 57, column: 5, scope: !204)
!216 = !DILocation(line: 58, column: 5, scope: !196)
!217 = !DILocation(line: 57, column: 43, scope: !214)
!218 = !DILocation(line: 57, column: 31, scope: !214)
!219 = !DILocation(line: 57, column: 41, scope: !214)
!220 = !DILocation(line: 57, column: 27, scope: !214)
!221 = distinct !{!221, !215, !222}
!222 = !DILocation(line: 57, column: 46, scope: !204)
!223 = distinct !DISubprogram(name: "polyadd", scope: !1, file: !1, line: 61, type: !224, isLocal: false, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !226)
!224 = !DISubroutineType(types: !225)
!225 = !{!12, !12, !10, !12, !10, !10, !12, !10}
!226 = !{!227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237}
!227 = !DILocalVariable(name: "x", arg: 1, scope: !223, file: !1, line: 61, type: !12)
!228 = !DILocalVariable(name: "x_size", arg: 2, scope: !223, file: !1, line: 61, type: !10)
!229 = !DILocalVariable(name: "y", arg: 3, scope: !223, file: !1, line: 61, type: !12)
!230 = !DILocalVariable(name: "y_size", arg: 4, scope: !223, file: !1, line: 61, type: !10)
!231 = !DILocalVariable(name: "mod", arg: 5, scope: !223, file: !1, line: 62, type: !10)
!232 = !DILocalVariable(name: "polymod", arg: 6, scope: !223, file: !1, line: 62, type: !12)
!233 = !DILocalVariable(name: "mod_size", arg: 7, scope: !223, file: !1, line: 62, type: !10)
!234 = !DILocalVariable(name: "min", scope: !223, file: !1, line: 67, type: !10)
!235 = !DILocalVariable(name: "max", scope: !223, file: !1, line: 68, type: !10)
!236 = !DILocalVariable(name: "result", scope: !223, file: !1, line: 69, type: !12)
!237 = !DILocalVariable(name: "i", scope: !223, file: !1, line: 70, type: !10)
!238 = !DILocation(line: 61, column: 19, scope: !223)
!239 = !DILocation(line: 61, column: 26, scope: !223)
!240 = !DILocation(line: 61, column: 39, scope: !223)
!241 = !DILocation(line: 61, column: 46, scope: !223)
!242 = !DILocation(line: 62, column: 18, scope: !223)
!243 = !DILocation(line: 62, column: 28, scope: !223)
!244 = !DILocation(line: 62, column: 41, scope: !223)
!245 = !DILocation(line: 66, column: 5, scope: !246)
!246 = distinct !DILexicalBlock(scope: !247, file: !1, line: 66, column: 5)
!247 = distinct !DILexicalBlock(scope: !223, file: !1, line: 66, column: 5)
!248 = !DILocation(line: 67, column: 22, scope: !223)
!249 = !DILocation(line: 67, column: 15, scope: !223)
!250 = !DILocation(line: 67, column: 9, scope: !223)
!251 = !DILocation(line: 69, column: 19, scope: !223)
!252 = !DILocation(line: 69, column: 10, scope: !223)
!253 = !DILocation(line: 70, column: 9, scope: !223)
!254 = !DILocation(line: 71, column: 15, scope: !255)
!255 = distinct !DILexicalBlock(scope: !256, file: !1, line: 71, column: 5)
!256 = distinct !DILexicalBlock(scope: !223, file: !1, line: 71, column: 5)
!257 = !DILocation(line: 71, column: 5, scope: !256)
!258 = !DILocation(line: 72, column: 22, scope: !259)
!259 = distinct !DILexicalBlock(scope: !255, file: !1, line: 71, column: 26)
!260 = !DILocation(line: 72, column: 29, scope: !259)
!261 = !DILocation(line: 72, column: 27, scope: !259)
!262 = !DILocation(line: 72, column: 35, scope: !259)
!263 = !DILocation(line: 72, column: 9, scope: !259)
!264 = !DILocation(line: 72, column: 19, scope: !259)
!265 = !DILocation(line: 71, column: 23, scope: !255)
!266 = distinct !{!266, !257, !267}
!267 = !DILocation(line: 73, column: 5, scope: !256)
!268 = !DILocation(line: 74, column: 5, scope: !223)
!269 = distinct !DISubprogram(name: "polymodulo", scope: !1, file: !1, line: 77, type: !270, isLocal: false, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !272)
!270 = !DISubroutineType(types: !271)
!271 = !{!12, !12, !10, !12, !10, !10}
!272 = !{!273, !274, !275, !276, !277, !278, !279, !280, !282, !284, !287}
!273 = !DILocalVariable(name: "x", arg: 1, scope: !269, file: !1, line: 77, type: !12)
!274 = !DILocalVariable(name: "x_size", arg: 2, scope: !269, file: !1, line: 77, type: !10)
!275 = !DILocalVariable(name: "polymod", arg: 3, scope: !269, file: !1, line: 77, type: !12)
!276 = !DILocalVariable(name: "mod_size", arg: 4, scope: !269, file: !1, line: 78, type: !10)
!277 = !DILocalVariable(name: "mod", arg: 5, scope: !269, file: !1, line: 78, type: !10)
!278 = !DILocalVariable(name: "exp", scope: !269, file: !1, line: 82, type: !10)
!279 = !DILocalVariable(name: "padded_zeros", scope: !269, file: !1, line: 83, type: !10)
!280 = !DILocalVariable(name: "i", scope: !281, file: !1, line: 84, type: !10)
!281 = distinct !DILexicalBlock(scope: !269, file: !1, line: 84, column: 5)
!282 = !DILocalVariable(name: "i", scope: !283, file: !1, line: 93, type: !10)
!283 = distinct !DILexicalBlock(scope: !269, file: !1, line: 93, column: 5)
!284 = !DILocalVariable(name: "j", scope: !285, file: !1, line: 94, type: !10)
!285 = distinct !DILexicalBlock(scope: !286, file: !1, line: 93, column: 35)
!286 = distinct !DILexicalBlock(scope: !283, file: !1, line: 93, column: 5)
!287 = !DILocalVariable(name: "i", scope: !288, file: !1, line: 98, type: !10)
!288 = distinct !DILexicalBlock(scope: !269, file: !1, line: 98, column: 5)
!289 = !DILocation(line: 77, column: 22, scope: !269)
!290 = !DILocation(line: 77, column: 29, scope: !269)
!291 = !DILocation(line: 77, column: 42, scope: !269)
!292 = !DILocation(line: 78, column: 22, scope: !269)
!293 = !DILocation(line: 78, column: 36, scope: !269)
!294 = !DILocation(line: 79, column: 8, scope: !269)
!295 = !DILocation(line: 82, column: 9, scope: !269)
!296 = !DILocation(line: 83, column: 9, scope: !269)
!297 = !DILocation(line: 84, column: 13, scope: !281)
!298 = !DILocation(line: 84, column: 5, scope: !281)
!299 = !DILocation(line: 84, column: 28, scope: !300)
!300 = distinct !DILexicalBlock(scope: !281, file: !1, line: 84, column: 5)
!301 = distinct !{!301, !298, !302}
!302 = !DILocation(line: 89, column: 5, scope: !281)
!303 = !DILocation(line: 85, column: 12, scope: !304)
!304 = distinct !DILexicalBlock(scope: !305, file: !1, line: 85, column: 12)
!305 = distinct !DILexicalBlock(scope: !300, file: !1, line: 84, column: 42)
!306 = !DILocation(line: 85, column: 17, scope: !304)
!307 = !DILocation(line: 85, column: 12, scope: !305)
!308 = !DILocation(line: 93, column: 13, scope: !283)
!309 = !DILocation(line: 93, column: 24, scope: !286)
!310 = !DILocation(line: 93, column: 5, scope: !283)
!311 = !DILocation(line: 98, column: 13, scope: !288)
!312 = !DILocation(line: 98, column: 19, scope: !313)
!313 = distinct !DILexicalBlock(scope: !288, file: !1, line: 98, column: 5)
!314 = !DILocation(line: 98, column: 5, scope: !288)
!315 = !DILocation(line: 94, column: 18, scope: !285)
!316 = !DILocation(line: 95, column: 16, scope: !285)
!317 = !DILocation(line: 95, column: 23, scope: !285)
!318 = !DILocation(line: 95, column: 21, scope: !285)
!319 = !DILocation(line: 95, column: 14, scope: !285)
!320 = !DILocation(line: 96, column: 14, scope: !285)
!321 = !DILocation(line: 93, column: 32, scope: !286)
!322 = distinct !{!322, !310, !323}
!323 = !DILocation(line: 97, column: 5, scope: !283)
!324 = !DILocation(line: 99, column: 17, scope: !325)
!325 = distinct !DILexicalBlock(scope: !313, file: !1, line: 98, column: 30)
!326 = !DILocation(line: 99, column: 16, scope: !325)
!327 = !DILocation(line: 100, column: 21, scope: !325)
!328 = !DILocation(line: 100, column: 16, scope: !325)
!329 = !DILocation(line: 100, column: 14, scope: !325)
!330 = !DILocation(line: 98, column: 27, scope: !313)
!331 = distinct !{!331, !314, !332}
!332 = !DILocation(line: 101, column: 5, scope: !288)
!333 = !DILocation(line: 103, column: 1, scope: !269)
!334 = distinct !DISubprogram(name: "polymul", scope: !1, file: !1, line: 105, type: !224, isLocal: false, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !335)
!335 = !{!336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !347, !349, !353}
!336 = !DILocalVariable(name: "x", arg: 1, scope: !334, file: !1, line: 105, type: !12)
!337 = !DILocalVariable(name: "x_size", arg: 2, scope: !334, file: !1, line: 105, type: !10)
!338 = !DILocalVariable(name: "y", arg: 3, scope: !334, file: !1, line: 105, type: !12)
!339 = !DILocalVariable(name: "y_size", arg: 4, scope: !334, file: !1, line: 105, type: !10)
!340 = !DILocalVariable(name: "mod", arg: 5, scope: !334, file: !1, line: 106, type: !10)
!341 = !DILocalVariable(name: "polymod", arg: 6, scope: !334, file: !1, line: 106, type: !12)
!342 = !DILocalVariable(name: "mod_size", arg: 7, scope: !334, file: !1, line: 106, type: !10)
!343 = !DILocalVariable(name: "new_degree", scope: !334, file: !1, line: 109, type: !10)
!344 = !DILocalVariable(name: "result_coeffs", scope: !334, file: !1, line: 111, type: !12)
!345 = !DILocalVariable(name: "i", scope: !346, file: !1, line: 112, type: !10)
!346 = distinct !DILexicalBlock(scope: !334, file: !1, line: 112, column: 5)
!347 = !DILocalVariable(name: "i", scope: !348, file: !1, line: 115, type: !10)
!348 = distinct !DILexicalBlock(scope: !334, file: !1, line: 115, column: 11)
!349 = !DILocalVariable(name: "j", scope: !350, file: !1, line: 116, type: !10)
!350 = distinct !DILexicalBlock(scope: !351, file: !1, line: 116, column: 15)
!351 = distinct !DILexicalBlock(scope: !352, file: !1, line: 115, column: 39)
!352 = distinct !DILexicalBlock(scope: !348, file: !1, line: 115, column: 11)
!353 = !DILocalVariable(name: "result", scope: !334, file: !1, line: 121, type: !12)
!354 = !DILocation(line: 105, column: 19, scope: !334)
!355 = !DILocation(line: 105, column: 26, scope: !334)
!356 = !DILocation(line: 105, column: 39, scope: !334)
!357 = !DILocation(line: 105, column: 46, scope: !334)
!358 = !DILocation(line: 106, column: 18, scope: !334)
!359 = !DILocation(line: 106, column: 28, scope: !334)
!360 = !DILocation(line: 106, column: 41, scope: !334)
!361 = !DILocation(line: 108, column: 5, scope: !362)
!362 = distinct !DILexicalBlock(scope: !363, file: !1, line: 108, column: 5)
!363 = distinct !DILexicalBlock(scope: !334, file: !1, line: 108, column: 5)
!364 = !DILocation(line: 109, column: 29, scope: !334)
!365 = !DILocation(line: 109, column: 9, scope: !334)
!366 = !DILocation(line: 111, column: 51, scope: !334)
!367 = !DILocation(line: 111, column: 40, scope: !334)
!368 = !DILocation(line: 111, column: 54, scope: !334)
!369 = !DILocation(line: 111, column: 33, scope: !334)
!370 = !DILocation(line: 111, column: 26, scope: !334)
!371 = !DILocation(line: 111, column: 10, scope: !334)
!372 = !DILocation(line: 112, column: 13, scope: !346)
!373 = !DILocation(line: 112, column: 19, scope: !374)
!374 = distinct !DILexicalBlock(scope: !346, file: !1, line: 112, column: 5)
!375 = !DILocation(line: 112, column: 5, scope: !346)
!376 = !DILocation(line: 115, column: 19, scope: !348)
!377 = !DILocation(line: 115, column: 25, scope: !352)
!378 = !DILocation(line: 115, column: 11, scope: !348)
!379 = !DILocation(line: 113, column: 9, scope: !380)
!380 = distinct !DILexicalBlock(scope: !374, file: !1, line: 112, column: 37)
!381 = !DILocation(line: 113, column: 26, scope: !380)
!382 = !DILocation(line: 112, column: 34, scope: !374)
!383 = distinct !{!383, !375, !384}
!384 = !DILocation(line: 114, column: 5, scope: !346)
!385 = !DILocation(line: 121, column: 19, scope: !334)
!386 = !DILocation(line: 121, column: 10, scope: !334)
!387 = !DILocation(line: 123, column: 5, scope: !334)
!388 = !DILocation(line: 116, column: 23, scope: !350)
!389 = !DILocation(line: 116, column: 15, scope: !350)
!390 = !DILocation(line: 115, column: 36, scope: !352)
!391 = distinct !{!391, !378, !392}
!392 = !DILocation(line: 120, column: 5, scope: !348)
!393 = !DILocation(line: 117, column: 42, scope: !394)
!394 = distinct !DILexicalBlock(scope: !395, file: !1, line: 116, column: 43)
!395 = distinct !DILexicalBlock(scope: !350, file: !1, line: 116, column: 15)
!396 = !DILocation(line: 117, column: 40, scope: !394)
!397 = !DILocation(line: 117, column: 28, scope: !394)
!398 = !DILocation(line: 117, column: 13, scope: !394)
!399 = !DILocation(line: 117, column: 32, scope: !394)
!400 = !DILocation(line: 118, column: 53, scope: !394)
!401 = !DILocation(line: 118, column: 32, scope: !394)
!402 = !DILocation(line: 116, column: 40, scope: !395)
!403 = !DILocation(line: 116, column: 29, scope: !395)
!404 = distinct !{!404, !389, !405}
!405 = !DILocation(line: 119, column: 9, scope: !350)
