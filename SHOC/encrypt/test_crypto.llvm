; ModuleID = 'test_crypto.c'
source_filename = "test_crypto.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [25 x i8] c"Testing encyrpt/decrypt\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"Initial Value: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Test: Encryption/Decryption\0A\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"Encrypt/Decrypt failed\0A result: %d\0A expected: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Encrypt/Decrypt test passed!\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"Test: adding %d to ciphertext\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"Add test failed!\0A result: %d\0A expected: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"Plaintext Addition test passed!\0A\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"Test: multiplying %d to ciphertext of %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"Mul test failed!\0A result: %d\0A expected: %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"Plaintext Multiplication test passed!\0A\00", align 1
@.str.11 = private unnamed_addr constant [48 x i8] c"Test: adding %d to %d where both are encrypted\0A\00", align 1
@.str.12 = private unnamed_addr constant [51 x i8] c"Crypto Add test failed!\0A result: %d\0A expected: %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c"Cryptographic Addition test passed!\0A\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"Operation finished fully\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) local_unnamed_addr #0 !dbg !10 {
  call void @llvm.dbg.value(metadata i32 %argc, metadata !17, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i8** %argv, metadata !18, metadata !DIExpression()), !dbg !45
  %call = tail call i64 @time(i64* null) #5, !dbg !46
  %conv = trunc i64 %call to i32, !dbg !46
  tail call void @srand(i32 %conv) #5, !dbg !47
  %call1 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0)) #5, !dbg !48
  call void @llvm.dbg.value(metadata i32 16, metadata !19, metadata !DIExpression()), !dbg !49
  call void @llvm.dbg.value(metadata i32 32768, metadata !20, metadata !DIExpression()), !dbg !50
  call void @llvm.dbg.value(metadata i32 256, metadata !21, metadata !DIExpression()), !dbg !51
  %call3 = tail call noalias i8* @malloc(i64 68) #5, !dbg !52
  %1 = bitcast i8* %call3 to i32*, !dbg !53
  call void @llvm.dbg.value(metadata i32* %1, metadata !22, metadata !DIExpression()), !dbg !54
  store i32 1, i32* %1, align 4, !dbg !55, !tbaa !56
  %arrayidx4 = getelementptr inbounds i8, i8* %call3, i64 64, !dbg !60
  %2 = bitcast i8* %arrayidx4 to i32*, !dbg !60
  store i32 1, i32* %2, align 4, !dbg !61, !tbaa !56
  call void @llvm.dbg.value(metadata i32 1, metadata !23, metadata !DIExpression()), !dbg !62
  br label %4, !dbg !63

; <label>:3:                                      ; preds = %4
  %call8 = tail call i32* @keygen_secret(i32 16) #5, !dbg !64
  call void @llvm.dbg.value(metadata i32* %call8, metadata !25, metadata !DIExpression()), !dbg !65
  %call9 = tail call i32* @keygen_pub1(i32 16, i32 32768) #5, !dbg !66
  call void @llvm.dbg.value(metadata i32* %call9, metadata !26, metadata !DIExpression()), !dbg !67
  %call10 = tail call i32* @copy_poly(i32* %call9, i32 16) #5, !dbg !68
  call void @llvm.dbg.value(metadata i32* %call10, metadata !27, metadata !DIExpression()), !dbg !69
  %call11 = tail call i32* @keygen_pub0(i32* %call10, i32 16, i32 32768, i32* %call8, i32* nonnull %1) #5, !dbg !70
  call void @llvm.dbg.value(metadata i32* %call11, metadata !28, metadata !DIExpression()), !dbg !71
  %cmp12 = icmp sgt i32 %argc, 1, !dbg !72
  br i1 %cmp12, label %5, label %7, !dbg !73

; <label>:4:                                      ; preds = %4, %0
  %indvars.iv = phi i64 [ 1, %0 ], [ %indvars.iv.next, %4 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !23, metadata !DIExpression()), !dbg !62
  %arrayidx7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !74
  store i32 0, i32* %arrayidx7, align 4, !dbg !76, !tbaa !56
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !77
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !78
  br i1 %exitcond, label %3, label %4, !dbg !63, !llvm.loop !79

; <label>:5:                                      ; preds = %3
  %arrayidx14 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !81
  %6 = load i8*, i8** %arrayidx14, align 8, !dbg !81, !tbaa !82
  %call15 = tail call i32 @atoi(i8* %6) #6, !dbg !84
  br label %7, !dbg !73

; <label>:7:                                      ; preds = %3, %5
  %cond = phi i32 [ %call15, %5 ], [ 13, %3 ], !dbg !73
  call void @llvm.dbg.value(metadata i32 %cond, metadata !29, metadata !DIExpression()), !dbg !85
  %call16 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 %cond) #5, !dbg !86
  %call17 = tail call i32** @encrypt(i32* %call11, i32* %call9, i32 16, i32 32768, i32 256, i32* nonnull %1, i32 %cond) #5, !dbg !87
  call void @llvm.dbg.value(metadata i32** %call17, metadata !30, metadata !DIExpression()), !dbg !88
  %8 = load i32*, i32** %call17, align 8, !dbg !89, !tbaa !82
  %call19 = tail call i32* @copy_poly(i32* %8, i32 16) #5, !dbg !90
  call void @llvm.dbg.value(metadata i32* %call19, metadata !32, metadata !DIExpression()), !dbg !91
  %arrayidx20 = getelementptr inbounds i32*, i32** %call17, i64 1, !dbg !92
  %9 = load i32*, i32** %arrayidx20, align 8, !dbg !92, !tbaa !82
  %call21 = tail call i32* @copy_poly(i32* %9, i32 16) #5, !dbg !93
  call void @llvm.dbg.value(metadata i32* %call21, metadata !33, metadata !DIExpression()), !dbg !94
  %call22 = tail call i32 @decrypt(i32* %call8, i32 16, i32 32768, i32 256, i32* nonnull %1, i32* %call19, i32* %call21) #5, !dbg !95
  call void @llvm.dbg.value(metadata i32 %call22, metadata !34, metadata !DIExpression()), !dbg !96
  %call23 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0)) #5, !dbg !97
  %cmp24 = icmp eq i32 %call22, %cond, !dbg !98
  br i1 %cmp24, label %11, label %10, !dbg !100

; <label>:10:                                     ; preds = %7
  %call26 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0), i32 %call22, i32 %cond) #5, !dbg !101
  br label %12, !dbg !103

; <label>:11:                                     ; preds = %7
  %call27 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #5, !dbg !104
  br label %12

; <label>:12:                                     ; preds = %11, %10
  %cmp28 = icmp sgt i32 %argc, 2, !dbg !105
  br i1 %cmp28, label %13, label %15, !dbg !106

; <label>:13:                                     ; preds = %12
  %arrayidx30 = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !107
  %14 = load i8*, i8** %arrayidx30, align 8, !dbg !107, !tbaa !82
  %call31 = tail call i32 @atoi(i8* %14) #6, !dbg !108
  br label %15, !dbg !106

; <label>:15:                                     ; preds = %12, %13
  %cond32 = phi i32 [ %call31, %13 ], [ 12, %12 ], !dbg !106
  call void @llvm.dbg.value(metadata i32 %cond32, metadata !35, metadata !DIExpression()), !dbg !109
  %call33 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0), i32 %cond32) #5, !dbg !110
  %16 = load i32*, i32** %call17, align 8, !dbg !111, !tbaa !82
  %call35 = tail call i32* @copy_poly(i32* %16, i32 16) #5, !dbg !112
  call void @llvm.dbg.value(metadata i32* %call35, metadata !32, metadata !DIExpression()), !dbg !91
  %17 = load i32*, i32** %arrayidx20, align 8, !dbg !113, !tbaa !82
  %call37 = tail call i32* @copy_poly(i32* %17, i32 16) #5, !dbg !114
  call void @llvm.dbg.value(metadata i32* %call37, metadata !33, metadata !DIExpression()), !dbg !94
  %call38 = tail call i32* @plain_add(i32* %call35, i32 16, i32 %cond32, i32 32768, i32 256, i32* nonnull %1) #5, !dbg !115
  call void @llvm.dbg.value(metadata i32* %call38, metadata !36, metadata !DIExpression()), !dbg !116
  %call39 = tail call i32 @decrypt(i32* %call8, i32 16, i32 32768, i32 256, i32* nonnull %1, i32* %call38, i32* %call37) #5, !dbg !117
  call void @llvm.dbg.value(metadata i32 %call39, metadata !37, metadata !DIExpression()), !dbg !118
  %add40 = add nsw i32 %cond32, %cond, !dbg !119
  %rem = srem i32 %add40, 256, !dbg !121
  %cmp41 = icmp eq i32 %call39, %rem, !dbg !122
  br i1 %cmp41, label %19, label %18, !dbg !123

; <label>:18:                                     ; preds = %15
  %call45 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0), i32 %call39, i32 %rem) #5, !dbg !124
  br label %20, !dbg !126

; <label>:19:                                     ; preds = %15
  %call46 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0)) #5, !dbg !127
  br label %20

; <label>:20:                                     ; preds = %19, %18
  %cmp47 = icmp sgt i32 %argc, 3, !dbg !128
  br i1 %cmp47, label %21, label %23, !dbg !129

; <label>:21:                                     ; preds = %20
  %arrayidx49 = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !130
  %22 = load i8*, i8** %arrayidx49, align 8, !dbg !130, !tbaa !82
  %call50 = tail call i32 @atoi(i8* %22) #6, !dbg !131
  br label %23, !dbg !129

; <label>:23:                                     ; preds = %20, %21
  %cond51 = phi i32 [ %call50, %21 ], [ 4, %20 ], !dbg !129
  call void @llvm.dbg.value(metadata i32 %cond51, metadata !38, metadata !DIExpression()), !dbg !132
  %24 = load i32*, i32** %call17, align 8, !dbg !133, !tbaa !82
  %call53 = tail call i32* @copy_poly(i32* %24, i32 16) #5, !dbg !134
  call void @llvm.dbg.value(metadata i32* %call53, metadata !32, metadata !DIExpression()), !dbg !91
  %call54 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0), i32 %cond51, i32 %cond) #5, !dbg !135
  %call55 = tail call i32** @plain_mul(i32* %call53, i32* %call37, i32 16, i32 %cond51, i32 32768, i32 256, i32* nonnull %1) #5, !dbg !136
  call void @llvm.dbg.value(metadata i32** %call55, metadata !39, metadata !DIExpression()), !dbg !137
  %25 = load i32*, i32** %call55, align 8, !dbg !138, !tbaa !82
  %arrayidx57 = getelementptr inbounds i32*, i32** %call55, i64 1, !dbg !139
  %26 = load i32*, i32** %arrayidx57, align 8, !dbg !139, !tbaa !82
  %call58 = tail call i32 @decrypt(i32* %call8, i32 16, i32 32768, i32 256, i32* nonnull %1, i32* %25, i32* %26) #5, !dbg !140
  call void @llvm.dbg.value(metadata i32 %call58, metadata !40, metadata !DIExpression()), !dbg !141
  %mul59 = mul nsw i32 %cond51, %cond, !dbg !142
  %rem60 = srem i32 %mul59, 255, !dbg !144
  %cmp61 = icmp eq i32 %call58, %rem60, !dbg !145
  br i1 %cmp61, label %28, label %27, !dbg !146

; <label>:27:                                     ; preds = %23
  %call66 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i32 %call58, i32 %rem60) #5, !dbg !147
  br label %29, !dbg !149

; <label>:28:                                     ; preds = %23
  %call67 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0)) #5, !dbg !150
  br label %29

; <label>:29:                                     ; preds = %28, %27
  %call68 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11, i64 0, i64 0), i32 %cond, i32 %cond32) #5, !dbg !151
  %call69 = tail call i32** @encrypt(i32* %call11, i32* %call9, i32 16, i32 32768, i32 256, i32* nonnull %1, i32 %cond32) #5, !dbg !152
  call void @llvm.dbg.value(metadata i32** %call69, metadata !41, metadata !DIExpression()), !dbg !153
  %call70 = tail call i32** @crypto_add(i32** nonnull %call17, i32** %call69, i32 16, i32 32768, i32* nonnull %1) #5, !dbg !154
  call void @llvm.dbg.value(metadata i32** %call70, metadata !42, metadata !DIExpression()), !dbg !155
  %30 = load i32*, i32** %call70, align 8, !dbg !156, !tbaa !82
  %arrayidx72 = getelementptr inbounds i32*, i32** %call70, i64 1, !dbg !157
  %31 = load i32*, i32** %arrayidx72, align 8, !dbg !157, !tbaa !82
  %call73 = tail call i32 @decrypt(i32* %call8, i32 16, i32 32768, i32 256, i32* nonnull %1, i32* %30, i32* %31) #5, !dbg !158
  call void @llvm.dbg.value(metadata i32 %call73, metadata !43, metadata !DIExpression()), !dbg !159
  %cmp76 = icmp eq i32 %call73, %rem, !dbg !160
  br i1 %cmp76, label %33, label %32, !dbg !162

; <label>:32:                                     ; preds = %29
  %call80 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.12, i64 0, i64 0), i32 %call73, i32 %rem) #5, !dbg !163
  br label %34, !dbg !165

; <label>:33:                                     ; preds = %29
  %call81 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0)) #5, !dbg !166
  br label %34

; <label>:34:                                     ; preds = %33, %32
  %call82 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0)) #5, !dbg !167
  ret i32 0, !dbg !168
}

; Function Attrs: nounwind
declare void @srand(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #1

declare i32 @printf(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

declare i32* @keygen_secret(i32) local_unnamed_addr #2

declare i32* @keygen_pub1(i32, i32) local_unnamed_addr #2

declare i32* @copy_poly(i32*, i32) local_unnamed_addr #2

declare i32* @keygen_pub0(i32*, i32, i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) local_unnamed_addr #3

declare i32** @encrypt(i32*, i32*, i32, i32, i32, i32*, i32) local_unnamed_addr #2

declare i32 @decrypt(i32*, i32, i32, i32, i32*, i32*, i32*) local_unnamed_addr #2

declare i32* @plain_add(i32*, i32, i32, i32, i32, i32*) local_unnamed_addr #2

declare i32** @plain_mul(i32*, i32*, i32, i32, i32, i32, i32*) local_unnamed_addr #2

declare i32** @crypto_add(i32**, i32**, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind }
attributes #6 = { nobuiltin nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 6.0.0 (tags/RELEASE_600/final)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "test_crypto.c", directory: "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !{i32 2, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
!10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 6, type: !11, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !16)
!11 = !DISubroutineType(types: !12)
!12 = !{!5, !5, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !25, !26, !27, !28, !29, !30, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43}
!17 = !DILocalVariable(name: "argc", arg: 1, scope: !10, file: !1, line: 6, type: !5)
!18 = !DILocalVariable(name: "argv", arg: 2, scope: !10, file: !1, line: 6, type: !13)
!19 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 11, type: !5)
!20 = !DILocalVariable(name: "q", scope: !10, file: !1, line: 12, type: !5)
!21 = !DILocalVariable(name: "t", scope: !10, file: !1, line: 13, type: !5)
!22 = !DILocalVariable(name: "polymod", scope: !10, file: !1, line: 14, type: !4)
!23 = !DILocalVariable(name: "i", scope: !24, file: !1, line: 16, type: !5)
!24 = distinct !DILexicalBlock(scope: !10, file: !1, line: 16, column: 5)
!25 = !DILocalVariable(name: "secretKey", scope: !10, file: !1, line: 17, type: !4)
!26 = !DILocalVariable(name: "pub1", scope: !10, file: !1, line: 18, type: !4)
!27 = !DILocalVariable(name: "tmp", scope: !10, file: !1, line: 19, type: !4)
!28 = !DILocalVariable(name: "pub0", scope: !10, file: !1, line: 20, type: !4)
!29 = !DILocalVariable(name: "value", scope: !10, file: !1, line: 21, type: !5)
!30 = !DILocalVariable(name: "ciphertext", scope: !10, file: !1, line: 24, type: !31)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!32 = !DILocalVariable(name: "cipher0", scope: !10, file: !1, line: 25, type: !4)
!33 = !DILocalVariable(name: "cipher1", scope: !10, file: !1, line: 26, type: !4)
!34 = !DILocalVariable(name: "result", scope: !10, file: !1, line: 27, type: !5)
!35 = !DILocalVariable(name: "add_val", scope: !10, file: !1, line: 36, type: !5)
!36 = !DILocalVariable(name: "add_c0", scope: !10, file: !1, line: 39, type: !4)
!37 = !DILocalVariable(name: "add_result", scope: !10, file: !1, line: 40, type: !5)
!38 = !DILocalVariable(name: "mul_val", scope: !10, file: !1, line: 48, type: !5)
!39 = !DILocalVariable(name: "mul_ciphertext", scope: !10, file: !1, line: 51, type: !31)
!40 = !DILocalVariable(name: "mul_result", scope: !10, file: !1, line: 52, type: !5)
!41 = !DILocalVariable(name: "ct2", scope: !10, file: !1, line: 62, type: !31)
!42 = !DILocalVariable(name: "add_ct", scope: !10, file: !1, line: 63, type: !31)
!43 = !DILocalVariable(name: "enc_add_result", scope: !10, file: !1, line: 64, type: !5)
!44 = !DILocation(line: 6, column: 14, scope: !10)
!45 = !DILocation(line: 6, column: 26, scope: !10)
!46 = !DILocation(line: 8, column: 11, scope: !10)
!47 = !DILocation(line: 8, column: 5, scope: !10)
!48 = !DILocation(line: 10, column: 5, scope: !10)
!49 = !DILocation(line: 11, column: 9, scope: !10)
!50 = !DILocation(line: 12, column: 9, scope: !10)
!51 = !DILocation(line: 13, column: 9, scope: !10)
!52 = !DILocation(line: 14, column: 27, scope: !10)
!53 = !DILocation(line: 14, column: 20, scope: !10)
!54 = !DILocation(line: 14, column: 10, scope: !10)
!55 = !DILocation(line: 15, column: 16, scope: !10)
!56 = !{!57, !57, i64 0}
!57 = !{!"int", !58, i64 0}
!58 = !{!"omnipotent char", !59, i64 0}
!59 = !{!"Simple C/C++ TBAA"}
!60 = !DILocation(line: 15, column: 21, scope: !10)
!61 = !DILocation(line: 15, column: 32, scope: !10)
!62 = !DILocation(line: 16, column: 13, scope: !24)
!63 = !DILocation(line: 16, column: 5, scope: !24)
!64 = !DILocation(line: 17, column: 22, scope: !10)
!65 = !DILocation(line: 17, column: 10, scope: !10)
!66 = !DILocation(line: 18, column: 17, scope: !10)
!67 = !DILocation(line: 18, column: 10, scope: !10)
!68 = !DILocation(line: 19, column: 16, scope: !10)
!69 = !DILocation(line: 19, column: 10, scope: !10)
!70 = !DILocation(line: 20, column: 17, scope: !10)
!71 = !DILocation(line: 20, column: 10, scope: !10)
!72 = !DILocation(line: 21, column: 22, scope: !10)
!73 = !DILocation(line: 21, column: 17, scope: !10)
!74 = !DILocation(line: 16, column: 28, scope: !75)
!75 = distinct !DILexicalBlock(scope: !24, file: !1, line: 16, column: 5)
!76 = !DILocation(line: 16, column: 39, scope: !75)
!77 = !DILocation(line: 16, column: 24, scope: !75)
!78 = !DILocation(line: 16, column: 19, scope: !75)
!79 = distinct !{!79, !63, !80}
!80 = !DILocation(line: 16, column: 41, scope: !24)
!81 = !DILocation(line: 21, column: 33, scope: !10)
!82 = !{!83, !83, i64 0}
!83 = !{!"any pointer", !58, i64 0}
!84 = !DILocation(line: 21, column: 28, scope: !10)
!85 = !DILocation(line: 21, column: 9, scope: !10)
!86 = !DILocation(line: 22, column: 5, scope: !10)
!87 = !DILocation(line: 24, column: 24, scope: !10)
!88 = !DILocation(line: 24, column: 11, scope: !10)
!89 = !DILocation(line: 25, column: 30, scope: !10)
!90 = !DILocation(line: 25, column: 20, scope: !10)
!91 = !DILocation(line: 25, column: 10, scope: !10)
!92 = !DILocation(line: 26, column: 30, scope: !10)
!93 = !DILocation(line: 26, column: 20, scope: !10)
!94 = !DILocation(line: 26, column: 10, scope: !10)
!95 = !DILocation(line: 27, column: 18, scope: !10)
!96 = !DILocation(line: 27, column: 9, scope: !10)
!97 = !DILocation(line: 28, column: 5, scope: !10)
!98 = !DILocation(line: 29, column: 15, scope: !99)
!99 = distinct !DILexicalBlock(scope: !10, file: !1, line: 29, column: 8)
!100 = !DILocation(line: 29, column: 8, scope: !10)
!101 = !DILocation(line: 30, column: 9, scope: !102)
!102 = distinct !DILexicalBlock(scope: !99, file: !1, line: 29, column: 24)
!103 = !DILocation(line: 32, column: 5, scope: !102)
!104 = !DILocation(line: 33, column: 10, scope: !99)
!105 = !DILocation(line: 36, column: 24, scope: !10)
!106 = !DILocation(line: 36, column: 19, scope: !10)
!107 = !DILocation(line: 36, column: 35, scope: !10)
!108 = !DILocation(line: 36, column: 30, scope: !10)
!109 = !DILocation(line: 36, column: 9, scope: !10)
!110 = !DILocation(line: 37, column: 5, scope: !10)
!111 = !DILocation(line: 38, column: 25, scope: !10)
!112 = !DILocation(line: 38, column: 15, scope: !10)
!113 = !DILocation(line: 38, column: 64, scope: !10)
!114 = !DILocation(line: 38, column: 54, scope: !10)
!115 = !DILocation(line: 39, column: 19, scope: !10)
!116 = !DILocation(line: 39, column: 10, scope: !10)
!117 = !DILocation(line: 40, column: 22, scope: !10)
!118 = !DILocation(line: 40, column: 9, scope: !10)
!119 = !DILocation(line: 41, column: 31, scope: !120)
!120 = distinct !DILexicalBlock(scope: !10, file: !1, line: 41, column: 8)
!121 = !DILocation(line: 41, column: 39, scope: !120)
!122 = !DILocation(line: 41, column: 19, scope: !120)
!123 = !DILocation(line: 41, column: 8, scope: !10)
!124 = !DILocation(line: 42, column: 9, scope: !125)
!125 = distinct !DILexicalBlock(scope: !120, file: !1, line: 41, column: 42)
!126 = !DILocation(line: 44, column: 5, scope: !125)
!127 = !DILocation(line: 45, column: 10, scope: !120)
!128 = !DILocation(line: 48, column: 24, scope: !10)
!129 = !DILocation(line: 48, column: 19, scope: !10)
!130 = !DILocation(line: 48, column: 35, scope: !10)
!131 = !DILocation(line: 48, column: 30, scope: !10)
!132 = !DILocation(line: 48, column: 9, scope: !10)
!133 = !DILocation(line: 49, column: 25, scope: !10)
!134 = !DILocation(line: 49, column: 15, scope: !10)
!135 = !DILocation(line: 50, column: 5, scope: !10)
!136 = !DILocation(line: 51, column: 28, scope: !10)
!137 = !DILocation(line: 51, column: 11, scope: !10)
!138 = !DILocation(line: 53, column: 30, scope: !10)
!139 = !DILocation(line: 53, column: 49, scope: !10)
!140 = !DILocation(line: 52, column: 22, scope: !10)
!141 = !DILocation(line: 52, column: 9, scope: !10)
!142 = !DILocation(line: 54, column: 30, scope: !143)
!143 = distinct !DILexicalBlock(scope: !10, file: !1, line: 54, column: 8)
!144 = !DILocation(line: 54, column: 37, scope: !143)
!145 = !DILocation(line: 54, column: 19, scope: !143)
!146 = !DILocation(line: 54, column: 8, scope: !10)
!147 = !DILocation(line: 55, column: 9, scope: !148)
!148 = distinct !DILexicalBlock(scope: !143, file: !1, line: 54, column: 44)
!149 = !DILocation(line: 57, column: 5, scope: !148)
!150 = !DILocation(line: 58, column: 10, scope: !143)
!151 = !DILocation(line: 61, column: 5, scope: !10)
!152 = !DILocation(line: 62, column: 17, scope: !10)
!153 = !DILocation(line: 62, column: 11, scope: !10)
!154 = !DILocation(line: 63, column: 20, scope: !10)
!155 = !DILocation(line: 63, column: 11, scope: !10)
!156 = !DILocation(line: 65, column: 34, scope: !10)
!157 = !DILocation(line: 65, column: 45, scope: !10)
!158 = !DILocation(line: 64, column: 26, scope: !10)
!159 = !DILocation(line: 64, column: 9, scope: !10)
!160 = !DILocation(line: 66, column: 23, scope: !161)
!161 = distinct !DILexicalBlock(scope: !10, file: !1, line: 66, column: 8)
!162 = !DILocation(line: 66, column: 8, scope: !10)
!163 = !DILocation(line: 67, column: 9, scope: !164)
!164 = distinct !DILexicalBlock(scope: !161, file: !1, line: 66, column: 46)
!165 = !DILocation(line: 69, column: 5, scope: !164)
!166 = !DILocation(line: 70, column: 10, scope: !161)
!167 = !DILocation(line: 73, column: 5, scope: !10)
!168 = !DILocation(line: 74, column: 5, scope: !10)
