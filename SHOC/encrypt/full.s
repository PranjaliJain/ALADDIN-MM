	.text
	.file	"llvm-link"
	.file	1 "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt/./poly.h"
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
.Lfunc_begin0:
	.file	2 "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt/test_crypto.c"
	.loc	2 6 0                   # test_crypto.c:6:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
.Ltmp0:
	.loc	2 6 14 prologue_end     # test_crypto.c:6:14
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3368, %rsp             # imm = 0xD28
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, -44(%rbp)         # 4-byte Spill
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	callq	trace_logger_init
	movabsq	$.L.str.177, %rdi
	movl	$36, %eax
	movl	%eax, %esi
	callq	trace_logger_register_labelmap
	movl	$8, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.17, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	.loc	2 8 11                  # test_crypto.c:8:11
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$time, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movq	-80(%rbp), %r9          # 8-byte Reload
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	time
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	trace_logger_log_int
	movl	$8, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$36, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.17, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.21, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	%edx, %r11d
	.loc	2 8 5 is_stmt 0         # test_crypto.c:8:5
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r11d, -116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$8, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.22, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$srand, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.23, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.21, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movl	-116(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	-116(%rbp), %edi        # 4-byte Reload
	callq	srand
	movl	$10, %edi
                                        # kill: def %rdi killed %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.24, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	.loc	2 10 5 is_stmt 1        # test_crypto.c:10:5
	movl	$1, (%rsp)
	movl	%r11d, -132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$printf, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.26, %rdx
	xorl	%r11d, %r11d
	movl	%r11d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.24, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 11 9                  # test_crypto.c:11:9
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$14, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.27, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp1:
	#DEBUG_VALUE: main:n <- 16
	#DEBUG_VALUE: main:q <- 32768
	#DEBUG_VALUE: main:t <- 256
	.loc	2 14 27                 # test_crypto.c:14:27
	movl	$1, (%rsp)
	movl	%eax, -156(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$68, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r9, -176(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-176(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%rsp)
	callq	trace_logger_log_int
	movl	$68, %eax
	movl	%eax, %edi
	callq	malloc
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 14 20 is_stmt 0       # test_crypto.c:14:20
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-184(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$14, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$47, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.27, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-192(%rbp), %rdx        # 8-byte Reload
	.loc	2 14 10                 # test_crypto.c:14:10
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$15, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.30, %rcx
	movl	$31, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp2:
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	.loc	2 15 16 is_stmt 1       # test_crypto.c:15:16
	movl	$1, (%rsp)
	movl	%r11d, -220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.31, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	%rax, %rdx
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$15, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	.loc	2 15 21 is_stmt 0       # test_crypto.c:15:21
	movl	$1, (%rsp)
	movl	%r11d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rax, %rsi
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.27, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-192(%rbp), %rdx        # 8-byte Reload
	addq	$64, %rdx
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$15, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.33, %rcx
	movl	$47, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -276(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-272(%rbp), %rdx        # 8-byte Reload
	.loc	2 15 32                 # test_crypto.c:15:32
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$15, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$31, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.31, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	%rax, %rdx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.16, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$2, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	$1, 64(%rax)
.Ltmp3:
	#DEBUG_VALUE: i <- 1
	.loc	2 16 5 is_stmt 1        # test_crypto.c:16:5
	movl	$1, (%rsp)
	movl	%r11d, -316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.36, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-336(%rbp), %r9         # 8-byte Reload
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	jmp	.LBB0_2
.Ltmp4:
.LBB0_1:
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 5 is_stmt 0         # test_crypto.c:0:5
	movl	$17, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.37, %rdx
	movabsq	$.L.str.38, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 17 22 is_stmt 1       # test_crypto.c:17:22
	movl	$1, (%rsp)
	movl	%eax, -348(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$keygen_secret, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movabsq	$.L.str.40, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdi
	movq	%rdi, -360(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %edi
	callq	keygen_secret
	movl	$19134, %edi            # imm = 0x4ABE
                                        # kill: def %rdi killed %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 17 10 is_stmt 0       # test_crypto.c:17:10
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-368(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$18, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.37, %rdx
	movabsq	$.L.str.41, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp5:
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	.loc	2 18 17 is_stmt 1       # test_crypto.c:18:17
	movl	$1, (%rsp)
	movl	%r11d, -380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$keygen_pub1, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.42, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$16, %r11d
	movl	%r11d, %edx
	movabsq	$.L.str.40, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$32768, %r11d           # imm = 0x8000
	movl	%r11d, %edx
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %edi
	movl	$32768, %esi            # imm = 0x8000
	callq	keygen_pub1
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.41, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 18 10 is_stmt 0       # test_crypto.c:18:10
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-400(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$19, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.37, %rdx
	movabsq	$.L.str.44, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp6:
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	.loc	2 19 16 is_stmt 1       # test_crypto.c:19:16
	movl	$1, (%rsp)
	movl	%r11d, -412(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$copy_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.41, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-408(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$16, %r11d
	movl	%r11d, %edx
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %esi
	movq	-408(%rbp), %rdi        # 8-byte Reload
	callq	copy_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.44, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 19 10 is_stmt 0       # test_crypto.c:19:10
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$20, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.37, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp7:
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	.loc	2 20 17 is_stmt 1       # test_crypto.c:20:17
	movl	$1, (%rsp)
	movl	%r11d, -444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$keygen_pub0, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.44, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$16, %r11d
	movl	%r11d, %edx
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$32768, %r11d           # imm = 0x8000
	movl	%r11d, %edx
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %esi
	movl	$32768, %edx            # imm = 0x8000
	movq	-440(%rbp), %rdi        # 8-byte Reload
	movq	-376(%rbp), %rcx        # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	callq	keygen_pub0
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$64, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 20 10 is_stmt 0       # test_crypto.c:20:10
	movq	%rax, %rdx
	movq	%r10, (%rsp)
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$21, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.37, %rdx
	movabsq	$.L.str.48, %rcx
	movl	$51, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp8:
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	.loc	2 21 22 is_stmt 1       # test_crypto.c:21:22
	movl	$1, (%rsp)
	movl	%r11d, -468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.49, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$1, %r11d
	movl	%r11d, %eax
	movabsq	$.L.str.48, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movl	-44(%rbp), %r11d        # 4-byte Reload
	cmpl	$1, %r11d
	setg	%r14b
	.loc	2 21 17 is_stmt 0       # test_crypto.c:21:17
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %edx
	movq	%rax, %rsi
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -497(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$21, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.37, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$2, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.51, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rax, %rsi
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r11d
	movl	%r11d, %edi
	xorl	%r11d, %r11d
	movl	%r11d, %eax
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.52, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rax, %rsi
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movabsq	$.L.str.48, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.19, %rcx
	movb	-497(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r11d
	movl	%r11d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -528(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$13, %r11d
	movb	-497(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movl	%r11d, -532(%rbp)       # 4-byte Spill
	jne	.LBB0_3
	jmp	.LBB0_4
.LBB0_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 17                  # test_crypto.c:0:17
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.36, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp9:
	.loc	2 16 13 is_stmt 1       # test_crypto.c:16:13
	movl	$1, (%rsp)
	movq	%rax, -544(%rbp)        # 8-byte Spill
	movl	%r10d, -548(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.54, %r8
	movabsq	$.L.str.36, %rcx
	movq	%rcx, -560(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.16, %rdx
	movq	%rax, %rdi
	movq	%rdx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.16, %rax
	movq	-544(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.36, %rdx
	movabsq	$.L.str.55, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp10:
	#DEBUG_VALUE: i <- [DW_OP_constu 544, DW_OP_minus] [%rbp+0]
	.loc	2 16 28 is_stmt 0       # test_crypto.c:16:28
	movl	$1, (%rsp)
	movl	%r10d, -572(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	-544(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.27, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.55, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-544(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-216(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	2 16 39                 # test_crypto.c:16:39
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -592(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$16, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.36, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.55, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	-592(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.36, %rdx
	movabsq	$.L.str.54, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	-544(%rbp), %r11        # 8-byte Reload
	movl	$0, (%rax,%r11,4)
	.loc	2 16 24                 # test_crypto.c:16:24
	movl	$1, (%rsp)
	movl	%r10d, -612(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.53, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-544(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.54, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-544(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	2 16 19                 # test_crypto.c:16:19
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.36, %rdx
	movabsq	$.L.str.57, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$16, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.54, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.57, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	-640(%rbp), %rdx        # 8-byte Reload
	cmpq	$16, %rdx
	sete	%bl
.Ltmp11:
	.loc	2 16 5                  # test_crypto.c:16:5
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bl, -673(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$16, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.36, %rdx
	movabsq	$.L.str.58, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -680(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.37, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rax, %rsi
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.36, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rax, %rsi
	movq	%rdx, -696(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.57, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movb	-673(%rbp), %bl         # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-673(%rbp), %bl         # 1-byte Reload
	testb	$1, %bl
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, -344(%rbp)        # 8-byte Spill
	jne	.LBB0_1
	jmp	.LBB0_2
.Ltmp12:
.LBB0_3:
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 5                   # test_crypto.c:0:5
	movl	$21, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.51, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 21 33 is_stmt 1       # test_crypto.c:21:33
	movl	$1, (%rsp)
	movl	%eax, -708(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r10
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	-720(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -728(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-728(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	addq	$8, %r10
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-736(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -744(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$21, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.51, %rdx
	movabsq	$.L.str.61, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -748(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-744(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -760(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-760(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.61, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	8(%r10), %r11
	.loc	2 21 28 is_stmt 0       # test_crypto.c:21:28
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-768(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -776(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$21, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.51, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$atoi, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.61, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-776(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -792(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-792(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-776(%rbp), %rdi        # 8-byte Reload
	callq	atoi
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$32, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 21 17                 # test_crypto.c:21:17
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -804(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$21, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.51, %rdx
	movabsq	$.L.str.64, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -808(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.52, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -816(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -824(%rbp)        # 8-byte Spill
	movq	-824(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	-804(%rbp), %eax        # 4-byte Reload
	movl	%eax, -532(%rbp)        # 4-byte Spill
.LBB0_4:
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	movl	-532(%rbp), %eax        # 4-byte Reload
	movl	$21, %ecx
	movl	%ecx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	2 21 9                  # test_crypto.c:21:9
	movl	$1, (%rsp)
	movl	%eax, -828(%rbp)        # 4-byte Spill
	movl	%r10d, -832(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$13, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movl	$1, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.37, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.62, %r8
	movabsq	$.L.str.51, %rdi
	movq	%rdi, -840(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	-848(%rbp), %r9         # 8-byte Reload
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.51, %rdx
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -856(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-856(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$22, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.66, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp13:
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	.loc	2 22 5 is_stmt 1        # test_crypto.c:22:5
	movl	$1, (%rsp)
	movl	%eax, -860(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.67, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -872(%rbp)        # 8-byte Spill
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r9, -880(%rbp)         # 8-byte Spill
	movq	%r11, %r9
	movq	-880(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.1, %rdi
	movl	-828(%rbp), %esi        # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$32, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.66, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 24 24                 # test_crypto.c:24:24
	movl	%eax, %eax
	movl	%eax, %r11d
	movq	%rdx, -888(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-888(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -892(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$encrypt, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -904(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-904(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.41, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-912(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-920(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-928(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %edx
	movl	$32768, %ecx            # imm = 0x8000
	movl	$256, %r8d              # imm = 0x100
	movq	-464(%rbp), %rdi        # 8-byte Reload
	movq	-408(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, (%rsp)
	callq	encrypt
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.68, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 24 11 is_stmt 0       # test_crypto.c:24:11
	movq	%rax, %rdx
	movq	%r11, (%rsp)
	movq	%rax, -936(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$25, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp14:
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	.loc	2 25 30 is_stmt 1       # test_crypto.c:25:30
	movl	$1, (%rsp)
	movl	%r10d, -940(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.68, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-936(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -952(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-936(%rbp), %rdx        # 8-byte Reload
	movq	(%rdx), %r11
	.loc	2 25 20 is_stmt 0       # test_crypto.c:25:20
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -960(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$25, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.72, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$copy_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.71, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-960(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -976(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-976(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %esi
	movq	-960(%rbp), %rdi        # 8-byte Reload
	callq	copy_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.72, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 25 10                 # test_crypto.c:25:10
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$26, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.73, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp15:
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	.loc	2 26 30 is_stmt 1       # test_crypto.c:26:30
	movl	$1, (%rsp)
	movl	%r10d, -996(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -1008(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1008(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.68, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-936(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.73, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-936(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$26, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1028(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.73, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1040(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-936(%rbp), %rdx        # 8-byte Reload
	movq	8(%rdx), %r11
	.loc	2 26 20 is_stmt 0       # test_crypto.c:26:20
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1048(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$26, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1052(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$copy_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.74, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-1048(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %esi
	movq	-1048(%rbp), %rdi       # 8-byte Reload
	callq	copy_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 26 10                 # test_crypto.c:26:10
	movq	%rdx, -1072(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$27, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.76, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp16:
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	.loc	2 27 18 is_stmt 1       # test_crypto.c:27:18
	movl	$1, (%rsp)
	movl	%r10d, -1084(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$decrypt, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.38, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1096(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$32768, %r10d           # imm = 0x8000
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$256, %r10d             # imm = 0x100
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.72, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-992(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-1080(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %esi
	movl	$32768, %edx            # imm = 0x8000
	movl	$256, %ecx              # imm = 0x100
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movq	-992(%rbp), %r9         # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	decrypt
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$32, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.76, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 27 9 is_stmt 0        # test_crypto.c:27:9
	movl	%eax, %edx
                                        # kill: def %rdx killed %edx
	movq	%r11, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$28, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.78, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp17:
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	.loc	2 28 5 is_stmt 1        # test_crypto.c:28:5
	movl	$1, (%rsp)
	movl	%eax, -1104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.79, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -1112(%rbp)       # 8-byte Spill
	movq	-1112(%rbp), %r11       # 8-byte Reload
	movq	%r9, -1120(%rbp)        # 8-byte Spill
	movq	%r11, %r9
	movq	-1120(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.2, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.78, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
.Ltmp18:
	.loc	2 29 15                 # test_crypto.c:29:15
	movl	%eax, %eax
	movl	%eax, %r11d
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$29, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -1144(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.76, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -1152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1152(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1160(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1160(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1100(%rbp), %eax       # 4-byte Reload
	movl	-828(%rbp), %r10d       # 4-byte Reload
	cmpl	%r10d, %eax
	sete	%r14b
.Ltmp19:
	.loc	2 29 8 is_stmt 0        # test_crypto.c:29:8
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r12d
	movl	%r12d, %esi
	movq	%rsi, -1168(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1176(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -1177(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$29, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.52, %rdx
	movabsq	$.L.str.81, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.82, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -1192(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1208(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1208(%rbp), %r9        # 8-byte Reload
	movq	-1192(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.83, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -1216(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1224(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1224(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -1232(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movb	-1177(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1240(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1248(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-1177(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB0_6
# %bb.5:
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 8                   # test_crypto.c:0:8
	movl	$30, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.83, %rdx
	movabsq	$.L.str.84, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp20:
	.loc	2 30 9 is_stmt 1        # test_crypto.c:30:9
	movl	$1, (%rsp)
	movl	%eax, -1252(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.85, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -1264(%rbp)       # 8-byte Spill
	movq	-1264(%rbp), %r10       # 8-byte Reload
	movq	%r9, -1272(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.3, %rdi
	movl	-1100(%rbp), %esi       # 4-byte Reload
	movl	-828(%rbp), %edx        # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.84, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 32 5                  # test_crypto.c:32:5
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$32, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.83, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.87, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1288(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	-1296(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB0_7
.Ltmp21:
.LBB0_6:
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 5 is_stmt 0         # test_crypto.c:0:5
	movl	$33, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.82, %rdx
	movabsq	$.L.str.88, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 33 10 is_stmt 1       # test_crypto.c:33:10
	movl	$1, (%rsp)
	movl	%eax, -1300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.89, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -1312(%rbp)       # 8-byte Spill
	movq	-1312(%rbp), %r10       # 8-byte Reload
	movq	%r9, -1320(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.4, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.88, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rdx
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.82, %rdx
	movabsq	$.L.str.90, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.87, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1344(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	-1352(%rbp), %r9        # 8-byte Reload
	movq	-1344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp22:
.LBB0_7:
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 10 is_stmt 0        # test_crypto.c:0:10
	movl	$36, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.87, %rdx
	movabsq	$.L.str.91, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 36 24 is_stmt 1       # test_crypto.c:36:24
	movl	$1, (%rsp)
	movl	%eax, -1356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rdi
	movq	%rdi, -1368(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -1376(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1376(%rbp), %rcx       # 8-byte Reload
	movq	-1376(%rbp), %r9        # 8-byte Reload
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.49, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -1384(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1384(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.91, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	cmpl	$2, %eax
	setg	%r14b
	.loc	2 36 19 is_stmt 0       # test_crypto.c:36:19
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r11d
	movl	%r11d, %esi
	movq	%rsi, -1400(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1408(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -1409(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$36, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.87, %rdx
	movabsq	$.L.str.92, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.93, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -1424(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1432(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -1440(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-1440(%rbp), %r9        # 8-byte Reload
	movq	-1424(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.94, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -1448(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1456(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -1464(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-1464(%rbp), %r9        # 8-byte Reload
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.91, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movb	-1409(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1472(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1480(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %eax
	movb	-1409(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movl	%eax, -1484(%rbp)       # 4-byte Spill
	jne	.LBB0_8
	jmp	.LBB0_9
.LBB0_8:
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 19                  # test_crypto.c:0:19
	movl	$36, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.93, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 36 35                 # test_crypto.c:36:35
	movl	$1, (%rsp)
	movl	%eax, -1488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rdi
	movq	%rdi, -1496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -1504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1504(%rbp), %rcx       # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	movq	-1496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	addq	$16, %r10
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1528(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$36, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.93, %rdx
	movabsq	$.L.str.96, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-1528(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	16(%r10), %r11
	.loc	2 36 30                 # test_crypto.c:36:30
	movq	%rdx, -1552(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1552(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -1560(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$36, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.93, %rdx
	movabsq	$.L.str.97, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$atoi, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-1560(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-1560(%rbp), %rdi       # 8-byte Reload
	callq	atoi
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$32, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.97, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 36 19                 # test_crypto.c:36:19
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.93, %rdx
	movabsq	$.L.str.98, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.94, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1600(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	-1608(%rbp), %r9        # 8-byte Reload
	movq	-1600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	-1588(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1484(%rbp)       # 4-byte Spill
.LBB0_9:
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	movl	-1484(%rbp), %eax       # 4-byte Reload
	movl	$36, %ecx
	movl	%ecx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.99, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	2 36 9                  # test_crypto.c:36:9
	movl	$1, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	movl	%r10d, -1616(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$12, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movl	$1, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.87, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.97, %r8
	movabsq	$.L.str.93, %rdi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -1632(%rbp)       # 8-byte Spill
	movq	-1632(%rbp), %r9        # 8-byte Reload
	movq	-1624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.99, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.93, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$37, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.100, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp23:
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	.loc	2 37 5 is_stmt 1        # test_crypto.c:37:5
	movl	$1, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.101, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -1656(%rbp)       # 8-byte Spill
	movq	-1656(%rbp), %r11       # 8-byte Reload
	movq	%r9, -1664(%rbp)        # 8-byte Spill
	movq	%r11, %r9
	movq	-1664(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.5, %rdi
	movl	-1612(%rbp), %esi       # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$32, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.100, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 38 25                 # test_crypto.c:38:25
	movl	%eax, %eax
	movl	%eax, %r11d
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$38, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.102, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1676(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -1688(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1688(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	(%r11), %rbx
	.loc	2 38 15 is_stmt 0       # test_crypto.c:38:15
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%rbx, %rdx
	movq	-1696(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movq	%rbx, -1704(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$38, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.103, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1708(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$copy_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1720(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %esi
	movq	-1704(%rbp), %rdi       # 8-byte Reload
	callq	copy_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.103, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 25 10 is_stmt 1       # test_crypto.c:25:10
	movq	%rdx, -1728(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -1736(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$38, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.104, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp24:
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 1736, DW_OP_minus] [%rbp+0]
	.loc	2 38 64                 # test_crypto.c:38:64
	movl	$1, (%rsp)
	movl	%r10d, -1740(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.73, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1752(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1752(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.104, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	(%rdx), %r11
	.loc	2 38 54 is_stmt 0       # test_crypto.c:38:54
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1760(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$38, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.105, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1764(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$copy_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.104, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-1760(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1776(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1776(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %esi
	movq	-1760(%rbp), %rdi       # 8-byte Reload
	callq	copy_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.105, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 26 10 is_stmt 1       # test_crypto.c:26:10
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -1792(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$39, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.106, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp25:
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1792, DW_OP_minus] [%rbp+0]
	.loc	2 39 19                 # test_crypto.c:39:19
	movl	$1, (%rsp)
	movl	%r10d, -1796(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$7, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$plain_add, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.107, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.103, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-1736(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1808(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1808(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.99, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movl	-1612(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %r15d
	movl	%r15d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$32768, %r10d           # imm = 0x8000
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$256, %r10d             # imm = 0x100
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %esi
	movl	$32768, %ecx            # imm = 0x8000
	movl	$256, %r8d              # imm = 0x100
	movq	-1736(%rbp), %rdi       # 8-byte Reload
	movl	-1612(%rbp), %edx       # 4-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	callq	plain_add
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.106, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 39 10 is_stmt 0       # test_crypto.c:39:10
	movq	%rax, %rdx
	movq	%r11, (%rsp)
	movq	%rax, -1816(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$40, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.108, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp26:
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	.loc	2 40 22 is_stmt 1       # test_crypto.c:40:22
	movl	$1, (%rsp)
	movl	%r10d, -1820(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$decrypt, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.38, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1832(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1832(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$32768, %r10d           # imm = 0x8000
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$256, %r10d             # imm = 0x100
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.106, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-1816(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.105, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-1792(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %esi
	movl	$32768, %edx            # imm = 0x8000
	movl	$256, %ecx              # imm = 0x100
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movq	-1816(%rbp), %r9        # 8-byte Reload
	movq	-1792(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	decrypt
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$32, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.108, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 40 9 is_stmt 0        # test_crypto.c:40:9
	movl	%eax, %edx
                                        # kill: def %rdx killed %edx
	movq	%r11, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.109, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp27:
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	.loc	2 41 31 is_stmt 1       # test_crypto.c:41:31
	movl	$1, (%rsp)
	movl	%eax, -1840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.99, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -1856(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1864(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1864(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.109, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	-828(%rbp), %r10d       # 4-byte Reload
	addl	%r10d, %eax
	.loc	2 41 39 is_stmt 0       # test_crypto.c:41:39
	movl	%eax, %r15d
	movl	%r15d, %r11d
	movq	%rdx, -1872(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1876(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.110, %rcx
	movl	$21, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1880(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.109, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1876(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -1888(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1896(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	$256, %eax              # imm = 0x100
	movl	-1876(%rbp), %r10d      # 4-byte Reload
	movl	%eax, -1900(%rbp)       # 4-byte Spill
	movl	%r10d, %eax
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	cltd
	movl	-1900(%rbp), %r15d      # 4-byte Reload
	idivl	%r15d
	.loc	2 41 19                 # test_crypto.c:41:19
	movl	%edx, %r12d
	movl	%r12d, %r11d
	movl	%edx, -1916(%rbp)       # 4-byte Spill
	movq	%r11, %rdx
	movq	-1912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.111, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1920(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.110, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1916(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %r15d
	movl	%r15d, %r11d
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.108, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1836(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %r15d
	movl	%r15d, %edi
	movq	%rdi, -1936(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1936(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1944(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1944(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.111, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1836(%rbp), %r10d      # 4-byte Reload
	movl	-1916(%rbp), %r15d      # 4-byte Reload
	cmpl	%r15d, %r10d
	sete	%r13b
.Ltmp28:
	.loc	2 41 8                  # test_crypto.c:41:8
	movb	%r13b, %sil
	andb	$1, %sil
	movzbl	%sil, %r12d
	movl	%r12d, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r13b, -1953(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.94, %rdx
	movabsq	$.L.str.112, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1960(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.113, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -1968(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1976(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1984(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-1968(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.114, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -1992(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2000(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -2008(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-2008(%rbp), %r9        # 8-byte Reload
	movq	-1992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.111, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	movb	-1953(%rbp), %r13b      # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -2016(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2016(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2024(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-1953(%rbp), %r13b      # 1-byte Reload
	testb	$1, %r13b
	jne	.LBB0_11
# %bb.10:
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
.Ltmp29:
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 8                   # test_crypto.c:0:8
	movl	$42, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.114, %rdx
	movabsq	$.L.str.115, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp30:
	.loc	2 42 9 is_stmt 1        # test_crypto.c:42:9
	movl	$1, (%rsp)
	movl	%eax, -2028(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.116, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -2040(%rbp)       # 8-byte Spill
	movq	-2040(%rbp), %r10       # 8-byte Reload
	movq	%r9, -2048(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-2048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.6, %rdi
	movl	-1836(%rbp), %esi       # 4-byte Reload
	movl	-1916(%rbp), %edx       # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.115, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 44 5                  # test_crypto.c:44:5
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$44, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.114, %rdx
	movabsq	$.L.str.117, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2052(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.118, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2064(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	-2072(%rbp), %r9        # 8-byte Reload
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB0_12
.Ltmp31:
.LBB0_11:
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 5 is_stmt 0         # test_crypto.c:0:5
	movl	$45, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.113, %rdx
	movabsq	$.L.str.119, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 45 10 is_stmt 1       # test_crypto.c:45:10
	movl	$1, (%rsp)
	movl	%eax, -2076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.120, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -2088(%rbp)       # 8-byte Spill
	movq	-2088(%rbp), %r10       # 8-byte Reload
	movq	%r9, -2096(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.7, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rdx
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -2104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.113, %rdx
	movabsq	$.L.str.121, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.118, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2120(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	-2128(%rbp), %r9        # 8-byte Reload
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp32:
.LBB0_12:
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 10 is_stmt 0        # test_crypto.c:0:10
	movl	$48, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.118, %rdx
	movabsq	$.L.str.122, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 48 24 is_stmt 1       # test_crypto.c:48:24
	movl	$1, (%rsp)
	movl	%eax, -2132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r10
	movq	%rcx, -2144(%rbp)       # 8-byte Spill
	movq	-2144(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.49, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -2152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2160(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.122, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	cmpl	$3, %eax
	setg	%r14b
	.loc	2 48 19 is_stmt 0       # test_crypto.c:48:19
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r11d
	movl	%r11d, %esi
	movq	%rsi, -2168(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2168(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2176(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -2177(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$48, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.118, %rdx
	movabsq	$.L.str.123, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.124, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -2192(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2200(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -2208(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-2208(%rbp), %r9        # 8-byte Reload
	movq	-2192(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.125, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -2216(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2224(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -2232(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-2232(%rbp), %r9        # 8-byte Reload
	movq	-2216(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.122, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movb	-2177(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -2240(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2248(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movb	-2177(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movl	%eax, -2252(%rbp)       # 4-byte Spill
	jne	.LBB0_13
	jmp	.LBB0_14
.LBB0_13:
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 19                  # test_crypto.c:0:19
	movl	$48, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.124, %rdx
	movabsq	$.L.str.126, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 48 35                 # test_crypto.c:48:35
	movl	$1, (%rsp)
	movl	%eax, -2256(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r10
	movq	%rcx, -2264(%rbp)       # 8-byte Spill
	movq	-2264(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -2272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	addq	$24, %r10
	movq	%rdx, -2280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2288(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$48, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.124, %rdx
	movabsq	$.L.str.127, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-2288(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	24(%r10), %r11
	.loc	2 48 30                 # test_crypto.c:48:30
	movq	%rdx, -2312(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2312(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -2320(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$48, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.124, %rdx
	movabsq	$.L.str.128, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$atoi, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-2320(%rbp), %rdi       # 8-byte Reload
	callq	atoi
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$32, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.128, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 48 19                 # test_crypto.c:48:19
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2348(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$48, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.124, %rdx
	movabsq	$.L.str.129, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2352(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.125, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2360(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	-2368(%rbp), %r9        # 8-byte Reload
	movq	-2360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	-2348(%rbp), %eax       # 4-byte Reload
	movl	%eax, -2252(%rbp)       # 4-byte Spill
.LBB0_14:
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	movl	-2252(%rbp), %eax       # 4-byte Reload
	movl	$48, %ecx
	movl	%ecx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.130, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	2 48 9                  # test_crypto.c:48:9
	movl	$1, (%rsp)
	movl	%eax, -2372(%rbp)       # 4-byte Spill
	movl	%r10d, -2376(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$4, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movl	$1, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.118, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.128, %r8
	movabsq	$.L.str.124, %rdi
	movq	%rdi, -2384(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -2392(%rbp)       # 8-byte Spill
	movq	-2392(%rbp), %r9        # 8-byte Reload
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.124, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$49, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.131, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp33:
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	.loc	2 49 25 is_stmt 1       # test_crypto.c:49:25
	movl	$1, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -2416(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2416(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.131, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	(%r11), %rbx
	.loc	2 49 15 is_stmt 0       # test_crypto.c:49:15
	movq	%rdx, -2424(%rbp)       # 8-byte Spill
	movq	%rbx, %rdx
	movq	-2424(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movq	%rbx, -2432(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$49, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.132, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$copy_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.131, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2448(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2448(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %esi
	movq	-2432(%rbp), %rdi       # 8-byte Reload
	callq	copy_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 25 10 is_stmt 1       # test_crypto.c:25:10
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-2456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -2464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.133, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp34:
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 2464, DW_OP_minus] [%rbp+0]
	.loc	2 50 5                  # test_crypto.c:50:5
	movl	$1, (%rsp)
	movl	%r10d, -2468(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$printf, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.134, %rdx
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -2480(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.8, %rdi
	movl	-2372(%rbp), %esi       # 4-byte Reload
	movl	-828(%rbp), %edx        # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.133, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 51 28                 # test_crypto.c:51:28
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$51, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.135, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$plain_mul, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2496(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2496(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.105, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-1792(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2504(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$7, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -2520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2520(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %edx
	movl	$32768, %r8d            # imm = 0x8000
	movl	$256, %r9d              # imm = 0x100
	movq	-2464(%rbp), %rdi       # 8-byte Reload
	movq	-1792(%rbp), %rsi       # 8-byte Reload
	movl	-2372(%rbp), %ecx       # 4-byte Reload
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	plain_mul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.135, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 51 11 is_stmt 0       # test_crypto.c:51:11
	movq	%rax, %rdx
	movq	%r11, (%rsp)
	movq	%rax, -2528(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$53, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.137, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp35:
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	.loc	2 53 30 is_stmt 1       # test_crypto.c:53:30
	movl	$1, (%rsp)
	movl	%r10d, -2532(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.135, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-2528(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2544(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2544(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.137, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-2528(%rbp), %rdx       # 8-byte Reload
	movq	(%rdx), %r11
	.loc	2 53 49 is_stmt 0       # test_crypto.c:53:49
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2552(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$53, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.138, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2556(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -2568(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2568(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.135, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-2528(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2576(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2576(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.138, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-2528(%rbp), %rdx       # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$53, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.139, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2588(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.138, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-2584(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2600(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.139, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-2528(%rbp), %rdx       # 8-byte Reload
	movq	8(%rdx), %r11
	.loc	2 52 22 is_stmt 1       # test_crypto.c:52:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2608(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$52, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.140, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2612(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$decrypt, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.38, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2624(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2624(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$32768, %r10d           # imm = 0x8000
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$256, %r10d             # imm = 0x100
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.137, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-2552(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.139, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rax
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %esi
	movl	$32768, %edx            # imm = 0x8000
	movl	$256, %ecx              # imm = 0x100
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movq	-2552(%rbp), %r9        # 8-byte Reload
	movq	-2608(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	decrypt
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$32, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.140, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r11
	.loc	2 52 9 is_stmt 0        # test_crypto.c:52:9
	movl	%eax, %edx
                                        # kill: def %rdx killed %edx
	movq	%r11, (%rsp)
	movl	%eax, -2628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$54, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.141, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp36:
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	.loc	2 54 30 is_stmt 1       # test_crypto.c:54:30
	movl	$1, (%rsp)
	movl	%eax, -2632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -2648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2648(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2656(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2656(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	-828(%rbp), %r10d       # 4-byte Reload
	imull	%r10d, %eax
	.loc	2 54 37 is_stmt 0       # test_crypto.c:54:37
	movl	%eax, %r15d
	movl	%r15d, %r11d
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$54, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.142, %rcx
	movl	$21, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$255, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r11
	movq	%rcx, -2680(%rbp)       # 8-byte Spill
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -2688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2688(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2696(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	$255, %eax
	movl	-2668(%rbp), %r10d      # 4-byte Reload
	movl	%eax, -2700(%rbp)       # 4-byte Spill
	movl	%r10d, %eax
	movq	%rdx, -2712(%rbp)       # 8-byte Spill
	cltd
	movl	-2700(%rbp), %r15d      # 4-byte Reload
	idivl	%r15d
	.loc	2 54 19                 # test_crypto.c:54:19
	movl	%edx, %r12d
	movl	%r12d, %r11d
	movl	%edx, -2716(%rbp)       # 4-byte Spill
	movq	%r11, %rdx
	movq	-2712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$54, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.143, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2720(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.142, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2716(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %r15d
	movl	%r15d, %r11d
	movq	%rdx, -2728(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.140, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2628(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %r15d
	movl	%r15d, %edi
	movq	%rdi, -2736(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2736(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2744(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2744(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.143, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-2628(%rbp), %r10d      # 4-byte Reload
	movl	-2716(%rbp), %r15d      # 4-byte Reload
	cmpl	%r15d, %r10d
	sete	%r13b
.Ltmp37:
	.loc	2 54 8                  # test_crypto.c:54:8
	movb	%r13b, %sil
	andb	$1, %sil
	movzbl	%sil, %r12d
	movl	%r12d, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -2752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r13b, -2753(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$54, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.125, %rdx
	movabsq	$.L.str.144, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2760(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.145, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -2768(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2776(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -2784(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-2784(%rbp), %r9        # 8-byte Reload
	movq	-2768(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.146, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -2792(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2800(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2800(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -2808(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-2808(%rbp), %r9        # 8-byte Reload
	movq	-2792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.143, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.19, %rdx
	movb	-2753(%rbp), %r13b      # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -2816(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2816(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2824(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2824(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-2753(%rbp), %r13b      # 1-byte Reload
	testb	$1, %r13b
	jne	.LBB0_16
# %bb.15:
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
.Ltmp38:
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 8                   # test_crypto.c:0:8
	movl	$55, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.146, %rdx
	movabsq	$.L.str.147, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp39:
	.loc	2 55 9 is_stmt 1        # test_crypto.c:55:9
	movl	$1, (%rsp)
	movl	%eax, -2828(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -2840(%rbp)       # 8-byte Spill
	movq	-2840(%rbp), %r10       # 8-byte Reload
	movq	%r9, -2848(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-2848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.9, %rdi
	movl	-2628(%rbp), %esi       # 4-byte Reload
	movl	-2716(%rbp), %edx       # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 57 5                  # test_crypto.c:57:5
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$57, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.146, %rdx
	movabsq	$.L.str.149, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2852(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.150, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2864(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2872(%rbp)       # 8-byte Spill
	movq	-2872(%rbp), %r9        # 8-byte Reload
	movq	-2864(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB0_17
.Ltmp40:
.LBB0_16:
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 5 is_stmt 0         # test_crypto.c:0:5
	movl	$58, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.145, %rdx
	movabsq	$.L.str.151, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 58 10 is_stmt 1       # test_crypto.c:58:10
	movl	$1, (%rsp)
	movl	%eax, -2876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.152, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	-2888(%rbp), %r10       # 8-byte Reload
	movq	%r9, -2896(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-2896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.10, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.151, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rdx
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.145, %rdx
	movabsq	$.L.str.153, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2908(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.150, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2920(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2928(%rbp)       # 8-byte Spill
	movq	-2928(%rbp), %r9        # 8-byte Reload
	movq	-2920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp41:
.LBB0_17:
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 10 is_stmt 0        # test_crypto.c:0:10
	movl	$61, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.154, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 61 5 is_stmt 1        # test_crypto.c:61:5
	movl	$1, (%rsp)
	movl	%eax, -2932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.155, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -2944(%rbp)       # 8-byte Spill
	movq	-2944(%rbp), %r10       # 8-byte Reload
	movq	%r9, -2952(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.11, %rdi
	movl	-828(%rbp), %esi        # 4-byte Reload
	movl	-1612(%rbp), %edx       # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.154, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 62 17                 # test_crypto.c:62:17
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$62, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.156, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2956(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$encrypt, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.41, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-408(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movq	-216(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.99, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %edx
	movl	$32768, %ecx            # imm = 0x8000
	movl	$256, %r8d              # imm = 0x100
	movq	-464(%rbp), %rdi        # 8-byte Reload
	movq	-408(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, (%rsp)
	callq	encrypt
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.156, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 62 11 is_stmt 0       # test_crypto.c:62:11
	movq	%rax, %rdx
	movq	%r10, (%rsp)
	movq	%rax, -3000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$63, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.157, %rcx
	movl	$54, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
.Ltmp42:
	#DEBUG_VALUE: main:ct2 <- [DW_OP_constu 3000, DW_OP_minus] [%rbp+0]
	.loc	2 63 20 is_stmt 1       # test_crypto.c:63:20
	movl	$1, (%rsp)
	movl	%ebx, -3004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$crypto_add, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.158, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	$64, %ebx
	movl	%ebx, %esi
	movabsq	$.L.str.68, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-936(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -3016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %ebx
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.156, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-3000(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$16, %ebx
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$32768, %ebx            # imm = 0x8000
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %ebx
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %edx
	movl	$32768, %ecx            # imm = 0x8000
	movq	-936(%rbp), %rdi        # 8-byte Reload
	movq	-3000(%rbp), %rsi       # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	callq	crypto_add
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.157, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 63 11 is_stmt 0       # test_crypto.c:63:11
	movq	%rax, %rdx
	movq	%r10, (%rsp)
	movq	%rax, -3024(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$65, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.159, %rcx
	movl	$30, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
.Ltmp43:
	#DEBUG_VALUE: main:add_ct <- [DW_OP_constu 3024, DW_OP_minus] [%rbp+0]
	.loc	2 65 34 is_stmt 1       # test_crypto.c:65:34
	movl	$1, (%rsp)
	movl	%ebx, -3028(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.157, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-3024(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -3040(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.159, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-3024(%rbp), %rdx       # 8-byte Reload
	movq	(%rdx), %r10
	.loc	2 65 45 is_stmt 0       # test_crypto.c:65:45
	movq	%r10, %rdx
	movq	%rax, (%rsp)
	movq	%r10, -3048(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$65, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.160, %rcx
	movl	$32, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -3052(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rcx
	movq	%rcx, -3064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-3064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	$64, %ebx
	movl	%ebx, %esi
	movabsq	$.L.str.157, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-3024(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -3072(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3072(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-3024(%rbp), %rdx       # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -3080(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$65, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.161, %rcx
	movl	$30, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -3084(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.160, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-3080(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -3096(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.161, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-3024(%rbp), %rdx       # 8-byte Reload
	movq	8(%rdx), %r10
	.loc	2 64 26 is_stmt 1       # test_crypto.c:64:26
	movq	%r10, %rdx
	movq	%rax, (%rsp)
	movq	%r10, -3104(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.162, %rcx
	movl	$54, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -3108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$decrypt, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	$64, %ebx
	movl	%ebx, %esi
	movabsq	$.L.str.38, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -3120(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3120(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$16, %ebx
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$32768, %ebx            # imm = 0x8000
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.43, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$256, %ebx              # imm = 0x100
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.70, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %ebx
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.27, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %ebx
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.159, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-3048(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %ebx
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.161, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rax
	movq	-3104(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$16, %esi
	movl	$32768, %edx            # imm = 0x8000
	movl	$256, %ecx              # imm = 0x100
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movq	-3048(%rbp), %r9        # 8-byte Reload
	movq	-3104(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	decrypt
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$32, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.162, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 64 9 is_stmt 0        # test_crypto.c:64:9
	movl	%eax, %edx
                                        # kill: def %rdx killed %edx
	movq	%r10, (%rsp)
	movl	%eax, -3124(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$66, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.163, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp44:
	#DEBUG_VALUE: main:enc_add_result <- [DW_OP_constu 3124, DW_OP_minus] [%rbp+0]
	.loc	2 66 23 is_stmt 1       # test_crypto.c:66:23
	movl	$1, (%rsp)
	movl	%eax, -3128(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-1916(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.162, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-3124(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3144(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3144(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movl	-3124(%rbp), %eax       # 4-byte Reload
	movl	-1916(%rbp), %ebx       # 4-byte Reload
	cmpl	%ebx, %eax
	sete	%r14b
.Ltmp45:
	.loc	2 66 8 is_stmt 0        # test_crypto.c:66:8
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r12d
	movl	%r12d, %esi
	movq	%rsi, -3160(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -3169(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$66, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.150, %rdx
	movabsq	$.L.str.164, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3176(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.165, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -3184(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3192(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3200(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3200(%rbp), %r9        # 8-byte Reload
	movq	-3184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.166, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rsi, -3208(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3216(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3224(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3224(%rbp), %r9        # 8-byte Reload
	movq	-3208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %rdx
	movb	-3169(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3232(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3232(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3169(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB0_19
# %bb.18:
	#DEBUG_VALUE: main:enc_add_result <- [DW_OP_constu 3124, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_ct <- [DW_OP_constu 3024, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ct2 <- [DW_OP_constu 3000, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 8                   # test_crypto.c:0:8
	movl	$67, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.166, %rdx
	movabsq	$.L.str.167, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp46:
	.loc	2 67 9 is_stmt 1        # test_crypto.c:67:9
	movl	$1, (%rsp)
	movl	%eax, -3244(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.168, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -3256(%rbp)       # 8-byte Spill
	movq	-3256(%rbp), %r10       # 8-byte Reload
	movq	%r9, -3264(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-3264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.12, %rdi
	movl	-3124(%rbp), %esi       # 4-byte Reload
	movl	-1916(%rbp), %edx       # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.167, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.19, %r10
	.loc	2 69 5                  # test_crypto.c:69:5
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$69, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.166, %rdx
	movabsq	$.L.str.169, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.170, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -3280(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -3288(%rbp)       # 8-byte Spill
	movq	-3288(%rbp), %r9        # 8-byte Reload
	movq	-3280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB0_20
.Ltmp47:
.LBB0_19:
	#DEBUG_VALUE: main:enc_add_result <- [DW_OP_constu 3124, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_ct <- [DW_OP_constu 3024, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ct2 <- [DW_OP_constu 3000, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 5 is_stmt 0         # test_crypto.c:0:5
	movl	$70, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.165, %rdx
	movabsq	$.L.str.171, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 70 10 is_stmt 1       # test_crypto.c:70:10
	movl	$1, (%rsp)
	movl	%eax, -3292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.172, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -3304(%rbp)       # 8-byte Spill
	movq	-3304(%rbp), %r10       # 8-byte Reload
	movq	%r9, -3312(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-3312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.13, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.171, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rdx
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -3320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.165, %rdx
	movabsq	$.L.str.173, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.170, %r8
	movabsq	$.L.str.19, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -3336(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -3344(%rbp)       # 8-byte Spill
	movq	-3344(%rbp), %r9        # 8-byte Reload
	movq	-3336(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp48:
.LBB0_20:
	#DEBUG_VALUE: main:enc_add_result <- [DW_OP_constu 3124, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_ct <- [DW_OP_constu 3024, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ct2 <- [DW_OP_constu 3000, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_result <- [DW_OP_constu 2628, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_ciphertext <- [DW_OP_constu 2528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:mul_val <- [DW_OP_constu 2372, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_result <- [DW_OP_constu 1836, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_c0 <- [DW_OP_constu 1816, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:add_val <- [DW_OP_constu 1612, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:result <- [DW_OP_constu 1100, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher1 <- [DW_OP_constu 1080, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:cipher0 <- [DW_OP_constu 992, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:ciphertext <- [DW_OP_constu 936, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:value <- [DW_OP_constu 828, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub0 <- [DW_OP_constu 464, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:tmp <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:pub1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:secretKey <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:polymod <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argv <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: main:argc <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	2 0 10 is_stmt 0        # test_crypto.c:0:10
	movl	$73, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.170, %rdx
	movabsq	$.L.str.174, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	2 73 5 is_stmt 1        # test_crypto.c:73:5
	movl	$1, (%rsp)
	movl	%eax, -3348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.19, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.175, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %r9
	movq	%rcx, -3360(%rbp)       # 8-byte Spill
	movq	-3360(%rbp), %r10       # 8-byte Reload
	movq	%r9, -3368(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-3368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.14, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.174, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.19, %rdx
	.loc	2 74 5                  # test_crypto.c:74:5
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -3376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$74, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15, %rsi
	movabsq	$.L.str.170, %rdx
	movabsq	$.L.str.176, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	movabsq	$.L.str.19, %rdx
	movq	%rdx, -3392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -3400(%rbp)       # 8-byte Spill
	movq	-3400(%rbp), %r9        # 8-byte Reload
	movq	-3392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movabsq	$.L.str.15, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	xorl	%eax, %eax
	addq	$3368, %rsp             # imm = 0xD28
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp49:
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.globl	free_tuple              # -- Begin function free_tuple
	.p2align	4, 0x90
	.type	free_tuple,@function
free_tuple:                             # @free_tuple
.Lfunc_begin1:
	.file	3 "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt/crypto.c"
	.loc	3 3 0                   # crypto.c:3:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
.Ltmp50:
	.loc	3 3 23 prologue_end     # crypto.c:3:23
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rdx, -24(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-24(%rbp), %rcx         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: free_tuple:x <- [DW_OP_constu 16, DW_OP_minus] [%rbp+0]
	.loc	3 4 15                  # crypto.c:4:15
	movl	$1, (%rsp)
	movl	%eax, -28(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-40(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.2.180, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %r11
	.loc	3 4 5 is_stmt 0         # crypto.c:4:5
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-48(%rbp), %rbx         # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -56(%rbp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.5.181, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$free_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.2.180, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-72(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	free_poly
	movl	$4, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.7.183, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 4 32                  # crypto.c:4:32
	movl	$1, (%rsp)
	movl	%eax, -76(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r10
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	movq	-88(%rbp), %r9          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7.183, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	addq	$8, %r10
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -112(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.9.185, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -116(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7.183, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	8(%r10), %r11
	.loc	3 4 22                  # crypto.c:4:22
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.10.186, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$free_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	free_poly
	movl	$5, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.11.187, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 5 10 is_stmt 1        # crypto.c:5:10
	movl	$1, (%rsp)
	movl	%eax, -164(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-176(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	.loc	3 5 5 is_stmt 0         # crypto.c:5:5
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-184(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -192(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$5, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.12.188, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -196(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$free, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13.189, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-208(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	free
	movl	$6, %eax
	movl	%eax, %edi
	movabsq	$.L.str.178, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.14.190, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 6 1 is_stmt 1         # crypto.c:6:1
	movl	$1, (%rsp)
	movl	%eax, -212(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.178, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Ltmp51:
.Lfunc_end1:
	.size	free_tuple, .Lfunc_end1-free_tuple
	.cfi_endproc
                                        # -- End function
	.globl	gen_binary_poly         # -- Begin function gen_binary_poly
	.p2align	4, 0x90
	.type	gen_binary_poly,@function
gen_binary_poly:                        # @gen_binary_poly
.Lfunc_begin2:
	.loc	3 8 0                   # crypto.c:8:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
.Ltmp52:
	.loc	3 8 26 prologue_end     # crypto.c:8:26
	movl	%edi, %eax
	movl	%eax, %r11d
	movl	%edi, -44(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$9, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.16.193, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: gen_binary_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 9 33                  # crypto.c:9:33
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r10
	.loc	3 9 37 is_stmt 0        # crypto.c:9:37
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -96(%rbp)         # 8-byte Spill
	callq	trace_logger_log_int
	movl	$9, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.18.194, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -100(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r9         # 8-byte Reload
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	shlq	$2, %r10
	.loc	3 9 26                  # crypto.c:9:26
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$9, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 9 19                  # crypto.c:9:19
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$9, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$47, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -180(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	.loc	3 9 10                  # crypto.c:9:10
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.21.197, %rcx
	movl	$51, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
.Ltmp53:
	#DEBUG_VALUE: gen_binary_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- 0
	.loc	3 10 19 is_stmt 1       # crypto.c:10:19
	movl	$1, (%rsp)
	movl	%ebx, -204(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22.198, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	$32, %ebx
	movl	%ebx, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$1, %ebx
	movl	%ebx, %eax
	movabsq	$.L.str.21.197, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	cmpl	$0, %ebx
	setg	%r15b
.Ltmp54:
	.loc	3 10 5 is_stmt 0        # crypto.c:10:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rsi
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -233(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$10, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.12.188, %rcx
	movl	$2, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -240(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.23.199, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %ebx
	movl	%ebx, %edi
	xorl	%ebx, %ebx
	movl	%ebx, %eax
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movabsq	$.L.str.21.197, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-233(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-233(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB2_1
	jmp	.LBB2_2
.LBB2_1:                                # %.lr.ph
	#DEBUG_VALUE: gen_binary_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_binary_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.25.201, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -268(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	.loc	3 10 5                  # crypto.c:10:5
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$10, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.26.202, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -308(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -320(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	-328(%rbp), %r9         # 8-byte Reload
	movq	-320(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jmp	.LBB2_3
.Ltmp55:
.LBB2_2:                                # %._crit_edge
	#DEBUG_VALUE: gen_binary_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_binary_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.24.200, %rdx
	movabsq	$.L.str.28.204, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 13 5 is_stmt 1        # crypto.c:13:5
	movl	$1, (%rsp)
	movl	%eax, -340(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.15.192, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-200(%rbp), %rax        # 8-byte Reload
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB2_3:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: gen_binary_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_binary_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.29.205, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp56:
	.loc	3 10 13 is_stmt 1       # crypto.c:10:13
	movl	$1, (%rsp)
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.30.206, %r8
	movabsq	$.L.str.27.203, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.23.199, %rdx
	movq	%rax, %rdi
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.23.199, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$11, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.31.207, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp57:
	#DEBUG_VALUE: i <- [DW_OP_constu 360, DW_OP_minus] [%rbp+0]
	.loc	3 11 21                 # crypto.c:11:21
	movl	$1, (%rsp)
	movl	%r10d, -388(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$rand, %rdx
	movabsq	$.L.str.32.208, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	callq	rand
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 11 28 is_stmt 0       # crypto.c:11:28
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -412(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$11, %eax
	movl	%eax, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.33.209, %rcx
	movl	$21, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -416(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -424(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-432(%rbp), %rcx        # 8-byte Reload
	movq	-432(%rbp), %r9         # 8-byte Reload
	movq	-424(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.31.207, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-412(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -440(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-440(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -448(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-448(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	$2, %eax
	movl	-412(%rbp), %r10d       # 4-byte Reload
	movl	%eax, -452(%rbp)        # 4-byte Spill
	movl	%r10d, %eax
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	cltd
	movl	-452(%rbp), %r14d       # 4-byte Reload
	idivl	%r14d
	.loc	3 11 9                  # crypto.c:11:9
	movl	%edx, %r15d
	movl	%r15d, %r11d
	movl	%edx, -468(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-464(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$11, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.34.210, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-360(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-480(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-488(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-360(%rbp), %r11        # 8-byte Reload
	shlq	$2, %r11
	movq	-200(%rbp), %rbx        # 8-byte Reload
	addq	%r11, %rbx
	.loc	3 11 19                 # crypto.c:11:19
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-496(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rbx, -504(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$11, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.35.211, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-504(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-520(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.209, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-468(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edi
	movq	%rdi, -528(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-528(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-536(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$10, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.30.206, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	-360(%rbp), %rbx        # 8-byte Reload
	movl	-468(%rbp), %r14d       # 4-byte Reload
	movl	%r14d, (%r11,%rbx,4)
.Ltmp58:
	.loc	3 10 27 is_stmt 1       # crypto.c:10:27
	movl	$1, (%rsp)
	movl	%r10d, -540(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r11
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	-552(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-560(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.30.206, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-360(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	3 10 19 is_stmt 0       # crypto.c:10:19
	movq	%rdx, -568(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-568(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$10, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.36.212, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-304(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-592(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.30.206, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-576(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-600(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-576(%rbp), %rsi        # 8-byte Reload
	movq	-304(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r12b
.Ltmp59:
	.loc	3 10 5                  # crypto.c:10:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %ebx
	movq	%rcx, %rsi
	movq	%rdx, -608(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-608(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r12b, -609(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$10, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.15.192, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.37.213, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -624(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -632(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-632(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-640(%rbp), %r9         # 8-byte Reload
	movq	-624(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -648(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-656(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-648(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movb	-609(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -672(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-672(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -680(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-680(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-609(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	movq	-576(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jne	.LBB2_2
	jmp	.LBB2_3
.Ltmp60:
.Lfunc_end2:
	.size	gen_binary_poly, .Lfunc_end2-gen_binary_poly
	.cfi_endproc
                                        # -- End function
	.globl	gen_uniform_poly        # -- Begin function gen_uniform_poly
	.p2align	4, 0x90
	.type	gen_uniform_poly,@function
gen_uniform_poly:                       # @gen_uniform_poly
.Lfunc_begin3:
	.loc	3 16 0 is_stmt 1        # crypto.c:16:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$632, %rsp              # imm = 0x278
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.17.191, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.4.2, %r11
.Ltmp61:
	.loc	3 16 27 prologue_end    # crypto.c:16:27
	movl	%edi, %eax
	movl	%eax, %ebx
	movl	%edi, -44(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -48(%rbp)         # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rbx, %rdx
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-48(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$17, %eax
	movl	%eax, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.16.193, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: gen_uniform_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:mod <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 17 33                 # crypto.c:17:33
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r10
	.loc	3 17 37 is_stmt 0       # crypto.c:17:37
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -96(%rbp)         # 8-byte Spill
	callq	trace_logger_log_int
	movl	$17, %eax
	movl	%eax, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.18.194, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -100(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r9         # 8-byte Reload
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	shlq	$2, %r10
	.loc	3 17 26                 # crypto.c:17:26
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$17, %eax
	movl	%eax, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 17 19                 # crypto.c:17:19
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$17, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$47, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -180(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	.loc	3 17 10                 # crypto.c:17:10
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$18, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.21.197, %rcx
	movl	$51, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
.Ltmp62:
	#DEBUG_VALUE: gen_uniform_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- 0
	.loc	3 18 19 is_stmt 1       # crypto.c:18:19
	movl	$1, (%rsp)
	movl	%r14d, -204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22.198, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$32, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$1, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.21.197, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	cmpl	$0, %r14d
	setg	%r12b
.Ltmp63:
	.loc	3 18 5 is_stmt 0        # crypto.c:18:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r15d
	movl	%r15d, %edx
	movq	%rax, %rsi
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r12b, -233(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$18, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.14.190, %rcx
	movl	$2, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.23.199, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r14d
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	movl	%r14d, %eax
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.21.197, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-233(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-233(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	jne	.LBB3_1
	jmp	.LBB3_2
.LBB3_1:                                # %.lr.ph
	#DEBUG_VALUE: gen_uniform_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:mod <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.25.201, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -268(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	.loc	3 18 5                  # crypto.c:18:5
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$18, %eax
	movl	%eax, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.26.202, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -308(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -320(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	-328(%rbp), %r9         # 8-byte Reload
	movq	-320(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jmp	.LBB3_3
.Ltmp64:
.LBB3_2:                                # %._crit_edge
	#DEBUG_VALUE: gen_uniform_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:mod <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movl	$21, %eax
	movl	%eax, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.24.200, %rdx
	movabsq	$.L.str.28.204, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 21 5 is_stmt 1        # crypto.c:21:5
	movl	$1, (%rsp)
	movl	%eax, -340(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.38.215, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-200(%rbp), %rax        # 8-byte Reload
	addq	$632, %rsp              # imm = 0x278
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB3_3:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: gen_uniform_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:mod <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_uniform_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.29.205, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp65:
	.loc	3 18 13 is_stmt 1       # crypto.c:18:13
	movl	$1, (%rsp)
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.30.206, %r8
	movabsq	$.L.str.27.203, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.23.199, %rdx
	movq	%rax, %rdi
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.23.199, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.31.207, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp66:
	#DEBUG_VALUE: i <- [DW_OP_constu 360, DW_OP_minus] [%rbp+0]
	.loc	3 19 21                 # crypto.c:19:21
	movl	$1, (%rsp)
	movl	%r10d, -388(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$rand, %rdx
	movabsq	$.L.str.32.208, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	callq	rand
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 19 28 is_stmt 0       # crypto.c:19:28
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -412(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$19, %eax
	movl	%eax, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.33.209, %rcx
	movl	$21, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -416(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-48(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-424(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.31.207, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-412(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-432(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-440(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-412(%rbp), %eax        # 4-byte Reload
	movq	%rdx, -448(%rbp)        # 8-byte Spill
	cltd
	movl	-48(%rbp), %r10d        # 4-byte Reload
	idivl	%r10d
	.loc	3 19 9                  # crypto.c:19:9
	movl	%edx, %r14d
	movl	%r14d, %r11d
	movl	%edx, -452(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.34.210, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -456(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-360(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-464(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-472(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-360(%rbp), %r11        # 8-byte Reload
	shlq	$2, %r11
	movq	-200(%rbp), %rbx        # 8-byte Reload
	addq	%r11, %rbx
	.loc	3 19 19                 # crypto.c:19:19
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-480(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rbx, -488(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$19, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.35.211, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-488(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-504(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.209, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-452(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edi
	movq	%rdi, -512(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-512(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-520(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$18, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.30.206, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	-360(%rbp), %rbx        # 8-byte Reload
	movl	-452(%rbp), %r14d       # 4-byte Reload
	movl	%r14d, (%r11,%rbx,4)
.Ltmp67:
	.loc	3 18 27 is_stmt 1       # crypto.c:18:27
	movl	$1, (%rsp)
	movl	%r10d, -524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r11
	movq	%rcx, -536(%rbp)        # 8-byte Spill
	movq	-536(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-544(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.30.206, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-360(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	3 18 19 is_stmt 0       # crypto.c:18:19
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-552(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -560(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$18, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.36.212, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-304(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-576(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.30.206, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -584(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-584(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-304(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r15b
.Ltmp68:
	.loc	3 18 5                  # crypto.c:18:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %ebx
	movq	%rcx, %rsi
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-592(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r15b, -593(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$18, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.38.215, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.37.213, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -600(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-616(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-624(%rbp), %r9         # 8-byte Reload
	movq	-608(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -632(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-640(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-632(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movb	-593(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -656(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-656(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -664(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-664(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-593(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	movq	-560(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jne	.LBB3_2
	jmp	.LBB3_3
.Ltmp69:
.Lfunc_end3:
	.size	gen_uniform_poly, .Lfunc_end3-gen_uniform_poly
	.cfi_endproc
                                        # -- End function
	.globl	norm_rand               # -- Begin function norm_rand
	.p2align	4, 0x90
	.type	norm_rand,@function
norm_rand:                              # @norm_rand
.Lfunc_begin4:
	.loc	3 24 0 is_stmt 1        # crypto.c:24:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp              # imm = 0x1F8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.50.216, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.4.2, %r11
.Ltmp70:
	.loc	3 24 19 prologue_end    # crypto.c:24:19
	movl	%edi, %eax
	movl	%eax, %ebx
	movq	%rcx, %rdi
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rbx, %rdx
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.51.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$32, %eax
	movl	%eax, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.14.190, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: norm_rand:mean <- undef
	#DEBUG_VALUE: norm_rand:std <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
.Ltmp71:
	#DEBUG_VALUE: norm_rand:ret <- 0
	#DEBUG_VALUE: i <- 0
	.loc	3 32 5                  # crypto.c:32:5
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	-80(%rbp), %r9          # 8-byte Reload
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %r14d
	movl	%r14d, -84(%rbp)        # 4-byte Spill
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB4_2
.Ltmp72:
.LBB4_1:
	#DEBUG_VALUE: norm_rand:ret <- [DW_OP_constu 168, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: norm_rand:std <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movl	$35, %eax
	movl	%eax, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.41.219, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 35 17 is_stmt 1       # crypto.c:35:17
	movl	$1, (%rsp)
	movl	%eax, -92(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$4294967288, %eax       # imm = 0xFFFFFFF8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r10
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	-104(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.43.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-108(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-108(%rbp), %eax        # 4-byte Reload
	addl	$-8, %eax
	.loc	3 35 5 is_stmt 0        # crypto.c:35:5
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -140(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$35, %eax
	movl	%eax, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.41.219, %rdx
	movabsq	$.L.str.44.222, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -144(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.42.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -152(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movabsq	$.L.str.40.218, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movl	-140(%rbp), %eax        # 4-byte Reload
	addq	$504, %rsp              # imm = 0x1F8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB4_2:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: norm_rand:std <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movl	-88(%rbp), %eax         # 4-byte Reload
	movl	-84(%rbp), %ecx         # 4-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.45.223, %r8
	movl	$53, %r9d
	movl	%r9d, %r10d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	.loc	3 31 9 is_stmt 1        # crypto.c:31:9
	movl	%ecx, -164(%rbp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	%r10, %r8
	movl	$1, (%rsp)
	movl	%eax, -168(%rbp)        # 4-byte Spill
	movl	%r11d, -172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46.224, %r8
	movabsq	$.L.str.27.203, %r10
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	-184(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.47.225, %r8
	movabsq	$.L.str.1.179, %rdi
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	-200(%rbp), %r9         # 8-byte Reload
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.1.179, %rdx
	movl	-164(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-208(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.48.226, %rcx
	movl	$53, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -212(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.43.221, %r8
	movabsq	$.L.str.27.203, %r10
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	-224(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.47.225, %r8
	movabsq	$.L.str.1.179, %rdi
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	-240(%rbp), %r9         # 8-byte Reload
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.48.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.1.179, %rdx
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$33, %eax
	movl	%eax, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: norm_rand:ret <- [DW_OP_constu 168, DW_OP_minus] [%rbp+0]
.Ltmp73:
	#DEBUG_VALUE: i <- [DW_OP_constu 164, DW_OP_minus] [%rbp+0]
	.loc	3 33 16                 # crypto.c:33:16
	movl	$1, (%rsp)
	movl	%eax, -252(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$rand, %rdx
	movabsq	$.L.str.32.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -264(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	callq	rand
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 33 23 is_stmt 0       # crypto.c:33:23
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -276(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$33, %eax
	movl	%eax, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.33.209, %rcx
	movl	$21, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -280(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-296(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %r9         # 8-byte Reload
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-276(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -304(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-304(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-312(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	$2, %eax
	movl	-276(%rbp), %r11d       # 4-byte Reload
	movl	%eax, -316(%rbp)        # 4-byte Spill
	movl	%r11d, %eax
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	cltd
	movl	-316(%rbp), %r14d       # 4-byte Reload
	idivl	%r14d
	.loc	3 33 13                 # crypto.c:33:13
	movl	%edx, %r15d
	movl	%r15d, %r10d
	movl	%edx, -332(%rbp)        # 4-byte Spill
	movq	%r10, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$33, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.43.221, %rcx
	movl	$11, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.48.226, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-168(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-344(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %ecx
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.33.209, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-332(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edi
	movq	%rdi, -352(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-360(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.43.221, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-332(%rbp), %r11d       # 4-byte Reload
	movl	-168(%rbp), %r14d       # 4-byte Reload
	addl	%r14d, %r11d
.Ltmp74:
	.loc	3 32 25 is_stmt 1       # crypto.c:32:25
	movl	%r11d, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-368(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r11d, -108(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$32, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.46.224, %rcx
	movl	$11, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -372(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r10
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %ecx
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.45.223, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-164(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edi
	movq	%rdi, -392(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-400(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.46.224, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-164(%rbp), %r11d       # 4-byte Reload
	addl	$1, %r11d
.Ltmp75:
	.loc	3 32 13 is_stmt 0       # crypto.c:32:13
	movl	%r11d, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-408(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r11d, -412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$32, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.36.212, %rcx
	movl	$51, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp76:
	#DEBUG_VALUE: i <- [DW_OP_constu 412, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: norm_rand:ret <- [DW_OP_constu 108, DW_OP_minus] [%rbp+0]
	.loc	3 32 19                 # crypto.c:32:19
	movl	$1, (%rsp)
	movl	%r11d, -416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$17, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r10
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	-424(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %ecx
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.46.224, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-412(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edi
	movq	%rdi, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-440(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-412(%rbp), %r11d       # 4-byte Reload
	cmpl	$17, %r11d
	sete	%r12b
.Ltmp77:
	.loc	3 32 5                  # crypto.c:32:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r14d
	movl	%r14d, %esi
	movq	%rsi, -448(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-448(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-456(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r12b, -457(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$32, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.40.218, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.49.227, %rcx
	movl	$2, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -464(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.41.219, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -472(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-480(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-472(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r11d
	movl	%r11d, %edi
	xorl	%r11d, %r11d
	movl	%r11d, %ecx
	movl	$1, %r11d
	movl	%r11d, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -496(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movb	-457(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r11d
	movl	%r11d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -520(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-520(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-457(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	movl	-412(%rbp), %r11d       # 4-byte Reload
	movl	-108(%rbp), %r14d       # 4-byte Reload
	movl	%r11d, -84(%rbp)        # 4-byte Spill
	movl	%r14d, -88(%rbp)        # 4-byte Spill
	jne	.LBB4_1
	jmp	.LBB4_2
.Ltmp78:
.Lfunc_end4:
	.size	norm_rand, .Lfunc_end4-norm_rand
	.cfi_endproc
                                        # -- End function
	.globl	gen_normal_poly         # -- Begin function gen_normal_poly
	.p2align	4, 0x90
	.type	gen_normal_poly,@function
gen_normal_poly:                        # @gen_normal_poly
.Lfunc_begin5:
	.loc	3 38 0 is_stmt 1        # crypto.c:38:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$608, %rsp              # imm = 0x260
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
.Ltmp79:
	.loc	3 38 26 prologue_end    # crypto.c:38:26
	movl	%edi, %eax
	movl	%eax, %r11d
	movl	%edi, -36(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$39, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.16.193, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: gen_normal_poly:size <- [DW_OP_constu 36, DW_OP_minus] [%rbp+0]
	.loc	3 39 33                 # crypto.c:39:33
	movl	$1, (%rsp)
	movl	%eax, -52(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-36(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-64(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-72(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-36(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r10
	.loc	3 39 37 is_stmt 0       # crypto.c:39:37
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -88(%rbp)         # 8-byte Spill
	callq	trace_logger_log_int
	movl	$39, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.18.194, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -92(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	-112(%rbp), %r9         # 8-byte Reload
	movq	-104(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-88(%rbp), %r10         # 8-byte Reload
	shlq	$2, %r10
	.loc	3 39 26                 # crypto.c:39:26
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -136(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$39, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -140(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-152(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 39 19                 # crypto.c:39:19
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-160(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$39, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$47, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -172(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-168(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-168(%rbp), %rdx        # 8-byte Reload
	.loc	3 39 10                 # crypto.c:39:10
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$40, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.21.197, %rcx
	movl	$51, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
.Ltmp80:
	#DEBUG_VALUE: gen_normal_poly:coeffs <- [DW_OP_constu 192, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- 0
	.loc	3 40 19 is_stmt 1       # crypto.c:40:19
	movl	$1, (%rsp)
	movl	%ebx, -196(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22.198, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	$32, %ebx
	movl	%ebx, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-36(%rbp), %ebx         # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$1, %ebx
	movl	%ebx, %eax
	movabsq	$.L.str.21.197, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-36(%rbp), %ebx         # 4-byte Reload
	cmpl	$0, %ebx
	setg	%r15b
.Ltmp81:
	.loc	3 40 5 is_stmt 0        # crypto.c:40:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rsi
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -225(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$40, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.12.188, %rcx
	movl	$2, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -232(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.23.199, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %ebx
	movl	%ebx, %edi
	xorl	%ebx, %ebx
	movl	%ebx, %eax
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movabsq	$.L.str.21.197, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-225(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-225(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB5_1
	jmp	.LBB5_2
.LBB5_1:                                # %.lr.ph
	#DEBUG_VALUE: gen_normal_poly:coeffs <- [DW_OP_constu 192, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_normal_poly:size <- [DW_OP_constu 36, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.25.201, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -260(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-36(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-272(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-36(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	.loc	3 40 5                  # crypto.c:40:5
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -296(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$40, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.26.202, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -300(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -312(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %r9         # 8-byte Reload
	movq	-312(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	jmp	.LBB5_3
.Ltmp82:
.LBB5_2:                                # %._crit_edge
	#DEBUG_VALUE: gen_normal_poly:coeffs <- [DW_OP_constu 192, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_normal_poly:size <- [DW_OP_constu 36, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movl	$43, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.24.200, %rdx
	movabsq	$.L.str.28.204, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 43 5 is_stmt 1        # crypto.c:43:5
	movl	$1, (%rsp)
	movl	%eax, -332(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-344(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.52.228, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-192(%rbp), %rax        # 8-byte Reload
	addq	$608, %rsp              # imm = 0x260
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB5_3:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: gen_normal_poly:coeffs <- [DW_OP_constu 192, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_normal_poly:size <- [DW_OP_constu 36, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.29.205, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp83:
	.loc	3 40 13 is_stmt 1       # crypto.c:40:13
	movl	$1, (%rsp)
	movq	%rax, -352(%rbp)        # 8-byte Spill
	movl	%r10d, -356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.30.206, %r8
	movabsq	$.L.str.27.203, %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.23.199, %rdx
	movq	%rax, %rdi
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.23.199, %rax
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.31.207, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp84:
	#DEBUG_VALUE: i <- [DW_OP_constu 352, DW_OP_minus] [%rbp+0]
	.loc	3 41 21                 # crypto.c:41:21
	movl	$1, (%rsp)
	movl	%r10d, -380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$norm_rand, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.40.218, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdx
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
                                        # implicit-def: %r10d
	movl	%r10d, %edi
	movl	%r10d, %esi
	callq	norm_rand
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$32, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 41 9 is_stmt 0        # crypto.c:41:9
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -412(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.34.210, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -416(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-424(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-432(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	shlq	$2, %r11
	movq	-192(%rbp), %rbx        # 8-byte Reload
	addq	%r11, %rbx
	.loc	3 41 19                 # crypto.c:41:19
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-440(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rbx, -448(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.35.211, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -452(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-464(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.31.207, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-412(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -472(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-472(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-480(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$40, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.30.206, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r11        # 8-byte Reload
	movq	-352(%rbp), %rbx        # 8-byte Reload
	movl	-412(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, (%r11,%rbx,4)
.Ltmp85:
	.loc	3 40 27 is_stmt 1       # crypto.c:40:27
	movl	$1, (%rsp)
	movl	%eax, -484(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r11
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	-496(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.29.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-504(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.30.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	3 40 19 is_stmt 0       # crypto.c:40:19
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-512(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -520(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$40, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.36.212, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -524(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-296(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-536(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.30.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-520(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-544(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-520(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r14b
.Ltmp86:
	.loc	3 40 5                  # crypto.c:40:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %ebx
	movq	%rcx, %rsi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-552(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -553(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$40, %eax
	movl	%eax, %edi
	movabsq	$.L.str.52.228, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.37.213, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -560(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -568(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-576(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-584(%rbp), %r9         # 8-byte Reload
	movq	-568(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -592(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-600(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-608(%rbp), %r9         # 8-byte Reload
	movq	-592(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.36.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movb	-553(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -616(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-616(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-624(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-553(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-520(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	jne	.LBB5_2
	jmp	.LBB5_3
.Ltmp87:
.Lfunc_end5:
	.size	gen_normal_poly, .Lfunc_end5-gen_normal_poly
	.cfi_endproc
                                        # -- End function
	.globl	gen_const_poly          # -- Begin function gen_const_poly
	.p2align	4, 0x90
	.type	gen_const_poly,@function
gen_const_poly:                         # @gen_const_poly
.Lfunc_begin6:
	.loc	3 46 0 is_stmt 1        # crypto.c:46:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp              # imm = 0x1F8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.17.191, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.4.2, %r11
.Ltmp88:
	.loc	3 46 25 prologue_end    # crypto.c:46:25
	movl	%edi, %eax
	movl	%eax, %ebx
	movl	%edi, -44(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -48(%rbp)         # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rbx, %rdx
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-48(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.16.193, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: gen_const_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:val <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 47 33                 # crypto.c:47:33
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r10
	.loc	3 47 37 is_stmt 0       # crypto.c:47:37
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -96(%rbp)         # 8-byte Spill
	callq	trace_logger_log_int
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.18.194, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -100(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r9         # 8-byte Reload
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	shlq	$2, %r10
	.loc	3 47 26                 # crypto.c:47:26
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 47 19                 # crypto.c:47:19
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$47, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movq	%rax, %rdi
	movq	%rax, %r8
	movl	$1, (%rsp)
	movl	%r14d, -180(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	.loc	3 47 10                 # crypto.c:47:10
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$48, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.12.188, %rcx
	movl	$31, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
.Ltmp89:
	#DEBUG_VALUE: gen_const_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	.loc	3 48 15 is_stmt 1       # crypto.c:48:15
	movl	$1, (%rsp)
	movl	%r14d, -204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$32, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.54.229, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-48(%rbp), %r14d        # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$49, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.55.231, %rcx
	movl	$51, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	-48(%rbp), %r15d        # 4-byte Reload
	movl	%r15d, (%rax)
.Ltmp90:
	#DEBUG_VALUE: i <- 1
	.loc	3 49 19                 # crypto.c:49:19
	movl	$1, (%rsp)
	movl	%r14d, -220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.22.198, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdx
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$32, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$1, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.55.231, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	cmpl	$1, %r14d
	setg	%r12b
.Ltmp91:
	.loc	3 49 5 is_stmt 0        # crypto.c:49:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r15d
	movl	%r15d, %edx
	movq	%rax, %rsi
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r12b, -249(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$49, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.56.232, %rcx
	movl	$2, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -256(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.23.199, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r14d
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	movl	%r14d, %eax
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.55.231, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-249(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-249(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	jne	.LBB6_1
	jmp	.LBB6_2
.LBB6_1:                                # %.lr.ph
	#DEBUG_VALUE: gen_const_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:val <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.25.201, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -284(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -296(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-296(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -304(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-304(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	.loc	3 49 5                  # crypto.c:49:5
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-312(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -320(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$49, %eax
	movl	%eax, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.26.202, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -324(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -336(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	-344(%rbp), %r9         # 8-byte Reload
	movq	-336(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	jmp	.LBB6_3
.Ltmp92:
.LBB6_2:                                # %._crit_edge
	#DEBUG_VALUE: gen_const_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:val <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movl	$52, %eax
	movl	%eax, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.24.200, %rdx
	movabsq	$.L.str.28.204, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 52 5 is_stmt 1        # crypto.c:52:5
	movl	$1, (%rsp)
	movl	%eax, -356(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-368(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.53.230, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-200(%rbp), %rax        # 8-byte Reload
	addq	$504, %rsp              # imm = 0x1F8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB6_3:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: gen_const_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:val <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: gen_const_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.29.205, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp93:
	.loc	3 49 13 is_stmt 1       # crypto.c:49:13
	movl	$1, (%rsp)
	movq	%rax, -376(%rbp)        # 8-byte Spill
	movl	%r10d, -380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.30.206, %r8
	movabsq	$.L.str.27.203, %rcx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.23.199, %rdx
	movq	%rax, %rdi
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.23.199, %rax
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.57.233, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp94:
	#DEBUG_VALUE: i <- [DW_OP_constu 376, DW_OP_minus] [%rbp+0]
	.loc	3 50 9                  # crypto.c:50:9
	movl	$1, (%rsp)
	movl	%r10d, -404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.57.233, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-376(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-200(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	3 50 19 is_stmt 0       # crypto.c:50:19
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -424(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.35.211, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -428(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.57.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-424(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$49, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.30.206, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	-376(%rbp), %r11        # 8-byte Reload
	movl	$0, (%rax,%r11,4)
.Ltmp95:
	.loc	3 49 27 is_stmt 1       # crypto.c:49:27
	movl	$1, (%rsp)
	movl	%r10d, -444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29.205, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.30.206, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-376(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	3 49 19 is_stmt 0       # crypto.c:49:19
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$49, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.36.212, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.30.206, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-472(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.36.212, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	-472(%rbp), %rdx        # 8-byte Reload
	movq	-320(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	sete	%bl
.Ltmp96:
	.loc	3 49 5                  # crypto.c:49:5
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bl, -497(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$49, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.53.230, %rsi
	movabsq	$.L.str.27.203, %rdx
	movabsq	$.L.str.37.213, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.27.203, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.36.212, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-497(%rbp), %bl         # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -528(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-497(%rbp), %bl         # 1-byte Reload
	testb	$1, %bl
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, -352(%rbp)        # 8-byte Spill
	jne	.LBB6_2
	jmp	.LBB6_3
.Ltmp97:
.Lfunc_end6:
	.size	gen_const_poly, .Lfunc_end6-gen_const_poly
	.cfi_endproc
                                        # -- End function
	.globl	keygen_secret           # -- Begin function keygen_secret
	.p2align	4, 0x90
	.type	keygen_secret,@function
keygen_secret:                          # @keygen_secret
.Lfunc_begin7:
	.loc	3 55 0 is_stmt 1        # crypto.c:55:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
.Ltmp98:
	.loc	3 55 24 prologue_end    # crypto.c:55:24
	movl	%edi, %eax
	movl	%eax, %r11d
	movl	%edi, -12(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -24(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-24(%rbp), %rcx         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$56, %eax
	movl	%eax, %edi
	movabsq	$.L.str.58.236, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: keygen_secret:size <- [DW_OP_constu 12, DW_OP_minus] [%rbp+0]
	.loc	3 56 12                 # crypto.c:56:12
	movl	$1, (%rsp)
	movl	%eax, -28(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$gen_binary_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15.192, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-12(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-40(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	-12(%rbp), %edi         # 4-byte Reload
	callq	gen_binary_poly
	movl	$19134, %edi            # imm = 0x4ABE
                                        # kill: def %rdi killed %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 56 5 is_stmt 0        # crypto.c:56:5
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$56, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.58.236, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.5.181, %rcx
	movl	$1, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -68(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.58.236, %rdi
	movl	$1, %ebx
	movl	%ebx, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-64(%rbp), %rax         # 8-byte Reload
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Ltmp99:
.Lfunc_end7:
	.size	keygen_secret, .Lfunc_end7-keygen_secret
	.cfi_endproc
                                        # -- End function
	.globl	keygen_pub1             # -- Begin function keygen_pub1
	.p2align	4, 0x90
	.type	keygen_pub1,@function
keygen_pub1:                            # @keygen_pub1
.Lfunc_begin8:
	.loc	3 59 0 is_stmt 1        # crypto.c:59:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$96, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.17.191, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.4.2, %r11
.Ltmp100:
	.loc	3 59 22 prologue_end    # crypto.c:59:22
	movl	%edi, %eax
	movl	%eax, %ebx
	movl	%edi, -20(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -24(%rbp)         # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rbx, %rdx
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-24(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-32(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$60, %eax
	movl	%eax, %edi
	movabsq	$.L.str.59.239, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: keygen_pub1:size <- [DW_OP_constu 20, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: keygen_pub1:mod <- [DW_OP_constu 24, DW_OP_minus] [%rbp+0]
	.loc	3 60 12                 # crypto.c:60:12
	movl	$1, (%rsp)
	movl	%eax, -36(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$gen_uniform_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.38.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-20(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-56(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-24(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-64(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	-20(%rbp), %edi         # 4-byte Reload
	movl	-24(%rbp), %esi         # 4-byte Reload
	callq	gen_uniform_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 60 5 is_stmt 0        # crypto.c:60:5
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$60, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.59.239, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.10.186, %rcx
	movl	$1, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -84(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.59.239, %rdi
	movl	$1, %r14d
	movl	%r14d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Ltmp101:
.Lfunc_end8:
	.size	keygen_pub1, .Lfunc_end8-keygen_pub1
	.cfi_endproc
                                        # -- End function
	.globl	keygen_pub0             # -- Begin function keygen_pub0
	.p2align	4, 0x90
	.type	keygen_pub0,@function
keygen_pub0:                            # @keygen_pub0
.Lfunc_begin9:
	.loc	3 64 0 is_stmt 1        # crypto.c:64:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %r9d
	movl	$64, %eax
	movl	%eax, %r10d
	movl	$1, %eax
	movl	%eax, %r11d
	movabsq	$.L.str.63.242, %rbx
	xorl	%eax, %eax
	movl	%eax, %r14d
	movabsq	$.L.str.4.2, %r15
.Ltmp102:
	.loc	3 64 23 prologue_end    # crypto.c:64:23
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r9, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%r10, %rsi
	movq	-48(%rbp), %r9          # 8-byte Reload
	movl	%edx, -56(%rbp)         # 4-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r14, %r9
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.66.243, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-64(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$65, %eax
	movl	%eax, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: keygen_pub0:a <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: keygen_pub0:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: keygen_pub0:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: keygen_pub0:secret <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: keygen_pub0:polymod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	.loc	3 65 14                 # crypto.c:65:14
	movl	$1, (%rsp)
	movl	%eax, -108(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$gen_normal_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.52.228, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edi
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	-52(%rbp), %edi         # 4-byte Reload
	callq	gen_normal_poly
	movl	$19134, %edi            # imm = 0x4ABE
                                        # kill: def %rdi killed %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 65 10 is_stmt 0       # crypto.c:65:10
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$66, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.61.246, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp103:
	#DEBUG_VALUE: keygen_pub0:e <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	.loc	3 66 5 is_stmt 1        # crypto.c:66:5
	movl	$1, (%rsp)
	movl	%r12d, -148(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$neg_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.62.247, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.63.242, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	-52(%rbp), %esi         # 4-byte Reload
	movl	-56(%rbp), %edx         # 4-byte Reload
	callq	neg_poly
	movl	$67, %edx
	movl	%edx, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	.loc	3 67 20                 # crypto.c:67:20
	movl	$1, (%rsp)
	movl	%r12d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$32, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-52(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, %rdi
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r12d        # 4-byte Reload
	addl	$-1, %r12d
	.loc	3 67 9 is_stmt 0        # crypto.c:67:9
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	movl	%r12d, -188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$68, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.64.248, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp104:
	#DEBUG_VALUE: keygen_pub0:deg <- [DW_OP_constu 188, DW_OP_minus] [%rbp+0]
	.loc	3 68 16 is_stmt 1       # crypto.c:68:16
	movl	$1, (%rsp)
	movl	%r12d, -192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polymul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.249, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.63.242, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-188(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.66.243, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-188(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	-188(%rbp), %esi        # 4-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movl	-188(%rbp), %ecx        # 4-byte Reload
	movl	-56(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-52(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, (%rsp)
	callq	polymul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.64.248, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 68 10 is_stmt 0       # crypto.c:68:10
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-208(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$69, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.68.250, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp105:
	#DEBUG_VALUE: keygen_pub0:tmp <- [DW_OP_constu 216, DW_OP_minus] [%rbp+0]
	.loc	3 69 5 is_stmt 1        # crypto.c:69:5
	movl	$1, (%rsp)
	movl	%r12d, -220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$neg_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.62.247, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-188(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movl	-188(%rbp), %esi        # 4-byte Reload
	movl	-56(%rbp), %edx         # 4-byte Reload
	callq	neg_poly
	movl	$70, %edx
	movl	%edx, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.31.207, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	.loc	3 70 14                 # crypto.c:70:14
	movl	$1, (%rsp)
	movl	%r12d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.64.248, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-188(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-188(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.39.214, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movl	-188(%rbp), %esi        # 4-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movl	-188(%rbp), %ecx        # 4-byte Reload
	movl	-56(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-52(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 70 10 is_stmt 0       # crypto.c:70:10
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$71, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.60.245, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.70.252, %rcx
	movl	$1, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp106:
	#DEBUG_VALUE: keygen_pub0:b <- [DW_OP_constu 264, DW_OP_minus] [%rbp+0]
	.loc	3 71 5 is_stmt 1        # crypto.c:71:5
	movl	$1, (%rsp)
	movl	%r12d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.31.207, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-264(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.60.245, %rdi
	movl	$1, %r12d
	movl	%r12d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-264(%rbp), %rax        # 8-byte Reload
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp107:
.Lfunc_end9:
	.size	keygen_pub0, .Lfunc_end9-keygen_pub0
	.cfi_endproc
                                        # -- End function
	.globl	encrypt                 # -- Begin function encrypt
	.p2align	4, 0x90
	.type	encrypt,@function
encrypt:                                # @encrypt
.Lfunc_begin10:
	.loc	3 75 0                  # crypto.c:75:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	16(%rbp), %eax
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %r11d
	movl	$64, %r10d
	movl	%r10d, %ebx
	movl	$1, %r10d
	movl	%r10d, %r14d
	movabsq	$.L.str.78.255, %r15
	xorl	%r10d, %r10d
	movl	%r10d, %r12d
	movabsq	$.L.str.4.2, %r13
.Ltmp108:
	.loc	3 74 20 prologue_end    # crypto.c:74:20
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	-48(%rbp), %r11         # 8-byte Reload
	movl	%edx, -60(%rbp)         # 4-byte Spill
	movq	%r11, %rdx
	movl	%ecx, -64(%rbp)         # 4-byte Spill
	movq	%r14, %rcx
	movl	%r8d, -68(%rbp)         # 4-byte Spill
	movq	%r15, %r8
	movq	%r9, -80(%rbp)          # 8-byte Spill
	movq	%r12, %r9
	movq	%r13, (%rsp)
	movl	%eax, -84(%rbp)         # 4-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.82.256, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-56(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-96(%rbp), %rbx         # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$76, %eax
	movl	%eax, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: encrypt:pub0 <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: encrypt:pub1 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: encrypt:size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: encrypt:q <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: encrypt:t <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: encrypt:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: encrypt:val <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	.loc	3 76 21                 # crypto.c:76:21
	movl	$1, (%rsp)
	movl	%eax, -140(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$gen_const_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53.230, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -152(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-152(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-168(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	-60(%rbp), %edi         # 4-byte Reload
	movl	-84(%rbp), %esi         # 4-byte Reload
	callq	gen_const_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 76 10 is_stmt 0       # crypto.c:76:10
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-176(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$77, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.72.260, %rcx
	movl	$18, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp109:
	#DEBUG_VALUE: encrypt:val_poly <- [DW_OP_constu 184, DW_OP_minus] [%rbp+0]
	.loc	3 77 18 is_stmt 1       # crypto.c:77:18
	movl	$1, (%rsp)
	movl	%r10d, -188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-68(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %edi
	movl	%edi, %edx
	movq	%rax, %rdi
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.72.260, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-68(%rbp), %r10d        # 4-byte Reload
	idivl	%r10d
	.loc	3 77 9 is_stmt 0        # crypto.c:77:9
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%r11, %rdx
	movq	-208(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -212(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$78, %eax
	movl	%eax, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.68.250, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp110:
	#DEBUG_VALUE: encrypt:delta <- [DW_OP_constu 212, DW_OP_minus] [%rbp+0]
	.loc	3 78 5 is_stmt 1        # crypto.c:78:5
	movl	$1, (%rsp)
	movl	%eax, -216(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$5, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$scalar_mul, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75.261, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-184(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-224(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-232(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.72.260, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-240(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-248(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movl	-60(%rbp), %esi         # 4-byte Reload
	movl	-212(%rbp), %edx        # 4-byte Reload
	movl	-64(%rbp), %ecx         # 4-byte Reload
	callq	scalar_mul
	movl	$79, %eax
	movl	%eax, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.64.248, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 79 15                 # crypto.c:79:15
	movl	$1, (%rsp)
	movl	%eax, -252(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$gen_normal_poly, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.52.228, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -264(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-264(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-272(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	-60(%rbp), %edi         # 4-byte Reload
	callq	gen_normal_poly
	movl	$19134, %edi            # imm = 0x4ABE
                                        # kill: def %rdi killed %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.64.248, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 79 10 is_stmt 0       # crypto.c:79:10
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$80, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.31.207, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp111:
	#DEBUG_VALUE: encrypt:e1 <- [DW_OP_constu 288, DW_OP_minus] [%rbp+0]
	.loc	3 80 15 is_stmt 1       # crypto.c:80:15
	movl	$1, (%rsp)
	movl	%r10d, -292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$gen_normal_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.52.228, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %edi
	movl	%edi, %edx
	movq	%rax, %rdi
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	-60(%rbp), %edi         # 4-byte Reload
	callq	gen_normal_poly
	movl	$19134, %edi            # imm = 0x4ABE
                                        # kill: def %rdi killed %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 80 10 is_stmt 0       # crypto.c:80:10
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-312(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$81, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.76.262, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp112:
	#DEBUG_VALUE: encrypt:e2 <- [DW_OP_constu 320, DW_OP_minus] [%rbp+0]
	.loc	3 81 14 is_stmt 1       # crypto.c:81:14
	movl	$1, (%rsp)
	movl	%r10d, -324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$gen_binary_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.15.192, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %edi
	movl	%edi, %edx
	movq	%rax, %rdi
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	-60(%rbp), %edi         # 4-byte Reload
	callq	gen_binary_poly
	movl	$19134, %edi            # imm = 0x4ABE
                                        # kill: def %rdi killed %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.76.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 81 10 is_stmt 0       # crypto.c:81:10
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-344(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$82, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp113:
	#DEBUG_VALUE: encrypt:u <- [DW_OP_constu 352, DW_OP_minus] [%rbp+0]
	.loc	3 82 19 is_stmt 1       # crypto.c:82:19
	movl	$1, (%rsp)
	movl	%r10d, -356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %edi
	movl	%edi, %edx
	movq	%rax, %rdi
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	.loc	3 82 9 is_stmt 0        # crypto.c:82:9
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$83, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.77.263, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp114:
	#DEBUG_VALUE: encrypt:deg <- [DW_OP_constu 380, DW_OP_minus] [%rbp+0]
	.loc	3 83 17 is_stmt 1       # crypto.c:83:17
	movl	$1, (%rsp)
	movl	%r10d, -384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polymul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.249, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.78.255, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.76.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	-380(%rbp), %esi        # 4-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movl	-380(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polymul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.77.263, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 83 10 is_stmt 0       # crypto.c:83:10
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-400(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$84, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.79.264, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp115:
	#DEBUG_VALUE: encrypt:mul1 <- [DW_OP_constu 408, DW_OP_minus] [%rbp+0]
	.loc	3 84 17 is_stmt 1       # crypto.c:84:17
	movl	$1, (%rsp)
	movl	%r10d, -412(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.77.263, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-408(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.64.248, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-288(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-408(%rbp), %rdi        # 8-byte Reload
	movl	-380(%rbp), %esi        # 4-byte Reload
	movq	-288(%rbp), %rdx        # 8-byte Reload
	movl	-380(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.79.264, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 84 10 is_stmt 0       # crypto.c:84:10
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-432(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$85, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.80.265, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp116:
	#DEBUG_VALUE: encrypt:add1 <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	.loc	3 85 16 is_stmt 1       # crypto.c:85:16
	movl	$1, (%rsp)
	movl	%r10d, -444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.79.264, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-440(%rbp), %rdi        # 8-byte Reload
	movl	-380(%rbp), %esi        # 4-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movl	-380(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.80.265, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 85 10 is_stmt 0       # crypto.c:85:10
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-464(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.81.266, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp117:
	#DEBUG_VALUE: encrypt:ct0 <- [DW_OP_constu 472, DW_OP_minus] [%rbp+0]
	.loc	3 86 17 is_stmt 1       # crypto.c:86:17
	movl	$1, (%rsp)
	movl	%r10d, -476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polymul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.249, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.82.256, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.76.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-380(%rbp), %esi        # 4-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movl	-380(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polymul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.81.266, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 86 10 is_stmt 0       # crypto.c:86:10
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-496(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -504(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$87, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.83.267, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp118:
	#DEBUG_VALUE: encrypt:mul2 <- [DW_OP_constu 504, DW_OP_minus] [%rbp+0]
	.loc	3 87 16 is_stmt 1       # crypto.c:87:16
	movl	$1, (%rsp)
	movl	%r10d, -508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.81.266, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-504(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-380(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-504(%rbp), %rdi        # 8-byte Reload
	movl	-380(%rbp), %esi        # 4-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movl	-380(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.83.267, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 87 10 is_stmt 0       # crypto.c:87:10
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -536(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.84.268, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp119:
	#DEBUG_VALUE: encrypt:ct1 <- [DW_OP_constu 536, DW_OP_minus] [%rbp+0]
	.loc	3 88 28 is_stmt 1       # crypto.c:88:28
	movl	$1, (%rsp)
	movl	%r10d, -540(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$malloc, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$16, %r10d
	movl	%r10d, %edx
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r10d
	movl	%r10d, %edi
	callq	malloc
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.84.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 88 20 is_stmt 0       # crypto.c:88:20
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-560(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$47, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -572(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.84.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-568(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.84.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-568(%rbp), %rdx        # 8-byte Reload
	.loc	3 88 11                 # crypto.c:88:11
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$89, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.85.269, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp120:
	#DEBUG_VALUE: encrypt:cipher <- [DW_OP_constu 592, DW_OP_minus] [%rbp+0]
	.loc	3 89 15 is_stmt 1       # crypto.c:89:15
	movl	$1, (%rsp)
	movl	%r10d, -596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.84.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-592(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.80.265, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-472(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$89, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.86.270, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	-472(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rax)
	.loc	3 89 22 is_stmt 0       # crypto.c:89:22
	movl	$1, (%rsp)
	movl	%r10d, -612(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.84.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-568(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.270, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-568(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$89, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.9.185, %rcx
	movl	$47, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.86.270, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.270, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	.loc	3 89 32                 # crypto.c:89:32
	movq	%rdx, -664(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$89, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.87.271, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -668(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.86.270, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.83.267, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-536(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$90, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.71.259, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.88.272, %rcx
	movl	$1, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	-536(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, 8(%rax)
	.loc	3 90 5 is_stmt 1        # crypto.c:90:5
	movl	$1, (%rsp)
	movl	%r10d, -684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.84.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-592(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -696(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.71.259, %rdi
	movl	$1, %r10d
	movl	%r10d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-592(%rbp), %rax        # 8-byte Reload
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp121:
.Lfunc_end10:
	.size	encrypt, .Lfunc_end10-encrypt
	.cfi_endproc
                                        # -- End function
	.globl	decrypt                 # -- Begin function decrypt
	.p2align	4, 0x90
	.type	decrypt,@function
decrypt:                                # @decrypt
.Lfunc_begin11:
	.loc	3 94 0                  # crypto.c:94:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	16(%rbp), %rax
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %r11d
	movl	$64, %r10d
	movl	%r10d, %ebx
	movl	$1, %r10d
	movl	%r10d, %r14d
	movabsq	$.L.str.91.275, %r15
	xorl	%r10d, %r10d
	movl	%r10d, %r12d
	movabsq	$.L.str.4.2, %r13
.Ltmp122:
	.loc	3 93 18 prologue_end    # crypto.c:93:18
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%rbx, %rsi
	movq	-48(%rbp), %r11         # 8-byte Reload
	movl	%edx, -56(%rbp)         # 4-byte Spill
	movq	%r11, %rdx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	movq	%r14, %rcx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	movq	%r15, %r8
	movq	%r9, -80(%rbp)          # 8-byte Spill
	movq	%r12, %r9
	movq	%r13, (%rsp)
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.92.276, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.90.277, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: decrypt:secretKey <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: decrypt:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: decrypt:q <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: decrypt:t <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: decrypt:polymod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: decrypt:cipher0 <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: decrypt:cipher1 <- [DW_OP_constu 88, DW_OP_minus] [%rbp+0]
	.loc	3 95 20                 # crypto.c:95:20
	movl	$1, (%rsp)
	movl	%r10d, -92(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %edi
	movl	%edi, %edx
	movq	%rax, %rdi
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r10d        # 4-byte Reload
	addl	$-1, %r10d
	.loc	3 95 9 is_stmt 0        # crypto.c:95:9
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$96, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp123:
	#DEBUG_VALUE: decrypt:deg <- [DW_OP_constu 116, DW_OP_minus] [%rbp+0]
	.loc	3 96 17 is_stmt 1       # crypto.c:96:17
	movl	$1, (%rsp)
	movl	%r10d, -120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polymul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.249, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.90.277, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-116(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.91.275, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-116(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-116(%rbp), %esi        # 4-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	-116(%rbp), %ecx        # 4-byte Reload
	movl	-56(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polymul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 96 10 is_stmt 0       # crypto.c:96:10
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$97, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.64.248, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp124:
	#DEBUG_VALUE: decrypt:mul1 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	.loc	3 97 22 is_stmt 1       # crypto.c:97:22
	movl	$1, (%rsp)
	movl	%r10d, -148(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-116(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.92.276, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-116(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movl	-116(%rbp), %esi        # 4-byte Reload
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movl	-116(%rbp), %ecx        # 4-byte Reload
	movl	-56(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.64.248, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 97 10 is_stmt 0       # crypto.c:97:10
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-168(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$98, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.16.193, %rcx
	movl	$42, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp125:
	#DEBUG_VALUE: decrypt:scaled_pt <- [DW_OP_constu 176, DW_OP_minus] [%rbp+0]
	.loc	3 98 24 is_stmt 1       # crypto.c:98:24
	movl	$1, (%rsp)
	movl	%r10d, -180(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.73.258, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, %rdi
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.16.193, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movl	-60(%rbp), %r10d        # 4-byte Reload
	cvtsi2sdl	%r10d, %xmm0
	.loc	3 98 37 is_stmt 0       # crypto.c:98:37
	movsd	%xmm0, -200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$98, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.93.279, %rcx
	movl	$42, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.74.257, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, %rdi
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.93.279, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movl	-56(%rbp), %r10d        # 4-byte Reload
	cvtsi2sdl	%r10d, %xmm0
	.loc	3 98 35                 # crypto.c:98:35
	movsd	%xmm0, -224(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$98, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.72.260, %rcx
	movl	$19, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -228(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.93.279, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.4.2, %r9
	movsd	-224(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	trace_logger_log_double
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.16.193, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movq	%rax, %rdi
	movsd	-200(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.72.260, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movsd	-200(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	-224(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	divsd	%xmm1, %xmm0
	.loc	3 98 12                 # crypto.c:98:12
	movsd	%xmm0, -240(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$99, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp126:
	#DEBUG_VALUE: decrypt:delta_inv <- [DW_OP_constu 240, DW_OP_minus] [%rbp+0]
	.loc	3 99 31 is_stmt 1       # crypto.c:99:31
	movl	$1, (%rsp)
	movl	%r10d, -244(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.64.248, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.2.180, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %r10d
	.loc	3 99 22 is_stmt 0       # crypto.c:99:22
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -260(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$99, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.94.280, %rcx
	movl	$42, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -264(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.2.180, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-260(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, %rdi
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.94.280, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movl	-260(%rbp), %r10d       # 4-byte Reload
	cvtsi2sdl	%r10d, %xmm0
	.loc	3 99 12                 # crypto.c:99:12
	movsd	%xmm0, -280(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.18.194, %rcx
	movl	$16, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp127:
	#DEBUG_VALUE: decrypt:enc_val <- [DW_OP_constu 280, DW_OP_minus] [%rbp+0]
	.loc	3 100 35 is_stmt 1      # crypto.c:100:35
	movl	$1, (%rsp)
	movl	%r10d, -284(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.94.280, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.4.2, %r9
	movsd	-280(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	trace_logger_log_double
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.72.260, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movq	%rax, %rdi
	movsd	-240(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.18.194, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movsd	-240(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	-280(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	.loc	3 100 22 is_stmt 0      # crypto.c:100:22
	movsd	%xmm0, -296(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.77.263, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$round, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.95.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.18.194, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movq	%rax, %rdi
	movsd	-296(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.77.263, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.4.2, %r9
	movsd	-296(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rdi, -312(%rbp)        # 8-byte Spill
	movq	%rsi, -320(%rbp)        # 8-byte Spill
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%r8, -344(%rbp)         # 8-byte Spill
	movq	%r9, -352(%rbp)         # 8-byte Spill
	callq	round
	.loc	3 100 16                # crypto.c:100:16
	movq	-312(%rbp), %rdi        # 8-byte Reload
	movq	-320(%rbp), %rsi        # 8-byte Reload
	movsd	%xmm0, -360(%rbp)       # 8-byte Spill
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	-352(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.96.282, %rcx
	movl	$40, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.77.263, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.4.2, %r9
	movq	%rax, %rdi
	movsd	-360(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.96.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movsd	-360(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cvttsd2si	%xmm0, %r10d
	.loc	3 100 48                # crypto.c:100:48
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -368(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.33.209, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -372(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.96.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-368(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edx
	movq	%rax, %rdi
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-368(%rbp), %r10d       # 4-byte Reload
	movq	%rax, -392(%rbp)        # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-56(%rbp), %r11d        # 4-byte Reload
	idivl	%r11d
	.loc	3 100 9                 # crypto.c:100:9
	movl	%edx, %r10d
	movl	%r10d, %ebx
	movl	%edx, -396(%rbp)        # 4-byte Spill
	movq	%rbx, %rdx
	movq	-392(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$101, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.89.278, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.97.283, %rcx
	movl	$1, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp128:
	#DEBUG_VALUE: decrypt:ret <- [DW_OP_constu 396, DW_OP_minus] [%rbp+0]
	.loc	3 101 5 is_stmt 1       # crypto.c:101:5
	movl	$1, (%rsp)
	movl	%r10d, -400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %ecx
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.33.209, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-396(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r11d
	movl	%r11d, %edi
	movq	%rdi, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-408(%rbp), %rbx        # 8-byte Reload
	movq	%rdx, -416(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-416(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%rsp)
	callq	trace_logger_log_int
	movabsq	$.L.str.89.278, %rdi
	movl	$1, %r10d
	movl	%r10d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movl	-396(%rbp), %ecx        # 4-byte Reload
	movl	%ecx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp129:
.Lfunc_end11:
	.size	decrypt, .Lfunc_end11-decrypt
	.cfi_endproc
                                        # -- End function
	.globl	plain_add               # -- Begin function plain_add
	.p2align	4, 0x90
	.type	plain_add,@function
plain_add:                              # @plain_add
.Lfunc_begin12:
	.loc	3 104 0                 # crypto.c:104:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %r10d
	movl	$64, %eax
	movl	%eax, %r11d
	movl	$1, %eax
	movl	%eax, %ebx
	movabsq	$.L.str.92.276, %r14
	xorl	%eax, %eax
	movl	%eax, %r15d
	movabsq	$.L.str.4.2, %r12
.Ltmp130:
	.loc	3 104 21 prologue_end   # crypto.c:104:21
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r10, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%r11, %rsi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movl	%edx, -56(%rbp)         # 4-byte Spill
	movq	%r10, %rdx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	movq	%rbx, %rcx
	movl	%r8d, -64(%rbp)         # 4-byte Spill
	movq	%r14, %r8
	movq	%r9, -72(%rbp)          # 8-byte Spill
	movq	%r15, %r9
	movq	%r12, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %r10d
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %r10d
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %r10d
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %r10d
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-104(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$105, %eax
	movl	%eax, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: plain_add:cipher0 <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_add:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_add:val <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_add:q <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_add:t <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_add:polymod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	.loc	3 105 19                # crypto.c:105:19
	movl	$1, (%rsp)
	movl	%eax, -116(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r10
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	movq	-128(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edi
	movq	%rdi, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -144(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-144(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	addl	$-1, %eax
	.loc	3 105 9 is_stmt 0       # crypto.c:105:9
	movl	%eax, %r13d
	movl	%r13d, %r10d
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -156(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$106, %eax
	movl	%eax, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.72.260, %rcx
	movl	$18, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp131:
	#DEBUG_VALUE: plain_add:deg <- [DW_OP_constu 156, DW_OP_minus] [%rbp+0]
	.loc	3 106 18 is_stmt 1      # crypto.c:106:18
	movl	$1, (%rsp)
	movl	%eax, -160(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %r10d
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74.257, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edi
	movq	%rdi, -176(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-176(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-184(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.72.260, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	cltd
	movl	-64(%rbp), %r13d        # 4-byte Reload
	idivl	%r13d
	.loc	3 106 9 is_stmt 0       # crypto.c:106:9
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%r11, %rdx
	movq	-192(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -196(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$107, %eax
	movl	%eax, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.33.209, %rcx
	movl	$21, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp132:
	#DEBUG_VALUE: plain_add:delta <- [DW_OP_constu 196, DW_OP_minus] [%rbp+0]
	.loc	3 107 47 is_stmt 1      # crypto.c:107:47
	movl	$1, (%rsp)
	movl	%eax, -200(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-208(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.54.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -216(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-224(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	cltd
	movl	-64(%rbp), %r10d        # 4-byte Reload
	idivl	%r10d
	.loc	3 107 23 is_stmt 0      # crypto.c:107:23
	movl	%edx, %r13d
	movl	%r13d, %r11d
	movl	%edx, -236(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-232(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$107, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$gen_const_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.53.230, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edi
	movq	%rdi, -248(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-248(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-256(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-236(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %r11d
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-264(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	-52(%rbp), %edi         # 4-byte Reload
	movl	-236(%rbp), %esi        # 4-byte Reload
	callq	gen_const_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 107 10                # crypto.c:107:10
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-272(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$108, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.68.250, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp133:
	#DEBUG_VALUE: plain_add:plain_poly <- [DW_OP_constu 280, DW_OP_minus] [%rbp+0]
	.loc	3 108 5 is_stmt 1       # crypto.c:108:5
	movl	$1, (%rsp)
	movl	%r10d, -284(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$5, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$scalar_mul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.75.261, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-296(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-156(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.72.260, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-196(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movl	-156(%rbp), %esi        # 4-byte Reload
	movl	-196(%rbp), %edx        # 4-byte Reload
	movl	-60(%rbp), %ecx         # 4-byte Reload
	callq	scalar_mul
	movl	$109, %ecx
	movl	%ecx, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.64.248, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	3 109 20                # crypto.c:109:20
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.92.276, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-156(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-156(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	-156(%rbp), %esi        # 4-byte Reload
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movl	-156(%rbp), %ecx        # 4-byte Reload
	movl	-60(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.64.248, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 109 10 is_stmt 0      # crypto.c:109:10
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-320(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$110, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.98.286, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.70.252, %rcx
	movl	$1, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp134:
	#DEBUG_VALUE: plain_add:new_ct0 <- [DW_OP_constu 328, DW_OP_minus] [%rbp+0]
	.loc	3 110 5 is_stmt 1       # crypto.c:110:5
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.64.248, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.98.286, %rdi
	movl	$1, %r10d
	movl	%r10d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-328(%rbp), %rax        # 8-byte Reload
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp135:
.Lfunc_end12:
	.size	plain_add, .Lfunc_end12-plain_add
	.cfi_endproc
                                        # -- End function
	.globl	plain_mul               # -- Begin function plain_mul
	.p2align	4, 0x90
	.type	plain_mul,@function
plain_mul:                              # @plain_mul
.Lfunc_begin13:
	.loc	3 114 0                 # crypto.c:114:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$328, %rsp              # imm = 0x148
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	16(%rbp), %rax
	movabsq	$.L.str.99.289, %r10
	xorl	%r11d, %r11d
	movl	%r11d, %ebx
	movl	$1, %r11d
.Ltmp136:
	.loc	3 113 22 prologue_end   # crypto.c:113:22
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rbx, %rsi
	movl	%edx, -44(%rbp)         # 4-byte Spill
	movl	%r11d, %edx
	movl	%ecx, -48(%rbp)         # 4-byte Spill
	movl	%r11d, %ecx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%r9d, -60(%rbp)         # 4-byte Spill
	movl	%r8d, -64(%rbp)         # 4-byte Spill
	callq	trace_logger_update_status
	movabsq	$.L.str.99.289, %rdi
	movl	$7, %ecx
	movl	%ecx, %esi
	callq	trace_logger_log_entry
	movl	$1, %ecx
	movl	%ecx, %eax
	movl	$64, %ecx
	movl	%ecx, %esi
	movabsq	$.L.str.92.276, %r8
	xorl	%ecx, %ecx
	movl	%ecx, %r9d
	movabsq	$.L.str.4.2, %rdi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-32(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.90.277, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.54.229, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-48(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$7, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$115, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	#DEBUG_VALUE: plain_mul:cipher0 <- [DW_OP_constu 32, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_mul:cipher1 <- [DW_OP_constu 40, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_mul:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_mul:val <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_mul:q <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_mul:t <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: plain_mul:polymod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	.loc	3 115 20                # crypto.c:115:20
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-44(%rbp), %r11d        # 4-byte Reload
	addl	$-1, %r11d
	.loc	3 115 9 is_stmt 0       # crypto.c:115:9
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r11d, -92(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$116, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.33.209, %rcx
	movl	$21, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
.Ltmp137:
	#DEBUG_VALUE: plain_mul:deg <- [DW_OP_constu 92, DW_OP_minus] [%rbp+0]
	.loc	3 116 46 is_stmt 1      # crypto.c:116:46
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.54.229, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-48(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-48(%rbp), %r11d        # 4-byte Reload
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movl	%r11d, %eax
	cltd
	movl	-60(%rbp), %r14d        # 4-byte Reload
	idivl	%r14d
	.loc	3 116 23 is_stmt 0      # crypto.c:116:23
	movl	%edx, %r15d
	movl	%r15d, %r10d
	movl	%edx, -116(%rbp)        # 4-byte Spill
	movq	%r10, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$116, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$gen_const_poly, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.53.230, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %ecx
	movl	$32, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.42.220, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-92(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edi
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.33.209, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-116(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -144(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	-92(%rbp), %edi         # 4-byte Reload
	movl	-116(%rbp), %esi        # 4-byte Reload
	callq	gen_const_poly
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 116 10                # crypto.c:116:10
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$117, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.64.248, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
.Ltmp138:
	#DEBUG_VALUE: plain_mul:plain_poly <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	.loc	3 117 20 is_stmt 1      # crypto.c:117:20
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polymul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.249, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.92.276, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-32(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-92(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-92(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movl	-92(%rbp), %esi         # 4-byte Reload
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movl	-92(%rbp), %ecx         # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-56(%rbp), %r9          # 8-byte Reload
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	polymul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.64.248, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 117 10 is_stmt 0      # crypto.c:117:10
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-176(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$118, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.31.207, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
.Ltmp139:
	#DEBUG_VALUE: plain_mul:new_ct0 <- [DW_OP_constu 184, DW_OP_minus] [%rbp+0]
	.loc	3 118 20 is_stmt 1      # crypto.c:118:20
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polymul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.249, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.90.277, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-92(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-92(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movl	-92(%rbp), %esi         # 4-byte Reload
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movl	-92(%rbp), %ecx         # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-56(%rbp), %r9          # 8-byte Reload
	movl	-44(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	polymul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.31.207, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 118 10 is_stmt 0      # crypto.c:118:10
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$119, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.76.262, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
.Ltmp140:
	#DEBUG_VALUE: plain_mul:new_ct1 <- [DW_OP_constu 208, DW_OP_minus] [%rbp+0]
	.loc	3 119 25 is_stmt 1      # crypto.c:119:25
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$malloc, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$16, %r11d
	movl	%r11d, %edx
	xorl	%r11d, %r11d
	movl	%r11d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r11d
	movl	%r11d, %edi
	callq	malloc
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.76.262, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 119 17 is_stmt 0      # crypto.c:119:17
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$119, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$47, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.76.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-232(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.76.262, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-232(%rbp), %rdx        # 8-byte Reload
	.loc	3 119 11                # crypto.c:119:11
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$120, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.100.290, %rcx
	movl	$31, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
.Ltmp141:
	#DEBUG_VALUE: plain_mul:ret <- [DW_OP_constu 248, DW_OP_minus] [%rbp+0]
	.loc	3 120 12 is_stmt 1      # crypto.c:120:12
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-248(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.64.248, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$120, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.101.291, %rcx
	movl	$32, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	-184(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rax)
	.loc	3 120 23 is_stmt 0      # crypto.c:120:23
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.76.262, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-232(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.101.291, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-232(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$120, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.9.185, %rcx
	movl	$47, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.101.291, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.101.291, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-280(%rbp), %rdx        # 8-byte Reload
	.loc	3 120 30                # crypto.c:120:30
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$120, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.97.283, %rcx
	movl	$31, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.101.291, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.31.207, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$121, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.11.187, %rcx
	movl	$47, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	-208(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rax)
	.loc	3 121 10 is_stmt 1      # crypto.c:121:10
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	.loc	3 121 5 is_stmt 0       # crypto.c:121:5
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$121, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.102.292, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$free, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.13.189, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	-320(%rbp), %rdi        # 8-byte Reload
	callq	free
	movl	$122, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.99.289, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.103.293, %rcx
	movl	$1, %r11d
	movl	%r11d, %r8d
	movl	$1, %r9d
	.loc	3 122 5 is_stmt 1       # crypto.c:122:5
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.76.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-248(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.99.289, %rdi
	movl	$1, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %edx
	movl	%r11d, %ecx
	callq	trace_logger_update_status
	movq	-248(%rbp), %rax        # 8-byte Reload
	addq	$328, %rsp              # imm = 0x148
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp142:
.Lfunc_end13:
	.size	plain_mul, .Lfunc_end13-plain_mul
	.cfi_endproc
                                        # -- End function
	.globl	crypto_add              # -- Begin function crypto_add
	.p2align	4, 0x90
	.type	crypto_add,@function
crypto_add:                             # @crypto_add
.Lfunc_begin14:
	.loc	3 125 0                 # crypto.c:125:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$568, %rsp              # imm = 0x238
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %r9d
	movl	$64, %eax
	movl	%eax, %r10d
	movl	$1, %eax
	movl	%eax, %r11d
	movabsq	$.L.str.90.277, %rbx
	xorl	%eax, %eax
	movl	%eax, %r14d
	movabsq	$.L.str.4.2, %r15
.Ltmp143:
	.loc	3 125 24 prologue_end   # crypto.c:125:24
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	-48(%rbp), %r9          # 8-byte Reload
	movl	%edx, -60(%rbp)         # 4-byte Spill
	movq	%r9, %rdx
	movl	%ecx, -64(%rbp)         # 4-byte Spill
	movq	%r11, %rcx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r14, %r9
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.105.296, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$126, %eax
	movl	%eax, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.42.220, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: crypto_add:cipher1 <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: crypto_add:cipher2 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: crypto_add:size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: crypto_add:q <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: crypto_add:polymod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	.loc	3 126 19                # crypto.c:126:19
	movl	$1, (%rsp)
	movl	%eax, -108(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %r10
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	movq	-120(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edi
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	addl	$-1, %eax
	.loc	3 126 9 is_stmt 0       # crypto.c:126:9
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -144(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$127, %eax
	movl	%eax, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp144:
	#DEBUG_VALUE: crypto_add:deg <- [DW_OP_constu 148, DW_OP_minus] [%rbp+0]
	.loc	3 127 28 is_stmt 1      # crypto.c:127:28
	movl	$1, (%rsp)
	movl	%eax, -152(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.90.277, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.2.180, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %r11
	.loc	3 127 45 is_stmt 0      # crypto.c:127:45
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-168(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -176(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$127, %eax
	movl	%eax, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.9.185, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -180(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.296, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-192(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %r11
	.loc	3 127 20                # crypto.c:127:20
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-200(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -208(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$127, %eax
	movl	%eax, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -212(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.2.180, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-176(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-224(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-208(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-240(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-264(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	-176(%rbp), %rdi        # 8-byte Reload
	movl	-148(%rbp), %esi        # 4-byte Reload
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movl	-148(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 127 10                # crypto.c:127:10
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-280(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$128, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.57.233, %rcx
	movl	$32, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp145:
	#DEBUG_VALUE: crypto_add:new_ct0 <- [DW_OP_constu 288, DW_OP_minus] [%rbp+0]
	.loc	3 128 28 is_stmt 1      # crypto.c:128:28
	movl	$1, (%rsp)
	movl	%r12d, -292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.90.277, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.57.233, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$128, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.11.187, %rcx
	movl	$30, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.57.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.11.187, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	8(%rdx), %r10
	.loc	3 128 45 is_stmt 0      # crypto.c:128:45
	movq	%r10, %rdx
	movq	%rax, (%rsp)
	movq	%r10, -344(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$128, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.106.298, %rcx
	movl	$32, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.105.296, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.106.298, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$128, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.107.299, %rcx
	movl	$30, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.106.298, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.107.299, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	8(%rdx), %r10
	.loc	3 128 20                # crypto.c:128:20
	movq	%r10, %rdx
	movq	%rax, (%rsp)
	movq	%r10, -400(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$128, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.77.263, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$polyadd, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.69.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.11.187, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-148(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.107.299, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.42.220, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-148(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$32, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.17.191, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-344(%rbp), %rdi        # 8-byte Reload
	movl	-148(%rbp), %esi        # 4-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movl	-148(%rbp), %ecx        # 4-byte Reload
	movl	-64(%rbp), %r8d         # 4-byte Reload
	movq	-72(%rbp), %r9          # 8-byte Reload
	movl	-60(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, (%rsp)
	callq	polyadd
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.77.263, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 128 10                # crypto.c:128:10
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-424(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$129, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.79.264, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp146:
	#DEBUG_VALUE: crypto_add:new_ct1 <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	3 129 25 is_stmt 1      # crypto.c:129:25
	movl	$1, (%rsp)
	movl	%r12d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$malloc, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.20.196, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$16, %r12d
	movl	%r12d, %edx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %r12d
	movl	%r12d, %edi
	callq	malloc
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.79.264, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rdx
	.loc	3 129 17 is_stmt 0      # crypto.c:129:17
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-456(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$129, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.108.300, %rcx
	movl	$47, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.79.264, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.79.264, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-464(%rbp), %rdx        # 8-byte Reload
	.loc	3 129 11                # crypto.c:129:11
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$130, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.68.250, %rcx
	movl	$31, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
.Ltmp147:
	#DEBUG_VALUE: crypto_add:ret <- [DW_OP_constu 488, DW_OP_minus] [%rbp+0]
	.loc	3 130 12 is_stmt 1      # crypto.c:130:12
	movl	$1, (%rsp)
	movl	%r12d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.79.264, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-288(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$130, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.109.301, %rcx
	movl	$32, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rax)
	.loc	3 130 23 is_stmt 0      # crypto.c:130:23
	movl	$1, (%rsp)
	movl	%r12d, -508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.79.264, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -528(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.109.301, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-464(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$130, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.110.302, %rcx
	movl	$47, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -540(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.109.301, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-536(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.109.301, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-536(%rbp), %rdx        # 8-byte Reload
	.loc	3 130 30                # crypto.c:130:30
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$130, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.111.303, %rcx
	movl	$31, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movl	$1, (%rsp)
	movl	%r12d, -564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.109.301, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-560(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.77.263, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$131, %r12d
	movl	%r12d, %edi
	movabsq	$.L.str.104.297, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.70.252, %rcx
	movl	$1, %r12d
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r12d
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rax)
	.loc	3 131 5 is_stmt 1       # crypto.c:131:5
	movl	$1, (%rsp)
	movl	%r12d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.79.264, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.104.297, %rdi
	movl	$1, %r12d
	movl	%r12d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-488(%rbp), %rax        # 8-byte Reload
	addq	$568, %rsp              # imm = 0x238
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp148:
.Lfunc_end14:
	.size	crypto_add, .Lfunc_end14-crypto_add
	.cfi_endproc
                                        # -- End function
	.globl	vector_mult             # -- Begin function vector_mult
	.p2align	4, 0x90
	.type	vector_mult,@function
vector_mult:                            # @vector_mult
.Lfunc_begin15:
	.loc	3 135 0                 # crypto.c:135:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1096, %rsp             # imm = 0x448
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	16(%rbp), %rax
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %r11d
	movl	$64, %r10d
	movl	%r10d, %ebx
	movl	$1, %r10d
	movl	%r10d, %r14d
	movabsq	$.L.str.3.1, %r15
	xorl	%r10d, %r10d
	movl	%r10d, %r12d
	movabsq	$.L.str.4.2, %r13
.Ltmp149:
	.loc	3 134 26 prologue_end   # crypto.c:134:26
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	-48(%rbp), %r11         # 8-byte Reload
	movl	%edx, -60(%rbp)         # 4-byte Spill
	movq	%r11, %rdx
	movl	%ecx, -64(%rbp)         # 4-byte Spill
	movq	%r14, %rcx
	movl	%r8d, -68(%rbp)         # 4-byte Spill
	movq	%r15, %r8
	movl	%r9d, -72(%rbp)         # 4-byte Spill
	movq	%r12, %r9
	movq	%r13, (%rsp)
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.130.304, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.132.305, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.114.306, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-68(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-72(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r10d
	movl	%r10d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.113.308, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
.Ltmp150:
	#DEBUG_VALUE: i <- 0
	.loc	3 136 19                # crypto.c:136:19
	movl	$1, (%rsp)
	movl	%r10d, -84(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22.198, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.114.306, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-64(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %edi
	movl	%edi, %edx
	movq	%rax, %rdi
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.113.308, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movl	-64(%rbp), %r10d        # 4-byte Reload
	cmpl	$0, %r10d
	setg	%dl
.Ltmp151:
	.loc	3 136 5 is_stmt 0       # crypto.c:136:5
	movb	%dl, %sil
	andb	$1, %sil
	movzbl	%sil, %esi
	movl	%esi, %r11d
	movq	%rax, %rsi
	movb	%dl, -105(%rbp)         # 1-byte Spill
	movq	%r11, %rdx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.1.179, %rdx
	movabsq	$.L.str.115.309, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -124(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.116.310, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.117.311, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.113.308, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-105(%rbp), %dl         # 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-105(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB15_2
.Ltmp152:
# %bb.1:                                # %._crit_edge42.thread
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movl	$139, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.117.311, %rdx
	movabsq	$.L.str.2.180, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 139 20 is_stmt 1      # crypto.c:139:20
	movl	$1, (%rsp)
	movl	%eax, -156(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-168(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.2.180, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %r11
	.loc	3 139 11 is_stmt 0      # crypto.c:139:11
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-176(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -184(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$140, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.117.311, %rdx
	movabsq	$.L.str.118.312, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp153:
	#DEBUG_VALUE: vector_mult:reduce <- undef
	#DEBUG_VALUE: i <- 1
	.loc	3 140 5 is_stmt 1       # crypto.c:140:5
	movl	$1, (%rsp)
	movl	%eax, -188(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	-208(%rbp), %r9         # 8-byte Reload
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	jmp	.LBB15_6
.Ltmp154:
.LBB15_2:                               # %.lr.ph41
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.116.310, %rdx
	movabsq	$.L.str.119.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -220(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.114.306, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-232(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-240(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
.Ltmp155:
	.loc	3 136 5 is_stmt 1       # crypto.c:136:5
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-248(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -256(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$136, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.116.310, %rdx
	movabsq	$.L.str.120.314, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -260(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.121.315, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -272(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	jmp	.LBB15_5
.Ltmp156:
.LBB15_3:                               # %._crit_edge42
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movl	$139, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.122.316, %rdx
	movabsq	$.L.str.123.317, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	3 139 20 is_stmt 1      # crypto.c:139:20
	movl	$1, (%rsp)
	movl	%eax, -292(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -304(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-304(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.123.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %r11
	.loc	3 139 11 is_stmt 0      # crypto.c:139:11
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-312(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -320(%rbp)        # 8-byte Spill
.Ltmp157:
	#DEBUG_VALUE: vector_mult:reduce <- [DW_OP_constu 320, DW_OP_minus] [%rbp+0]
	callq	trace_logger_log_ptr
	movl	$140, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.122.316, %rdx
	movabsq	$.L.str.124.318, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: vector_mult:reduce <- [DW_OP_constu 320, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- 1
.Ltmp158:
	.loc	3 140 19 is_stmt 1      # crypto.c:140:19
	movl	$1, (%rsp)
	movl	%eax, -324(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.22.198, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-336(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.114.306, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -344(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-344(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.124.318, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	setg	%r15b
.Ltmp159:
	.loc	3 140 5 is_stmt 0       # crypto.c:140:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %esi
	movq	%rsi, -360(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-368(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r15b, -369(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$140, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.122.316, %rdx
	movabsq	$.L.str.125.319, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -376(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.23.199, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -384(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-400(%rbp), %r9         # 8-byte Reload
	movq	-384(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rsi, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -416(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-424(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.124.318, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movb	-369(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-440(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-369(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	movq	-320(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	jne	.LBB15_4
	jmp	.LBB15_6
.LBB15_4:                               # %.lr.ph
	#DEBUG_VALUE: vector_mult:reduce <- [DW_OP_constu 320, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.25.201, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -444(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.114.306, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-456(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-464(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.4.2, %rdx
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	.loc	3 140 5                 # crypto.c:140:5
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-472(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -480(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$140, %eax
	movl	%eax, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.23.199, %rdx
	movabsq	$.L.str.26.202, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -484(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.126.320, %r8
	movabsq	$.L.str.4.2, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -496(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	jmp	.LBB15_7
.Ltmp160:
.LBB15_5:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.127.321, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp161:
	.loc	3 136 13 is_stmt 1      # crypto.c:136:13
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.128.322, %r8
	movabsq	$.L.str.121.315, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.116.310, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.127.321, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.116.310, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.34.210, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp162:
	#DEBUG_VALUE: i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	3 137 26                # crypto.c:137:26
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.127.321, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.107.299, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.34.210, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.107.299, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movq	(%rdx,%r11,8), %rbx
	movq	%rbx, %rdx
	movq	%rax, (%rsp)
	movq	%rbx, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.108.300, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.107.299, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.108.300, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	(%rdx), %r11
	.loc	3 137 35 is_stmt 0      # crypto.c:137:35
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -624(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.101.291, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -628(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.107.299, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.101.291, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-600(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.110.302, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.101.291, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-656(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.110.302, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	8(%rdx), %r11
	.loc	3 137 55                # crypto.c:137:55
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -680(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.129.323, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.127.321, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.130.304, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -696(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.129.323, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-56(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -704(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.131.324, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -708(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.129.323, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-704(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.131.324, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	3 137 16                # crypto.c:137:16
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -724(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.19.195, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$8, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$plain_mul, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.99.289, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.108.300, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.110.302, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-680(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.132.305, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.131.324, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-724(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-68(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.73.258, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-72(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$7, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	-624(%rbp), %rdi        # 8-byte Reload
	movq	-680(%rbp), %rsi        # 8-byte Reload
	movl	-60(%rbp), %edx         # 4-byte Reload
	movl	-724(%rbp), %ecx        # 4-byte Reload
	movl	-68(%rbp), %r8d         # 4-byte Reload
	movl	-72(%rbp), %r9d         # 4-byte Reload
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	plain_mul
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.19.195, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.4.2, %r11
	.loc	3 137 14                # crypto.c:137:14
	movq	%rax, %rdx
	movq	%r11, (%rsp)
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$137, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.133.325, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.34.210, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.19.195, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-744(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.128.322, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movq	-744(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rax,%r11,8)
.Ltmp163:
	.loc	3 136 30 is_stmt 1      # crypto.c:136:30
	movl	$1, (%rsp)
	movl	%r10d, -764(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.127.321, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.128.322, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	3 136 19 is_stmt 0      # crypto.c:136:19
	movq	%rdx, -792(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.134.326, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.119.313, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.128.322, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.134.326, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-256(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	sete	%r15b
.Ltmp164:
	.loc	3 136 5                 # crypto.c:136:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -817(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.121.315, %rdx
	movabsq	$.L.str.135.327, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -824(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.122.316, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-832(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.121.315, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.134.326, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-817(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-817(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%rax, -288(%rbp)        # 8-byte Spill
	jne	.LBB15_3
	jmp	.LBB15_5
.Ltmp165:
.LBB15_6:                               # %._crit_edge
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5                   # crypto.c:0:5
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.24.200, %rdx
	movabsq	$.L.str.136.328, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	3 143 5 is_stmt 1       # crypto.c:143:5
	movl	$1, (%rsp)
	movq	%rax, -856(%rbp)        # 8-byte Spill
	movl	%r10d, -860(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.137.329, %r8
	movabsq	$.L.str.126.320, %rcx
	movq	%rcx, -872(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.2.180, %r8
	movabsq	$.L.str.117.311, %rcx
	movq	%rcx, -880(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-880(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.123.317, %r8
	movabsq	$.L.str.122.316, %rcx
	movq	%rax, %rdi
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.136.328, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.122.316, %rax
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$143, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.24.200, %rdx
	movabsq	$.L.str.28.204, %rcx
	movl	$1, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -892(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.136.328, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.112.307, %rdi
	movl	$1, %r10d
	movl	%r10d, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-856(%rbp), %rax        # 8-byte Reload
	addq	$1096, %rsp             # imm = 0x448
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB15_7:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: vector_mult:reduce <- [DW_OP_constu 320, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:t <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:q <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:ar_size <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:poly_size <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: vector_mult:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	3 0 5 is_stmt 0         # crypto.c:0:5
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.29.205, %r8
	movl	$53, %r9d
	movl	%r9d, %r10d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	.loc	3 139 11 is_stmt 1      # crypto.c:139:11
	movq	%rcx, -912(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%r10, %r8
	movl	$1, (%rsp)
	movq	%rax, -920(%rbp)        # 8-byte Spill
	movl	%r11d, -924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.30.206, %r8
	movabsq	$.L.str.126.320, %rcx
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-936(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	xorl	%r11d, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.23.199, %rdx
	movq	%rax, %rdi
	movq	%rdx, -944(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.23.199, %rax
	movq	-912(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.138.330, %rcx
	movl	$53, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -948(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.137.329, %r8
	movabsq	$.L.str.126.320, %rcx
	movq	%rcx, -960(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-960(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	xorl	%r11d, %r11d
	movl	%r11d, %edx
	movabsq	$.L.str.123.317, %r8
	movabsq	$.L.str.23.199, %rcx
	movq	%rax, %rdi
	movq	%rcx, -968(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.138.330, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.23.199, %rax
	movq	-920(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$141, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.139.331, %rcx
	movl	$32, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp166:
	#DEBUG_VALUE: vector_mult:reduce <- [DW_OP_constu 920, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- [DW_OP_constu 912, DW_OP_minus] [%rbp+0]
	.loc	3 141 37                # crypto.c:141:37
	movl	$1, (%rsp)
	movl	%r11d, -972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.29.205, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-912(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.3.1, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.139.331, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-912(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	addq	%rdx, %r10
	movq	%r10, %rdx
	movq	%rax, (%rsp)
	movq	%r10, -992(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$141, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.140.332, %rcx
	movl	$30, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -996(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.139.331, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-992(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1008(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1008(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.140.332, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-912(%rbp), %r10        # 8-byte Reload
	movq	(%rdx,%r10,8), %rbx
	.loc	3 141 18 is_stmt 0      # crypto.c:141:18
	movq	%rbx, %rdx
	movq	%rax, (%rsp)
	movq	%rbx, -1016(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$141, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.137.329, %rcx
	movl	$54, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -1020(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$crypto_add, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.104.297, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.138.330, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-920(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.140.332, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-1016(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.132.305, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-60(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %r11d
	movl	%r11d, %edi
	movl	$32, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.74.257, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movl	-68(%rbp), %r11d        # 4-byte Reload
	movl	%r11d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %r11d
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.67.244, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	-920(%rbp), %rdi        # 8-byte Reload
	movq	-1016(%rbp), %rsi       # 8-byte Reload
	movl	-60(%rbp), %edx         # 4-byte Reload
	movl	-68(%rbp), %ecx         # 4-byte Reload
	movq	-80(%rbp), %r8          # 8-byte Reload
	callq	crypto_add
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.137.329, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.4.2, %r10
.Ltmp167:
	.loc	3 140 30 is_stmt 1      # crypto.c:140:30
	movq	%rax, %rdx
	movq	%r10, (%rsp)
	movq	%rax, -1040(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$140, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.30.206, %rcx
	movl	$11, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -1044(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.8.184, %r8
	movabsq	$.L.str.4.2, %rcx
	movq	%rcx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1056(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.29.205, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-912(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$64, %r11d
	movl	%r11d, %esi
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.30.206, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-912(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
.Ltmp168:
	.loc	3 139 11                # crypto.c:139:11
	movq	%rdx, -1072(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$140, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.36.212, %rcx
	movl	$51, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
.Ltmp169:
	#DEBUG_VALUE: vector_mult:reduce <- [DW_OP_constu 1040, DW_OP_minus] [%rbp+0]
	.loc	3 140 19                # crypto.c:140:19
	movl	$1, (%rsp)
	movl	%r11d, -1076(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.201, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.4.2, %rax
	movq	-480(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movl	$64, %r11d
	movl	%r11d, %esi
	movabsq	$.L.str.30.206, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	%rax, %rdi
	movq	-1072(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1088(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1088(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r11d           # imm = 0x4ABE
	movl	%r11d, %edi
	movl	$1, %r11d
	movl	%r11d, %eax
	movabsq	$.L.str.36.212, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movq	-1072(%rbp), %rdx       # 8-byte Reload
	movq	-480(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	sete	%r15b
.Ltmp170:
	.loc	3 140 5 is_stmt 0       # crypto.c:140:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r11d
	movl	%r11d, %edx
	movq	%rax, %rsi
	movq	%rcx, -1096(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -1097(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$140, %r11d
	movl	%r11d, %edi
	movabsq	$.L.str.112.307, %rsi
	movabsq	$.L.str.126.320, %rdx
	movabsq	$.L.str.141.333, %rcx
	movl	$2, %r11d
	movl	%r11d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movl	$1, (%rsp)
	movl	%r11d, -1104(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.24.200, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r11d
	movl	%r11d, %edi
	xorl	%r11d, %r11d
	movl	%r11d, %eax
	movl	$1, %r11d
	movl	%r11d, %ecx
	movabsq	$.L.str.126.320, %r8
	movabsq	$.L.str.4.2, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1120(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1120(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r11d
	movl	%r11d, %eax
	movabsq	$.L.str.36.212, %r8
	xorl	%r11d, %r11d
	movl	%r11d, %r9d
	movabsq	$.L.str.4.2, %rcx
	movb	-1097(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r11d
	movl	%r11d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1128(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1128(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1097(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-1040(%rbp), %rax       # 8-byte Reload
	movq	-1072(%rbp), %rcx       # 8-byte Reload
	movq	-1040(%rbp), %rdx       # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	jne	.LBB15_6
	jmp	.LBB15_7
.Ltmp171:
.Lfunc_end15:
	.size	vector_mult, .Lfunc_end15-vector_mult
	.cfi_endproc
                                        # -- End function
	.globl	free_poly               # -- Begin function free_poly
	.p2align	4, 0x90
	.type	free_poly,@function
free_poly:                              # @free_poly
.Lfunc_begin16:
	.file	4 "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt/poly.c"
	.loc	4 3 0 is_stmt 1         # poly.c:3:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
.Ltmp172:
	.loc	4 3 22 prologue_end     # poly.c:3:22
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rdx, -24(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-24(%rbp), %rcx         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.8.340, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: free_poly:x <- [DW_OP_constu 16, DW_OP_minus] [%rbp+0]
	.loc	4 6 13                  # poly.c:6:13
	movl	$1, (%rsp)
	movl	%eax, -28(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	movq	-40(%rbp), %r9          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.340, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	addq	$8, %r10
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-72(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -80(%rbp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$6, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -84(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8.340, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.340, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -112(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$6, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.13.343, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -116(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8.340, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	8(%r10), %r11
	.loc	4 6 5 is_stmt 0         # poly.c:6:5
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$6, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.14.344, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$free, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15.345, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	free
	movl	$7, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 7 10 is_stmt 1        # poly.c:7:10
	movl	$1, (%rsp)
	movl	%eax, -164(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-16(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-176(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-16(%rbp), %r10         # 8-byte Reload
	.loc	4 7 5 is_stmt 0         # poly.c:7:5
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-184(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -192(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$7, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.17.347, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -196(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$free, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15.345, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-208(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	free
	movl	$8, %eax
	movl	%eax, %edi
	movabsq	$.L.str.6.338, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.18.348, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 8 1 is_stmt 1         # poly.c:8:1
	movl	$1, (%rsp)
	movl	%eax, -212(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.6.338, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Ltmp173:
.Lfunc_end16:
	.size	free_poly, .Lfunc_end16-free_poly
	.cfi_endproc
                                        # -- End function
	.globl	print_poly              # -- Begin function print_poly
	.p2align	4, 0x90
	.type	print_poly,@function
print_poly:                             # @print_poly
.Lfunc_begin17:
	.loc	4 10 0                  # poly.c:10:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1304, %rsp             # imm = 0x518
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.11.336, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.10.337, %r11
.Ltmp174:
	.loc	4 10 22 prologue_end    # poly.c:10:22
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%rdx, %rsi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-64(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.20.351, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
.Ltmp175:
	#DEBUG_VALUE: print_poly:first <- 0
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	.loc	4 12 26                 # poly.c:12:26
	movl	$1, (%rsp)
	movl	%eax, -68(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.21.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	setg	%r14b
.Ltmp176:
	.loc	4 12 5 is_stmt 0        # poly.c:12:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %esi
	movq	%rsi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-104(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -113(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$12, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.23.353, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -120(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-144(%rbp), %r9         # 8-byte Reload
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-160(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-168(%rbp), %r9         # 8-byte Reload
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-113(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -176(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-176(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-184(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-113(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB17_1
	jmp	.LBB17_2
.LBB17_1:                               # %.lr.ph
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$12, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 12 5                  # poly.c:12:5
	movl	$1, (%rsp)
	movl	%eax, -188(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-208(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-216(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -224(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$12, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -228(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.357, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	-248(%rbp), %r9         # 8-byte Reload
	movq	-240(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB17_3
.Ltmp177:
.LBB17_2:                               # %._crit_edge
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.13.343, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp178:
	.loc	4 20 8 is_stmt 1        # poly.c:20:8
	movl	$1, (%rsp)
	movl	%eax, -264(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-272(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movl	(%r10), %eax
	.loc	4 20 13 is_stmt 0       # poly.c:20:13
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -284(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.28.358, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -288(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.21.352, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-296(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-304(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-284(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -312(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-312(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-320(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.28.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-284(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%r14b
.Ltmp179:
	.loc	4 20 8                  # poly.c:20:8
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %esi
	movq	%rsi, -328(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-336(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -337(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.29.359, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -344(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.30.360, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -352(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-368(%rbp), %r9         # 8-byte Reload
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.31.361, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -376(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-384(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-392(%rbp), %r9         # 8-byte Reload
	movq	-376(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.28.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-337(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -400(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-400(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-337(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB17_9
	jmp	.LBB17_8
.LBB17_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 8                   # poly.c:0:8
	movl	-260(%rbp), %eax        # 4-byte Reload
	movq	-256(%rbp), %rcx        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.32.362, %r8
	movl	$53, %r9d
	movl	%r9d, %r10d
	xorl	%r9d, %r9d
	movl	$1, %r11d
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%r10, %r8
	movl	$1, (%rsp)
	movl	%eax, -420(%rbp)        # 4-byte Spill
	movl	%r11d, -424(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.34.364, %r10
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movq	-432(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.12.342, %r8
	movabsq	$.L.str.24.354, %rdi
	movq	%rdi, -440(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	-448(%rbp), %r9         # 8-byte Reload
	movq	-440(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.24.354, %rdx
	movq	-416(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-456(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.35.365, %rcx
	movl	$53, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -460(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.36.366, %r8
	movabsq	$.L.str.34.364, %r10
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.21.352, %r8
	movabsq	$.L.str.24.354, %rdi
	movq	%rdi, -480(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	-480(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.35.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.24.354, %rdx
	movl	-420(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -500(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movq	$-1, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-416(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-520(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-416(%rbp), %r10        # 8-byte Reload
	addq	$-1, %r10
	.loc	4 11 9 is_stmt 1        # poly.c:11:9
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r10, -536(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp180:
	#DEBUG_VALUE: print_poly:first <- [DW_OP_constu 420, DW_OP_minus] [%rbp+0]
	.loc	4 13 12                 # poly.c:13:12
	movl	$1, (%rsp)
	movl	%eax, -540(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-536(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-552(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-560(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-536(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-48(%rbp), %rbx         # 8-byte Reload
	addq	%r10, %rbx
	movq	%rdx, -568(%rbp)        # 8-byte Spill
	movq	%rbx, %rdx
	movq	-568(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rbx, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.38.368, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -580(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-576(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-592(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.38.368, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	-416(%rbp), %rbx        # 8-byte Reload
	movl	-4(%r10,%rbx,4), %eax
	.loc	4 13 17 is_stmt 0       # poly.c:13:17
	movl	%eax, %r11d
	movl	%r11d, %r14d
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	-600(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -604(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.39.369, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -608(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.21.352, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-616(%rbp), %rbx        # 8-byte Reload
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%rbx, %rcx
	movq	-624(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.38.368, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-604(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -632(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-632(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-640(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-604(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%r15b
	.loc	4 13 26                 # poly.c:13:26
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r11d
	movl	%r11d, %esi
	movq	%rsi, -648(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-648(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-656(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r15b, -657(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.40.370, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -664(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.21.352, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -672(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-672(%rbp), %rbx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rbx, %rcx
	movq	-680(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.35.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-420(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -688(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-688(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -696(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-696(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40.370, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-420(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setne	%r15b
	.loc	4 13 22                 # poly.c:13:22
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r11d
	movl	%r11d, %esi
	movq	%rsi, -704(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-704(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-712(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r15b, -713(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.41.371, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -720(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-657(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rsi, -728(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-728(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-736(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.40.370, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-713(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -744(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-744(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -752(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-752(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.41.371, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-713(%rbp), %r15b       # 1-byte Reload
	movb	-657(%rbp), %r12b       # 1-byte Reload
	orb	%r12b, %r15b
	movb	%r15b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %eax
	movl	%eax, %esi
	movq	%rsi, -760(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-760(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r15b, -769(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$13, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.27.357, %rdx
	movabsq	$.L.str.42.372, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -776(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.43.373, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -784(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -792(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-792(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-800(%rbp), %r9         # 8-byte Reload
	movq	-784(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.44.374, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -808(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-816(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-824(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.41.371, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-769(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -832(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-832(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-840(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-769(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB17_5
# %bb.4:                                #   in Loop: Header=BB17_3 Depth=1
	#DEBUG_VALUE: print_poly:first <- [DW_OP_constu 420, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 22                  # poly.c:0:22
	movl	$14, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.45.375, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp181:
	.loc	4 14 13 is_stmt 1       # poly.c:14:13
	movl	$1, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-536(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -856(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-856(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-536(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -864(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-864(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -868(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$14, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -872(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47.377, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.48.378, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -880(%rbp)        # 8-byte Spill
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r9, -888(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-888(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.379, %rdi
	movl	-604(%rbp), %esi        # 4-byte Reload
	movl	-868(%rbp), %edx        # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.10.337, %r10
.Ltmp182:
	.loc	4 11 9                  # poly.c:11:9
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.49.380, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp183:
	#DEBUG_VALUE: print_poly:first <- 1
	.loc	4 16 9                  # poly.c:16:9
	movl	$1, (%rsp)
	movl	%eax, -892(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.34.364, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -904(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	-912(%rbp), %r9         # 8-byte Reload
	movq	-904(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, -916(%rbp)        # 4-byte Spill
	jmp	.LBB17_7
.Ltmp184:
.LBB17_5:                               #   in Loop: Header=BB17_3 Depth=1
	#DEBUG_VALUE: print_poly:first <- [DW_OP_constu 420, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 9 is_stmt 0         # poly.c:0:9
	movl	$17, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.43.373, %rdx
	movabsq	$.L.str.50.381, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 17 17 is_stmt 1       # poly.c:17:17
	movl	$1, (%rsp)
	movl	%eax, -920(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.34.364, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -928(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -944(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-944(%rbp), %r9         # 8-byte Reload
	movq	-928(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.51.382, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -952(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-960(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -968(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-968(%rbp), %r9         # 8-byte Reload
	movq	-952(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-657(%rbp), %bl         # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-657(%rbp), %bl         # 1-byte Reload
	testb	$1, %bl
	movl	-420(%rbp), %eax        # 4-byte Reload
	movl	%eax, -916(%rbp)        # 4-byte Spill
	jne	.LBB17_7
# %bb.6:                                #   in Loop: Header=BB17_3 Depth=1
	#DEBUG_VALUE: print_poly:first <- [DW_OP_constu 420, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 17 is_stmt 0        # poly.c:0:17
	movl	$18, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.52.383, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp185:
	.loc	4 18 13 is_stmt 1       # poly.c:18:13
	movl	$1, (%rsp)
	movl	%eax, -988(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-536(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.52.383, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-536(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1008(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$18, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.53.384, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47.377, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.54.385, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -1024(%rbp)       # 8-byte Spill
	movq	-1024(%rbp), %r10       # 8-byte Reload
	movq	%r9, -1032(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-1032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.1.386, %rdi
	movl	-604(%rbp), %esi        # 4-byte Reload
	movl	-1012(%rbp), %edx       # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.53.384, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.10.337, %r10
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$18, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.55.387, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1036(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.34.364, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1048(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	-1056(%rbp), %r9        # 8-byte Reload
	movq	-1048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	-420(%rbp), %eax        # 4-byte Reload
	movl	%eax, -916(%rbp)        # 4-byte Spill
.Ltmp186:
.LBB17_7:                               #   in Loop: Header=BB17_3 Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus, DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 13 is_stmt 0        # poly.c:0:13
	movl	-916(%rbp), %eax        # 4-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.34.364, %rdx
	movabsq	$.L.str.36.366, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	4 11 9 is_stmt 1        # poly.c:11:9
	movl	$1, (%rsp)
	movl	%eax, -1060(%rbp)       # 4-byte Spill
	movl	%r10d, -1064(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.21.352, %r8
	movabsq	$.L.str.44.374, %rdx
	movq	%rdx, -1072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -1080(%rbp)       # 8-byte Spill
	movq	-1080(%rbp), %r9        # 8-byte Reload
	movq	-1072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.35.365, %r8
	movabsq	$.L.str.43.373, %r9
	movq	%rcx, -1088(%rbp)       # 8-byte Spill
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%r9, -1096(%rbp)        # 8-byte Spill
	movq	%r11, %r9
	movq	-1096(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.35.365, %r8
	movabsq	$.L.str.51.382, %rdi
	movq	%rdi, -1104(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -1112(%rbp)       # 8-byte Spill
	movq	-1112(%rbp), %r9        # 8-byte Reload
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.36.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.51.382, %rdx
	movl	-1060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -1120(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$12, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.34.364, %rdx
	movabsq	$.L.str.56.388, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp187:
	#DEBUG_VALUE: print_poly:first <- [DW_OP_constu 1060, DW_OP_minus] [%rbp+0]
	.loc	4 12 26                 # poly.c:12:26
	movl	$1, (%rsp)
	movl	%eax, -1124(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rdi
	movq	%rdi, -1136(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -1144(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1144(%rbp), %rcx       # 8-byte Reload
	movq	-1144(%rbp), %r9        # 8-byte Reload
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-416(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1152(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56.388, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-416(%rbp), %rsi        # 8-byte Reload
	cmpq	$2, %rsi
	setg	%r14b
.Ltmp188:
	.loc	4 12 5 is_stmt 0        # poly.c:12:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -1160(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -1161(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$12, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.34.364, %rdx
	movabsq	$.L.str.57.389, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1168(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.27.357, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1176(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1184(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1184(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1192(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1192(%rbp), %r9        # 8-byte Reload
	movq	-1176(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1200(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1208(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -1216(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-1216(%rbp), %r9        # 8-byte Reload
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56.388, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-1161(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1224(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1224(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1232(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-1161(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-536(%rbp), %rcx        # 8-byte Reload
	movl	-1060(%rbp), %eax       # 4-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jne	.LBB17_3
	jmp	.LBB17_2
.Ltmp189:
.LBB17_8:
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.31.361, %rdx
	movabsq	$.L.str.58.390, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp190:
	.loc	4 20 19 is_stmt 1       # poly.c:20:19
	movl	$1, (%rsp)
	movl	%eax, -1236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47.377, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59.391, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -1248(%rbp)       # 8-byte Spill
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r9, -1256(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-1256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.2.392, %rdi
	movl	-284(%rbp), %esi        # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %edi
	movl	$32, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.58.390, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -1264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.31.361, %rdx
	movabsq	$.L.str.60.393, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.30.360, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1280(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	-1288(%rbp), %r9        # 8-byte Reload
	movq	-1280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp191:
.LBB17_9:
	#DEBUG_VALUE: print_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: print_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 19 is_stmt 0        # poly.c:0:19
	movl	$21, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.30.360, %rdx
	movabsq	$.L.str.61.394, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 21 5 is_stmt 1        # poly.c:21:5
	movl	$1, (%rsp)
	movl	%eax, -1292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$printf, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47.377, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62.395, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -1304(%rbp)       # 8-byte Spill
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%r9, -1312(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.3.396, %rdi
	movb	$0, %al
	callq	printf
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.61.394, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 22 1                  # poly.c:22:1
	movl	%eax, %eax
	movl	%eax, %r10d
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$22, %eax
	movl	%eax, %edi
	movabsq	$.L.str.19.350, %rsi
	movabsq	$.L.str.30.360, %rdx
	movabsq	$.L.str.63.397, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.19.350, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$1304, %rsp             # imm = 0x518
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp192:
.Lfunc_end17:
	.size	print_poly, .Lfunc_end17-print_poly
	.cfi_endproc
                                        # -- End function
	.globl	new_poly                # -- Begin function new_poly
	.p2align	4, 0x90
	.type	new_poly,@function
new_poly:                               # @new_poly
.Lfunc_begin18:
	.loc	4 24 0                  # poly.c:24:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$792, %rsp              # imm = 0x318
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.67.398, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.10.337, %r11
.Ltmp193:
	.loc	4 24 20 prologue_end    # poly.c:24:20
	movl	%edi, %eax
	movl	%eax, %ebx
	movl	%edi, -44(%rbp)         # 4-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rbx, %rdx
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8.340, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$25, %eax
	movl	%eax, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: new_poly:degree <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:coeffs <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	.loc	4 25 23                 # poly.c:25:23
	movl	$1, (%rsp)
	movl	%eax, -68(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65.400, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r9, -88(%rbp)          # 8-byte Spill
	movq	%r10, %r9
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$16, %eax
	movl	%eax, %edi
	callq	malloc
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 25 15 is_stmt 0       # poly.c:25:15
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$25, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$47, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	.loc	4 25 11                 # poly.c:25:11
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$26, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.66.401, %rcx
	movl	$47, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
.Ltmp194:
	#DEBUG_VALUE: new_poly:x <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	.loc	4 26 8 is_stmt 1        # poly.c:26:8
	movl	$1, (%rsp)
	movl	%r14d, -132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	.loc	4 26 15 is_stmt 0       # poly.c:26:15
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$26, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$31, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -156(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.66.401, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$32, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.67.398, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.68.402, %rcx
	movl	$11, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movl	%r15d, (%rax)
	.loc	4 27 38 is_stmt 1       # poly.c:27:38
	movl	$1, (%rsp)
	movl	%r14d, -172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$32, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.67.398, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$32, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.68.402, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-44(%rbp), %r14d        # 4-byte Reload
	addl	$1, %r14d
	.loc	4 27 31 is_stmt 0       # poly.c:27:31
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, (%rsp)
	movl	%r14d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.69.403, %rcx
	movl	$38, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.68.402, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-196(%rbp), %r14d       # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.69.403, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-196(%rbp), %r14d       # 4-byte Reload
	movslq	%r14d, %rdx
	.loc	4 27 41                 # poly.c:27:41
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.70.404, %rcx
	movl	$23, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rdi
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	-240(%rbp), %r9         # 8-byte Reload
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$64, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.69.403, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.70.404, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	.loc	4 27 24                 # poly.c:27:24
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.71.405, %rcx
	movl	$54, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$malloc, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.65.400, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$64, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.70.404, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	-256(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.71.405, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 27 8                  # poly.c:27:8
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-280(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.72.406, %rcx
	movl	$32, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$64, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.72.406, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	.loc	4 27 15                 # poly.c:27:15
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.13.343, %rcx
	movl	$47, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.72.406, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$64, %r14d
	movl	%r14d, %esi
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.72.406, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$27, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$31, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.72.406, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$64, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.71.405, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-288(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$28, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.73.407, %rcx
	movl	$51, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rax)
.Ltmp195:
	#DEBUG_VALUE: i <- 0
	.loc	4 28 19 is_stmt 1       # poly.c:28:19
	movl	$1, (%rsp)
	movl	%r14d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movl	$32, %r14d
	movl	%r14d, %esi
	movabsq	$.L.str.67.398, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	movq	%rax, %rdi
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movl	$1, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.73.407, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-44(%rbp), %r14d        # 4-byte Reload
	cmpl	$0, %r14d
	setl	%r12b
.Ltmp196:
	.loc	4 28 5 is_stmt 0        # poly.c:28:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r15d
	movl	%r15d, %edx
	movq	%rax, %rsi
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r12b, -393(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$28, %r14d
	movl	%r14d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$2, %r14d
	movl	%r14d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r14d
	movl	$1, (%rsp)
	movl	%r14d, -400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r14d
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	movl	%r14d, %eax
	movl	$1, %r14d
	movl	%r14d, %ecx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r14d
	movl	%r14d, %eax
	movabsq	$.L.str.73.407, %r8
	xorl	%r14d, %r14d
	movl	%r14d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-393(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-393(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	jne	.LBB18_2
.Ltmp197:
# %bb.1:                                # %.lr.ph
	#DEBUG_VALUE: new_poly:x <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:coeffs <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:degree <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$27, %eax
	movl	%eax, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 27 8 is_stmt 1        # poly.c:27:8
	movl	$1, (%rsp)
	movl	%eax, -428(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.72.406, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-440(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.72.406, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -448(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -456(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.38.368, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -460(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.72.406, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-456(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-472(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.38.368, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	(%r10), %r11
.Ltmp198:
	.loc	4 28 5                  # poly.c:28:5
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-480(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -488(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$28, %eax
	movl	%eax, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.75.409, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -492(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.67.398, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -512(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-512(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-520(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -532(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -536(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-532(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -544(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-544(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-552(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-532(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-560(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -568(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$28, %eax
	movl	%eax, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -572(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.77.411, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -584(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-584(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	jmp	.LBB18_3
.Ltmp199:
.LBB18_2:                               # %._crit_edge
	#DEBUG_VALUE: new_poly:x <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:coeffs <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:degree <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movl	$31, %eax
	movl	%eax, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 31 5 is_stmt 1        # poly.c:31:5
	movl	$1, (%rsp)
	movl	%eax, -604(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-616(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.64.399, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-128(%rbp), %rax        # 8-byte Reload
	addq	$792, %rsp              # imm = 0x318
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB18_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: new_poly:x <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:coeffs <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: new_poly:degree <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movq	-600(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp200:
	.loc	4 28 13 is_stmt 1       # poly.c:28:13
	movl	$1, (%rsp)
	movq	%rax, -624(%rbp)        # 8-byte Spill
	movl	%r10d, -628(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.24.354, %rcx
	movq	%rax, %rdx
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.77.411, %rcx
	movq	%rax, %rdi
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.77.411, %rax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$29, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp201:
	#DEBUG_VALUE: i <- [DW_OP_constu 624, DW_OP_minus] [%rbp+0]
	.loc	4 29 24                 # poly.c:29:24
	movl	$1, (%rsp)
	movl	%r10d, -652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8.340, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-56(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -672(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$29, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.78.412, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -676(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -688(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.78.412, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	-624(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 29 9 is_stmt 0        # poly.c:29:9
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$29, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.79.413, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -696(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.38.368, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.79.413, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	4 29 22                 # poly.c:29:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -712(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$29, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -716(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.79.413, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-712(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.78.412, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-692(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$28, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	-624(%rbp), %r11        # 8-byte Reload
	movl	-692(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp202:
	.loc	4 28 30 is_stmt 1       # poly.c:28:30
	movl	$1, (%rsp)
	movl	%r10d, -732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	4 28 19 is_stmt 0       # poly.c:28:19
	movq	%rdx, -760(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$28, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -764(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-568(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	-568(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	sete	%r14b
.Ltmp203:
	.loc	4 28 5                  # poly.c:28:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -785(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$28, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.64.399, %rsi
	movabsq	$.L.str.77.411, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -792(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.77.411, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-785(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-785(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, -600(%rbp)        # 8-byte Spill
	jne	.LBB18_2
	jmp	.LBB18_3
.Ltmp204:
.Lfunc_end18:
	.size	new_poly, .Lfunc_end18-new_poly
	.cfi_endproc
                                        # -- End function
	.globl	neg_poly                # -- Begin function neg_poly
	.p2align	4, 0x90
	.type	neg_poly,@function
neg_poly:                               # @neg_poly
.Lfunc_begin19:
	.loc	4 34 0 is_stmt 1        # poly.c:34:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %r8d
	movl	$1, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.11.336, %r10
	xorl	%eax, %eax
	movl	%eax, %r11d
	movabsq	$.L.str.10.337, %rbx
.Ltmp205:
	.loc	4 34 20 prologue_end    # poly.c:34:20
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%r8, %rsi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%edx, -56(%rbp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	%r9, %rcx
	movq	%r10, %r8
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-64(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$35, %eax
	movl	%eax, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.82.419, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: neg_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp206:
	#DEBUG_VALUE: i <- 0
	.loc	4 35 19                 # poly.c:35:19
	movl	$1, (%rsp)
	movl	%eax, -76(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-104(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.82.419, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setl	%r15b
.Ltmp207:
	.loc	4 35 5 is_stmt 0        # poly.c:35:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %esi
	movq	%rsi, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r15b, -129(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$35, %eax
	movl	%eax, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.83.420, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -136(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-160(%rbp), %r9         # 8-byte Reload
	movq	-144(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -168(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-176(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-184(%rbp), %r9         # 8-byte Reload
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.82.419, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-129(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -192(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-129(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB19_2
# %bb.1:                                # %.lr.ph
	#DEBUG_VALUE: neg_poly:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$35, %eax
	movl	%eax, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 35 5                  # poly.c:35:5
	movl	$1, (%rsp)
	movl	%eax, -204(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -224(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-232(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-240(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -244(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -248(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-264(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-272(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r10, -280(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$35, %eax
	movl	%eax, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -284(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -296(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -304(%rbp)        # 8-byte Spill
	movq	-304(%rbp), %r9         # 8-byte Reload
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	jmp	.LBB19_3
.Ltmp208:
.LBB19_2:                               # %._crit_edge
	#DEBUG_VALUE: neg_poly:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$38, %eax
	movl	%eax, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.29.359, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 38 1 is_stmt 1        # poly.c:38:1
	movl	$1, (%rsp)
	movl	%eax, -316(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.81.418, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB19_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: neg_poly:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: neg_poly:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 1 is_stmt 0         # poly.c:0:1
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp209:
	.loc	4 35 13 is_stmt 1       # poly.c:35:13
	movl	$1, (%rsp)
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.24.354, %rcx
	movq	%rax, %rdx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.84.421, %rcx
	movq	%rax, %rdi
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.84.421, %rax
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp210:
	#DEBUG_VALUE: i <- [DW_OP_constu 328, DW_OP_minus] [%rbp+0]
	.loc	4 36 18                 # poly.c:36:18
	movl	$1, (%rsp)
	movl	%r10d, -356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-328(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -376(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-376(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-328(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 36 17 is_stmt 0       # poly.c:36:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.85.422, %rcx
	movl	$13, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-396(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rdi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.85.422, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	xorl	%r10d, %r10d
	movl	-396(%rbp), %ebx        # 4-byte Reload
	subl	%ebx, %r10d
	.loc	4 36 24                 # poly.c:36:24
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -420(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.86.423, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -424(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.85.422, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-420(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-432(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-420(%rbp), %r10d       # 4-byte Reload
	movq	%rax, -440(%rbp)        # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-56(%rbp), %ebx         # 4-byte Reload
	idivl	%ebx
	.loc	4 36 14                 # poly.c:36:14
	movl	%edx, %r14d
	movl	%r14d, %r11d
	movl	%edx, -444(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-440(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.88.424, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -448(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-376(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-456(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-444(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -464(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-464(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-472(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-328(%rbp), %r15        # 8-byte Reload
	movl	-444(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%r11,%r15,4)
.Ltmp211:
	.loc	4 35 28 is_stmt 1       # poly.c:35:28
	movl	$1, (%rsp)
	movl	%r10d, -476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	-488(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-328(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-496(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-328(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	4 35 19 is_stmt 0       # poly.c:35:19
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-504(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	movq	%r11, -512(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-528(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-512(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-536(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-512(%rbp), %rsi        # 8-byte Reload
	movq	-280(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r12b
.Ltmp212:
	.loc	4 35 5                  # poly.c:35:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %r15d
	movq	%rcx, %rsi
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	-544(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	movb	%r12b, -545(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.81.418, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.89.425, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -560(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -568(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-568(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-576(%rbp), %r9         # 8-byte Reload
	movq	-560(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -584(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-600(%rbp), %r9         # 8-byte Reload
	movq	-584(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-545(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-608(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-616(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movb	-545(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	movq	-512(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	jne	.LBB19_2
	jmp	.LBB19_3
.Ltmp213:
.Lfunc_end19:
	.size	neg_poly, .Lfunc_end19-neg_poly
	.cfi_endproc
                                        # -- End function
	.globl	scalar_mul              # -- Begin function scalar_mul
	.p2align	4, 0x90
	.type	scalar_mul,@function
scalar_mul:                             # @scalar_mul
.Lfunc_begin20:
	.loc	4 40 0 is_stmt 1        # poly.c:40:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$600, %rsp              # imm = 0x258
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %r9d
	movl	$1, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.11.336, %r11
	xorl	%eax, %eax
	movl	%eax, %ebx
	movabsq	$.L.str.10.337, %r14
.Ltmp214:
	.loc	4 40 22 prologue_end    # poly.c:40:22
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%r9, %rsi
	movq	-48(%rbp), %r8          # 8-byte Reload
	movl	%edx, -56(%rbp)         # 4-byte Spill
	movq	%r8, %rdx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	movq	%r10, %rcx
	movq	%r11, %r8
	movq	%rbx, %r9
	movq	%r14, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.91.428, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.82.419, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: scalar_mul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:mod <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
.Ltmp215:
	#DEBUG_VALUE: i <- 0
	.loc	4 41 19                 # poly.c:41:19
	movl	$1, (%rsp)
	movl	%eax, -92(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-112(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r15d
	movl	%r15d, %edi
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.82.419, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setl	%r12b
.Ltmp216:
	.loc	4 41 5 is_stmt 0        # poly.c:41:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r15d
	movl	%r15d, %esi
	movq	%rsi, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -144(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-144(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r12b, -145(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.23.353, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -152(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -160(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-176(%rbp), %r9         # 8-byte Reload
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-200(%rbp), %r9         # 8-byte Reload
	movq	-184(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.82.419, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-145(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -208(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-208(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-145(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	jne	.LBB20_2
# %bb.1:                                # %.lr.ph
	#DEBUG_VALUE: scalar_mul:mod <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 41 5                  # poly.c:41:5
	movl	$1, (%rsp)
	movl	%eax, -220(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	-232(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -240(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-240(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-248(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -260(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -264(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r10, -296(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$41, %eax
	movl	%eax, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -300(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -312(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %r9         # 8-byte Reload
	movq	-312(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	jmp	.LBB20_3
.Ltmp217:
.LBB20_2:                               # %._crit_edge
	#DEBUG_VALUE: scalar_mul:mod <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$44, %eax
	movl	%eax, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.29.359, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 44 1 is_stmt 1        # poly.c:44:1
	movl	$1, (%rsp)
	movl	%eax, -332(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.90.429, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$600, %rsp              # imm = 0x258
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB20_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: scalar_mul:mod <- [DW_OP_constu 60, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:y <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: scalar_mul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 1 is_stmt 0         # poly.c:0:1
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp218:
	.loc	4 41 13 is_stmt 1       # poly.c:41:13
	movl	$1, (%rsp)
	movq	%rax, -344(%rbp)        # 8-byte Spill
	movl	%r10d, -348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.24.354, %rcx
	movq	%rax, %rdx
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.84.421, %rcx
	movq	%rax, %rdi
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.84.421, %rax
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp219:
	#DEBUG_VALUE: i <- [DW_OP_constu 344, DW_OP_minus] [%rbp+0]
	.loc	4 42 21                 # poly.c:42:21
	movl	$1, (%rsp)
	movl	%r10d, -372(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-344(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -392(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-392(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-344(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 42 19 is_stmt 0       # poly.c:42:19
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.70.404, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.91.428, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.16.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-412(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.70.404, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-412(%rbp), %r10d       # 4-byte Reload
	movl	-56(%rbp), %ebx         # 4-byte Reload
	imull	%ebx, %r10d
	.loc	4 42 27                 # poly.c:42:27
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.86.423, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-60(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.70.404, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-428(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-428(%rbp), %r10d       # 4-byte Reload
	movq	%rax, -448(%rbp)        # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-60(%rbp), %ebx         # 4-byte Reload
	idivl	%ebx
	.loc	4 42 14                 # poly.c:42:14
	movl	%edx, %r14d
	movl	%r14d, %r11d
	movl	%edx, -452(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.88.424, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -456(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-392(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-464(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-452(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -472(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-472(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-480(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-344(%rbp), %r15        # 8-byte Reload
	movl	-452(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%r11,%r15,4)
.Ltmp220:
	.loc	4 41 28 is_stmt 1       # poly.c:41:28
	movl	$1, (%rsp)
	movl	%r10d, -484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	-496(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-344(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-504(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-344(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	4 41 19 is_stmt 0       # poly.c:41:19
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-512(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	movq	%r11, -520(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-296(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-536(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-520(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-544(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-520(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r12b
.Ltmp221:
	.loc	4 41 5                  # poly.c:41:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %r15d
	movq	%rcx, %rsi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	-552(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	movb	%r12b, -553(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.90.429, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.89.425, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -560(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -568(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-576(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-584(%rbp), %r9         # 8-byte Reload
	movq	-568(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -592(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-600(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-608(%rbp), %r9         # 8-byte Reload
	movq	-592(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-553(%rbp), %r12b       # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -616(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-616(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-624(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movb	-553(%rbp), %r12b       # 1-byte Reload
	testb	$1, %r12b
	movq	-520(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	jne	.LBB20_2
	jmp	.LBB20_3
.Ltmp222:
.Lfunc_end20:
	.size	scalar_mul, .Lfunc_end20-scalar_mul
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function poly_divide
.LCPI21_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	poly_divide
	.p2align	4, 0x90
	.type	poly_divide,@function
poly_divide:                            # @poly_divide
.Lfunc_begin21:
	.loc	4 46 0 is_stmt 1        # poly.c:46:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$712, %rsp              # imm = 0x2C8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %r8d
	movl	$1, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.11.336, %r10
	xorl	%eax, %eax
	movl	%eax, %r11d
	movabsq	$.L.str.10.337, %rbx
.Ltmp223:
	.loc	4 46 23 prologue_end    # poly.c:46:23
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%r8, %rsi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%edx, -56(%rbp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	%r9, %rcx
	movq	%r10, %r8
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.91.428, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.10.337, %r9
	movsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	trace_logger_log_double
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.93.431, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: poly_divide:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp224:
	#DEBUG_VALUE: i <- 0
	.loc	4 47 19                 # poly.c:47:19
	movl	$1, (%rsp)
	movl	%eax, -84(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-104(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edi
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.93.431, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setl	%r15b
.Ltmp225:
	.loc	4 47 5 is_stmt 0        # poly.c:47:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %esi
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r15b, -137(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.23.353, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -144(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-160(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-168(%rbp), %r9         # 8-byte Reload
	movq	-152(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -176(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-184(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	-176(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.93.431, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-137(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-208(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-137(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB21_2
# %bb.1:                                # %.lr.ph
	#DEBUG_VALUE: poly_divide:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 47 5                  # poly.c:47:5
	movl	$1, (%rsp)
	movl	%eax, -212(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	-224(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-240(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -252(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -256(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -264(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-272(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r10, -288(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$47, %eax
	movl	%eax, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -292(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -304(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	-312(%rbp), %r9         # 8-byte Reload
	movq	-304(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	jmp	.LBB21_3
.Ltmp226:
.LBB21_2:                               # %._crit_edge
	#DEBUG_VALUE: poly_divide:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$53, %eax
	movl	%eax, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.29.359, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 53 1 is_stmt 1        # poly.c:53:1
	movl	$1, (%rsp)
	movl	%eax, -324(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.92.430, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$712, %rsp              # imm = 0x2C8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB21_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: poly_divide:mod <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: poly_divide:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 1 is_stmt 0         # poly.c:0:1
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp227:
	.loc	4 47 13 is_stmt 1       # poly.c:47:13
	movl	$1, (%rsp)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movl	%r10d, -340(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.24.354, %rcx
	movq	%rax, %rdx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.84.421, %rcx
	movq	%rax, %rdi
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.84.421, %rax
	movq	-336(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$48, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp228:
	#DEBUG_VALUE: i <- [DW_OP_constu 336, DW_OP_minus] [%rbp+0]
	.loc	4 48 22                 # poly.c:48:22
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-336(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-336(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -384(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$48, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -388(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-336(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -404(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$48, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.69.403, %rcx
	movl	$42, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.16.346, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-404(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.69.403, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movl	-404(%rbp), %r10d       # 4-byte Reload
	cvtsi2sdl	%r10d, %xmm0
	.loc	4 48 26 is_stmt 0       # poly.c:48:26
	movsd	%xmm0, -424(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$48, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.94.432, %rcx
	movl	$19, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -428(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.91.428, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.10.337, %r9
	movsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	trace_logger_log_double
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.69.403, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movq	%rax, %rdi
	movsd	-424(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.94.432, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movsd	-424(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	-64(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	divsd	%xmm1, %xmm0
	.loc	4 48 16                 # poly.c:48:16
	movsd	%xmm0, -440(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$49, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.95.433, %rcx
	movl	$40, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp229:
	#DEBUG_VALUE: div <- [DW_OP_constu 440, DW_OP_minus] [%rbp+0]
	.loc	4 49 21 is_stmt 1       # poly.c:49:21
	movl	$1, (%rsp)
	movl	%r10d, -444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.94.432, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.10.337, %r9
	movq	%rax, %rdi
	movsd	-440(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.95.433, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movsd	-440(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cvttsd2si	%xmm0, %r10d
	.loc	4 49 13 is_stmt 0       # poly.c:49:13
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -448(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.96.434, %rcx
	movl	$42, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp230:
	#DEBUG_VALUE: floor <- [DW_OP_constu 448, DW_OP_minus] [%rbp+0]
	.loc	4 50 22 is_stmt 1       # poly.c:50:22
	movl	$1, (%rsp)
	movl	%r10d, -452(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.95.433, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-448(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.96.434, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movl	-448(%rbp), %r10d       # 4-byte Reload
	cvtsi2sdl	%r10d, %xmm0
	.loc	4 50 20 is_stmt 0       # poly.c:50:20
	movsd	%xmm0, -472(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.85.422, %rcx
	movl	$14, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.96.434, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.10.337, %r9
	movsd	-472(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	trace_logger_log_double
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.94.432, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movq	%rax, %rdi
	movsd	-440(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.85.422, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movsd	-440(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	-472(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm1, %xmm0
	.loc	4 50 28                 # poly.c:50:28
	movsd	%xmm0, -488(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.82.419, %rcx
	movl	$52, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %rcx
	movabsq	$.L.str.10.337, %r9
	movq	%rax, %rdx
	movq	%rax, %r8
	callq	trace_logger_log_double
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.85.422, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.10.337, %r9
	movq	%rax, %rdi
	movsd	-488(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.82.419, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movsd	-488(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	seta	%r14b
	.loc	4 50 16                 # poly.c:50:16
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -505(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.68.402, %rcx
	movl	$37, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -512(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.82.419, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-505(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.68.402, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movb	-505(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$50, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.97.435, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.95.433, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-448(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.68.402, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-524(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -536(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.97.435, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-524(%rbp), %r10d       # 4-byte Reload
	movl	-448(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %r10d
	.loc	4 51 21 is_stmt 1       # poly.c:51:21
	movl	%r10d, %r12d
	movl	%r12d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -540(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$51, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.86.423, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -544(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-56(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.97.435, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-540(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-540(%rbp), %r10d       # 4-byte Reload
	movq	%rax, -560(%rbp)        # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-56(%rbp), %ebx         # 4-byte Reload
	idivl	%ebx
	.loc	4 51 14 is_stmt 0       # poly.c:51:14
	movl	%edx, %r12d
	movl	%r12d, %r11d
	movl	%edx, -564(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-560(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$51, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.98.436, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -568(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-384(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-576(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-564(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -584(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-584(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-592(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$47, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-336(%rbp), %r13        # 8-byte Reload
	movl	-564(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%r11,%r13,4)
.Ltmp231:
	.loc	4 47 28 is_stmt 1       # poly.c:47:28
	movl	$1, (%rsp)
	movl	%r10d, -596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	-608(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-336(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-616(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-336(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	4 47 19 is_stmt 0       # poly.c:47:19
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-624(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	movq	%r11, -632(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$47, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -636(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-288(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -648(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-648(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-632(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-656(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-632(%rbp), %rsi        # 8-byte Reload
	movq	-288(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r14b
.Ltmp232:
	.loc	4 47 5                  # poly.c:47:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %r13d
	movq	%rcx, %rsi
	movq	%rdx, -664(%rbp)        # 8-byte Spill
	movq	%r13, %rdx
	movq	-664(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	movb	%r14b, -665(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$47, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.92.430, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.99.437, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -680(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-688(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -696(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-696(%rbp), %r9         # 8-byte Reload
	movq	-680(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -704(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-712(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-720(%rbp), %r9         # 8-byte Reload
	movq	-704(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-665(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -728(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-728(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-736(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movb	-665(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	jne	.LBB21_2
	jmp	.LBB21_3
.Ltmp233:
.Lfunc_end21:
	.size	poly_divide, .Lfunc_end21-poly_divide
	.cfi_endproc
                                        # -- End function
	.globl	copy_poly               # -- Begin function copy_poly
	.p2align	4, 0x90
	.type	copy_poly,@function
copy_poly:                              # @copy_poly
.Lfunc_begin22:
	.loc	4 55 0 is_stmt 1        # poly.c:55:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$528, %rsp              # imm = 0x210
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.11.336, %r9
	xorl	%eax, %eax
	movl	%eax, %r10d
	movabsq	$.L.str.10.337, %r11
.Ltmp234:
	.loc	4 55 21 prologue_end    # poly.c:55:21
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movq	%rdx, %rsi
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$56, %eax
	movl	%eax, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.69.403, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: copy_poly:x <- [DW_OP_constu 40, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	.loc	4 56 33                 # poly.c:56:33
	movl	$1, (%rsp)
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69.403, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r10
	.loc	4 56 39 is_stmt 0       # poly.c:56:39
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -96(%rbp)         # 8-byte Spill
	callq	trace_logger_log_int
	movl	$56, %eax
	movl	%eax, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.70.404, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -100(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rdi
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r9         # 8-byte Reload
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.69.403, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.70.404, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	shlq	$2, %r10
	.loc	4 56 26                 # poly.c:56:26
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$56, %eax
	movl	%eax, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -148(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65.400, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.70.404, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 56 19                 # poly.c:56:19
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-168(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$56, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$47, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -180(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$64, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	.loc	4 56 10                 # poly.c:56:10
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$57, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.28.358, %rcx
	movl	$51, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
.Ltmp235:
	#DEBUG_VALUE: copy_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- 0
	.loc	4 57 19 is_stmt 1       # poly.c:57:19
	movl	$1, (%rsp)
	movl	%ebx, -204(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	$32, %ebx
	movl	%ebx, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$1, %ebx
	movl	%ebx, %eax
	movabsq	$.L.str.28.358, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	cmpl	$0, %ebx
	setg	%r15b
.Ltmp236:
	.loc	4 57 5 is_stmt 0        # poly.c:57:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rsi
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -233(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$57, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.83.420, %rcx
	movl	$2, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
	movl	$1, (%rsp)
	movl	%ebx, -240(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %ebx
	movl	%ebx, %edi
	xorl	%ebx, %ebx
	movl	%ebx, %eax
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %eax
	movabsq	$.L.str.28.358, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-233(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-233(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB22_1
	jmp	.LBB22_2
.LBB22_1:                               # %.lr.ph
	#DEBUG_VALUE: copy_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:x <- [DW_OP_constu 40, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movq	$-1, %rdi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -268(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.22.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	.loc	4 57 5                  # poly.c:57:5
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$57, %eax
	movl	%eax, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -308(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -320(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	-328(%rbp), %r9         # 8-byte Reload
	movq	-320(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jmp	.LBB22_3
.Ltmp237:
.LBB22_2:                               # %._crit_edge
	#DEBUG_VALUE: copy_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:x <- [DW_OP_constu 40, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$58, %eax
	movl	%eax, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.29.359, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 58 5 is_stmt 1        # poly.c:58:5
	movl	$1, (%rsp)
	movl	%eax, -340(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-200(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.100.440, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-200(%rbp), %rax        # 8-byte Reload
	addq	$528, %rsp              # imm = 0x210
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB22_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: copy_poly:coeffs <- [DW_OP_constu 200, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:size <- [DW_OP_constu 44, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: copy_poly:x <- [DW_OP_constu 40, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp238:
	.loc	4 57 13 is_stmt 1       # poly.c:57:13
	movl	$1, (%rsp)
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.84.421, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.24.354, %rdx
	movq	%rax, %rdi
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.24.354, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp239:
	#DEBUG_VALUE: i <- [DW_OP_constu 360, DW_OP_minus] [%rbp+0]
	.loc	4 57 43 is_stmt 0       # poly.c:57:43
	movl	$1, (%rsp)
	movl	%r10d, -388(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-40(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -408(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -412(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-408(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	-360(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 57 31                 # poly.c:57:31
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.101.441, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.101.441, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-200(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	4 57 41                 # poly.c:57:41
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -448(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.88.424, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -452(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.101.441, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-448(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.16.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-428(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	-360(%rbp), %r11        # 8-byte Reload
	movl	-428(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	4 57 27                 # poly.c:57:27
	movl	$1, (%rsp)
	movl	%r10d, -468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	4 57 19                 # poly.c:57:19
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movq	-304(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	sete	%r14b
.Ltmp240:
	.loc	4 57 5                  # poly.c:57:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -521(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.100.440, %rsi
	movabsq	$.L.str.84.421, %rdx
	movabsq	$.L.str.89.425, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.84.421, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-521(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-521(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, -336(%rbp)        # 8-byte Spill
	jne	.LBB22_2
	jmp	.LBB22_3
.Ltmp241:
.Lfunc_end22:
	.size	copy_poly, .Lfunc_end22-copy_poly
	.cfi_endproc
                                        # -- End function
	.globl	polyadd                 # -- Begin function polyadd
	.p2align	4, 0x90
	.type	polyadd,@function
polyadd:                                # @polyadd
.Lfunc_begin23:
	.loc	4 62 0 is_stmt 1        # poly.c:62:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1112, %rsp             # imm = 0x458
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	16(%rbp), %eax
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %r11d
	movl	$64, %r10d
	movl	%r10d, %ebx
	movl	$1, %r10d
	movl	%r10d, %r14d
	movabsq	$.L.str.11.336, %r15
	xorl	%r10d, %r10d
	movl	%r10d, %r12d
	movabsq	$.L.str.10.337, %r13
.Ltmp242:
	.loc	4 61 19 prologue_end    # poly.c:61:19
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%rbx, %rsi
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movl	%ecx, -68(%rbp)         # 4-byte Spill
	movq	%r14, %rcx
	movl	%r8d, -72(%rbp)         # 4-byte Spill
	movq	%r15, %r8
	movq	%r9, -80(%rbp)          # 8-byte Spill
	movq	%r12, %r9
	movq	%r13, (%rsp)
	movl	%eax, -84(%rbp)         # 4-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.91.428, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-104(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-72(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.125.446, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$66, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.56.388, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: polyadd:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
.Ltmp243:
	.loc	4 66 5                  # poly.c:66:5
	movl	$1, (%rsp)
	movl	%eax, -140(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-152(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -160(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-168(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56.388, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-84(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	setl	%al
	movb	%al, %sil
	andb	$1, %sil
	movzbl	%sil, %esi
	movl	%esi, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-176(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%al, -177(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$66, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.39.369, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %eax
	movl	%eax, %r11d
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-192(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-208(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	-84(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	setl	%al
	movb	%al, %sil
	andb	$1, %sil
	movzbl	%sil, %esi
	movl	%esi, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%al, -217(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$66, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.41.371, %rcx
	movl	$26, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-217(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, %esi
	movq	%rsi, -232(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-232(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-240(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.56.388, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-177(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -248(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-248(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-256(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.41.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-177(%rbp), %al         # 1-byte Reload
	movb	-217(%rbp), %sil        # 1-byte Reload
	andb	%sil, %al
	movb	%al, %sil
	andb	$1, %sil
	movzbl	%sil, %r10d
	movl	%r10d, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-264(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%al, -265(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$66, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.106.449, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -272(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.107.450, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -280(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-288(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-296(%rbp), %r9         # 8-byte Reload
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.108.451, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -304(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-312(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-320(%rbp), %r9         # 8-byte Reload
	movq	-304(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.41.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-265(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -328(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-328(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-336(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-265(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB23_2
# %bb.1:
	#DEBUG_VALUE: polyadd:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movl	$66, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.108.451, %rdx
	movabsq	$.L.str.109.452, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 66 5                  # poly.c:66:5
	movl	$1, (%rsp)
	movl	%eax, -340(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$5, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$__assert_fail, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110.453, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.111.454, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%r9, -360(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-360(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.112.455, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	-368(%rbp), %r10        # 8-byte Reload
	movq	%r9, -376(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-376(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$66, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %r10        # 8-byte Reload
	movq	%r9, -392(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-392(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.113.456, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %r10        # 8-byte Reload
	movq	%r9, -408(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.4.457, %rdi
	movabsq	$.L.str.5.458, %rsi
	movl	$66, %edx
	movabsq	$.L__PRETTY_FUNCTION__.polyadd, %rcx
	callq	__assert_fail
	movl	$66, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.108.451, %rdx
	movabsq	$.L.str.114.459, %rcx
	movl	$7, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -412(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
.Ltmp244:
.LBB23_2:
	#DEBUG_VALUE: polyadd:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$67, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.115.460, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 67 22 is_stmt 1       # poly.c:67:22
	movl	$1, (%rsp)
	movl	%eax, -416(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-424(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-432(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-440(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.115.460, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-68(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	setge	%r14b
	.loc	4 67 15 is_stmt 0       # poly.c:67:15
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r12d
	movl	%r12d, %esi
	movq	%rsi, -448(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-456(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -457(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$67, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.97.435, %rcx
	movl	$55, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -464(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-472(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-480(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.115.460, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-457(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -488(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-488(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-496(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.97.435, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 67 22                 # poly.c:67:22
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-68(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	.loc	4 67 15                 # poly.c:67:15
	cmovgel	%r10d, %eax
	.loc	4 67 9                  # poly.c:67:9
	movl	%eax, %r12d
	movl	%r12d, %r11d
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-504(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -508(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$69, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.116.461, %rcx
	movl	$55, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp245:
	#DEBUG_VALUE: polyadd:min <- [DW_OP_constu 508, DW_OP_minus] [%rbp+0]
	.loc	4 69 19 is_stmt 1       # poly.c:69:19
	movl	$1, (%rsp)
	movl	%eax, -512(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.91.428, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-520(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.115.460, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-457(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -536(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-536(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-544(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.116.461, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 67 22                 # poly.c:67:22
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-68(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	.loc	4 69 19                 # poly.c:69:19
	movq	-64(%rbp), %r11         # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	cmovgeq	%rbx, %r11
	.loc	4 69 10 is_stmt 0       # poly.c:69:10
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-552(%rbp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	movq	%r11, -560(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$71, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.117.462, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp246:
	#DEBUG_VALUE: polyadd:result <- [DW_OP_constu 560, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:i <- 0
	.loc	4 71 15 is_stmt 1       # poly.c:71:15
	movl	$1, (%rsp)
	movl	%eax, -564(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-576(%rbp), %rbx        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rbx, %rcx
	movq	-584(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.97.435, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-508(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -592(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-592(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-600(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.117.462, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-508(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setl	%r14b
.Ltmp247:
	.loc	4 71 5 is_stmt 0        # poly.c:71:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %esi
	movq	%rsi, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-608(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-616(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -617(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$71, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.118.463, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -624(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -632(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-640(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-632(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -656(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -664(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-672(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.117.462, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-617(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -680(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-680(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-688(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-617(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB23_5
# %bb.3:                                # %.lr.ph
	#DEBUG_VALUE: polyadd:result <- [DW_OP_constu 560, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:min <- [DW_OP_constu 508, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$71, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 71 5                  # poly.c:71:5
	movl	$1, (%rsp)
	movl	%eax, -692(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.97.435, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-508(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -704(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-704(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-712(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-508(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -720(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-720(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -728(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$71, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -732(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.119.464, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -744(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -752(%rbp)        # 8-byte Spill
	movq	-752(%rbp), %r9         # 8-byte Reload
	movq	-744(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
.Ltmp248:
.LBB23_4:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: polyadd:result <- [DW_OP_constu 560, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:min <- [DW_OP_constu 508, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	4 70 9 is_stmt 1        # poly.c:70:9
	movl	$1, (%rsp)
	movq	%rax, -768(%rbp)        # 8-byte Spill
	movl	%r10d, -772(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.24.354, %rcx
	movq	%rax, %rdx
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.119.464, %rcx
	movq	%rax, %rdi
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.119.464, %rax
	movq	-768(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp249:
	#DEBUG_VALUE: polyadd:i <- [DW_OP_constu 768, DW_OP_minus] [%rbp+0]
	.loc	4 72 22                 # poly.c:72:22
	movl	$1, (%rsp)
	movl	%r10d, -796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-768(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-768(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -816(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.75.409, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -820(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-816(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -832(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-832(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.75.409, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-768(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 72 29 is_stmt 0       # poly.c:72:29
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -836(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.120.465, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-768(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.91.428, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.120.465, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-768(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -856(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.45.375, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -860(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.120.465, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -872(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.45.375, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-768(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 72 27                 # poly.c:72:27
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -876(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.68.402, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -880(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.75.409, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-836(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.45.375, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-876(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.68.402, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-876(%rbp), %r10d       # 4-byte Reload
	movl	-836(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %r10d
	.loc	4 72 35                 # poly.c:72:35
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.86.423, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-72(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.68.402, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-892(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-892(%rbp), %r10d       # 4-byte Reload
	movq	%rax, -912(%rbp)        # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-72(%rbp), %ebx         # 4-byte Reload
	idivl	%ebx
	.loc	4 72 9                  # poly.c:72:9
	movl	%edx, %r14d
	movl	%r14d, %r11d
	movl	%edx, -916(%rbp)        # 4-byte Spill
	movq	%r11, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.121.466, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -920(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-928(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.116.461, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-936(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.121.466, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	shlq	$2, %r11
	movq	-560(%rbp), %r15        # 8-byte Reload
	addq	%r11, %r15
	.loc	4 72 19                 # poly.c:72:19
	movq	%rdx, -944(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	-944(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r15, -952(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$72, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.122.467, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -956(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.121.466, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -968(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-968(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-916(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-976(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-984(%rbp), %r15        # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$71, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-560(%rbp), %r11        # 8-byte Reload
	movq	-768(%rbp), %r15        # 8-byte Reload
	movl	-916(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%r11,%r15,4)
.Ltmp250:
	.loc	4 71 23 is_stmt 1       # poly.c:71:23
	movl	$1, (%rsp)
	movl	%r10d, -988(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -1000(%rbp)       # 8-byte Spill
	movq	-1000(%rbp), %r9        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -1008(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1008(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	addq	$1, %r11
	.loc	4 71 15 is_stmt 0       # poly.c:71:15
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1016(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movq	%r11, -1024(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$71, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.123.468, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1028(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-728(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -1040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1040(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1048(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.123.468, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-768(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %r11        # 8-byte Reload
	cmpq	%r11, %rsi
	setl	%r12b
.Ltmp251:
	.loc	4 71 5                  # poly.c:71:5
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %r15d
	movq	%rcx, %rsi
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1056(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movb	%r12b, -1057(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$71, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.124.469, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1064(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.119.464, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1072(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1088(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1088(%rbp), %r9        # 8-byte Reload
	movq	-1072(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1096(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1104(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -1112(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-1112(%rbp), %r9        # 8-byte Reload
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.123.468, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-1057(%rbp), %r12b      # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1120(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1128(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movb	-1057(%rbp), %r12b      # 1-byte Reload
	testb	$1, %r12b
	movq	-1024(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	jne	.LBB23_4
.Ltmp252:
.LBB23_5:                               # %._crit_edge
	#DEBUG_VALUE: polyadd:result <- [DW_OP_constu 560, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:min <- [DW_OP_constu 508, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polyadd:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$74, %eax
	movl	%eax, %edi
	movabsq	$.L.str.102.448, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.29.359, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 74 5 is_stmt 1        # poly.c:74:5
	movl	$1, (%rsp)
	movl	%eax, -1132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.116.461, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.102.448, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-560(%rbp), %rax        # 8-byte Reload
	addq	$1112, %rsp             # imm = 0x458
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp253:
.Lfunc_end23:
	.size	polyadd, .Lfunc_end23-polyadd
	.cfi_endproc
                                        # -- End function
	.globl	polymodulo              # -- Begin function polymodulo
	.p2align	4, 0x90
	.type	polymodulo,@function
polymodulo:                             # @polymodulo
.Lfunc_begin24:
	.loc	4 78 0                  # poly.c:78:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1816, %rsp             # imm = 0x718
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %r9d
	movl	$64, %eax
	movl	%eax, %r10d
	movl	$1, %eax
	movl	%eax, %r11d
	movabsq	$.L.str.11.336, %rbx
	xorl	%eax, %eax
	movl	%eax, %r14d
	movabsq	$.L.str.10.337, %r15
.Ltmp254:
	.loc	4 77 22 prologue_end    # poly.c:77:22
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r9, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%r10, %rsi
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r9, %rdx
	movl	%ecx, -68(%rbp)         # 4-byte Spill
	movq	%r11, %rcx
	movl	%r8d, -72(%rbp)         # 4-byte Spill
	movq	%rbx, %r8
	movq	%r14, %r9
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.125.446, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-64(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-88(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-72(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-104(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$79, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.12.342, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	.loc	4 79 8                  # poly.c:79:8
	movl	$1, (%rsp)
	movl	%eax, -108(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r10d
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edi
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	-52(%rbp), %r12d        # 4-byte Reload
	cmpl	%r12d, %eax
	setl	%r13b
	.loc	4 82 9                  # poly.c:82:9
	movb	%r13b, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %esi
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-144(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-152(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r13b, -153(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$79, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.127.471, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp255:
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:padded_zeros <- 1
	#DEBUG_VALUE: i <- [DW_OP_constu 68, DW_OP_minus, DW_OP_plus_uconst 1, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: i <- [DW_OP_constu 68, DW_OP_minus, DW_OP_plus_uconst 1, DW_OP_stack_value] [%rbp+0]
	.loc	4 79 8                  # poly.c:79:8
	movl	$1, (%rsp)
	movl	%eax, -160(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.128.472, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -168(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-176(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-184(%rbp), %r9         # 8-byte Reload
	movq	-168(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.129.473, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -192(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-200(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-208(%rbp), %r9         # 8-byte Reload
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-153(%rbp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -216(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-216(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-224(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-153(%rbp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	jne	.LBB24_1
	jmp	.LBB24_10
.LBB24_1:                               # %.lr.ph84
	#DEBUG_VALUE: i <- [DW_OP_constu 68, DW_OP_minus, DW_OP_plus_uconst 1, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 8 is_stmt 0         # poly.c:0:8
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.128.472, %rdx
	movabsq	$.L.str.13.343, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp256:
	.loc	4 84 5 is_stmt 1        # poly.c:84:5
	movl	$1, (%rsp)
	movl	%eax, -228(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -240(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-240(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-248(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-256(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -264(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.128.472, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -268(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-280(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.128.472, %rdx
	movabsq	$.L.str.130.474, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -308(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.44.374, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -320(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	-328(%rbp), %r9         # 8-byte Reload
	movq	-320(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jmp	.LBB24_3
.LBB24_2:                               #   in Loop: Header=BB24_3 Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 68, DW_OP_minus, DW_OP_plus_uconst 1, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.39.369, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp257:
	.loc	4 84 28                 # poly.c:84:28
	movl	$1, (%rsp)
	movl	%eax, -340(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-304(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.131.475, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-368(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-360(%rbp), %rsi        # 8-byte Reload
	movq	-304(%rbp), %r10        # 8-byte Reload
	cmpq	%r10, %rsi
	setl	%bl
.Ltmp258:
	.loc	4 84 5                  # poly.c:84:5
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-376(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%bl, -377(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.119.464, %rdx
	movabsq	$.L.str.132.476, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -384(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.44.374, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -392(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-400(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-408(%rbp), %r9         # 8-byte Reload
	movq	-392(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.129.473, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -416(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-424(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-432(%rbp), %r9         # 8-byte Reload
	movq	-416(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-377(%rbp), %bl         # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-440(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -448(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-377(%rbp), %bl         # 1-byte Reload
	testb	$1, %bl
	movq	-360(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jne	.LBB24_3
	jmp	.LBB24_10
.LBB24_3:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 68, DW_OP_minus, DW_OP_plus_uconst 1, DW_OP_stack_value] [%rbp+0]
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.133.477, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.131.475, %r8
	movabsq	$.L.str.119.464, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.13.343, %r8
	movabsq	$.L.str.128.472, %rcx
	movq	%rax, %rdi
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.133.477, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.128.472, %rax
	movq	-456(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.131.475, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.133.477, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-456(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.131.475, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-456(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
.Ltmp259:
	.loc	4 85 12 is_stmt 1       # poly.c:85:12
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$85, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.131.475, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -528(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$85, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.45.375, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.45.375, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-456(%rbp), %r11        # 8-byte Reload
	movl	4(%rdx,%r11,4), %r10d
	.loc	4 85 17 is_stmt 0       # poly.c:85:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$85, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.115.460, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.45.375, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-548(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.115.460, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-548(%rbp), %r10d       # 4-byte Reload
	cmpl	$0, %r10d
	sete	%r14b
.Ltmp260:
	.loc	4 85 12                 # poly.c:85:12
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %edx
	movq	%rax, %rsi
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -577(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$85, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.44.374, %rdx
	movabsq	$.L.str.134.478, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -584(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.119.464, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.135.479, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-600(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.115.460, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-577(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-577(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB24_2
.Ltmp261:
# %bb.4:
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 12                  # poly.c:0:12
	movl	$93, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.135.479, %rdx
	movabsq	$.L.str.136.480, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp262:
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	.loc	4 93 24 is_stmt 1       # poly.c:93:24
	movl	$1, (%rsp)
	movl	%eax, -612(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-624(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -632(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-632(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-640(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.136.480, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-68(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	setl	%r14b
.Ltmp263:
	.loc	4 93 5 is_stmt 0        # poly.c:93:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r12d
	movl	%r12d, %esi
	movq	%rsi, -648(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-648(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-656(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movb	%r14b, -657(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$93, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.135.479, %rdx
	movabsq	$.L.str.137.481, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -664(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -672(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -680(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-680(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -688(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-688(%rbp), %r9         # 8-byte Reload
	movq	-672(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.138.482, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -696(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -704(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-704(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-712(%rbp), %r9         # 8-byte Reload
	movq	-696(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.136.480, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-657(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -720(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-720(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -728(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-728(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-657(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB24_6
# %bb.5:                                # %.lr.ph79
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$93, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.138.482, %rdx
	movabsq	$.L.str.139.483, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 93 5                  # poly.c:93:5
	movl	$1, (%rsp)
	movl	%eax, -732(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -744(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-744(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -752(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-752(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.139.483, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -760(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-760(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -768(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$93, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.138.482, %rdx
	movabsq	$.L.str.52.383, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -772(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -784(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-784(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -792(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-792(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.52.383, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-800(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -808(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$93, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.138.482, %rdx
	movabsq	$.L.str.140.484, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -812(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -824(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-824(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-832(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.140.484, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %r11
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -848(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$93, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.138.482, %rdx
	movabsq	$.L.str.141.485, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -852(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.142.486, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -864(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	-872(%rbp), %r9         # 8-byte Reload
	movq	-864(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	-768(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -880(%rbp)        # 8-byte Spill
	jmp	.LBB24_8
.Ltmp264:
.LBB24_6:                               # %._crit_edge
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$98, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.143.487, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp265:
	#DEBUG_VALUE: i <- 0
	.loc	4 98 19 is_stmt 1       # poly.c:98:19
	movl	$1, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -896(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-896(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-904(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -912(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-912(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.143.487, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setl	%r14b
.Ltmp266:
	.loc	4 98 5 is_stmt 0        # poly.c:98:5
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %esi
	movq	%rsi, -928(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-928(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -937(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$98, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.25.355, %rdx
	movabsq	$.L.str.144.488, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -944(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.129.473, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -952(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-960(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -968(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-968(%rbp), %r9         # 8-byte Reload
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.24.354, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-984(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -992(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-992(%rbp), %r9         # 8-byte Reload
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.143.487, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-937(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1000(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-937(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB24_10
# %bb.7:                                # %.lr.ph
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$98, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.145.489, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 98 5                  # poly.c:98:5
	movl	$1, (%rsp)
	movl	%eax, -1012(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.146.490, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -1032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1040(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.145.489, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.145.489, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %edi
	movq	%rdi, -1064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1072(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %r10d
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %rbx       # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r10, -1088(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$98, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.24.354, %rdx
	movabsq	$.L.str.26.356, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1092(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.147.491, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1104(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	-1112(%rbp), %r9        # 8-byte Reload
	movq	-1104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -1120(%rbp)       # 8-byte Spill
	jmp	.LBB24_9
.Ltmp267:
.LBB24_8:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movq	-880(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.148.492, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp268:
	.loc	4 93 13 is_stmt 1       # poly.c:93:13
	movl	$1, (%rsp)
	movq	%rax, -1128(%rbp)       # 8-byte Spill
	movl	%r10d, -1132(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.139.483, %r8
	movabsq	$.L.str.138.482, %rcx
	movq	%rcx, -1144(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.149.493, %r8
	movabsq	$.L.str.142.486, %rcx
	movq	%rax, %rdi
	movq	%rcx, -1152(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.148.492, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.142.486, %rax
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$94, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.150.494, %rcx
	movl	$13, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp269:
	#DEBUG_VALUE: i <- [DW_OP_constu 1128, DW_OP_minus] [%rbp+0]
	.loc	4 94 18                 # poly.c:94:18
	movl	$1, (%rsp)
	movl	%r10d, -1156(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.52.383, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.148.492, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1168(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1168(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.150.494, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	subq	%r11, %rdx
	.loc	4 95 16                 # poly.c:95:16
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.151.495, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1180(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.150.494, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1176(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -1192(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1192(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.151.495, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1176(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.152.496, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1204(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.151.495, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1216(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1216(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.152.496, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-1176(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 95 23 is_stmt 0       # poly.c:95:23
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1220(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.153.497, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1224(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.148.492, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -1232(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1232(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.153.497, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1240(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.154.498, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1244(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.153.497, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1240(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1256(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1256(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.154.498, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 95 21                 # poly.c:95:21
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1260(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.155.499, %rcx
	movl	$13, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1264(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.154.498, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1260(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.152.496, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1220(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1272(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.155.499, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1220(%rbp), %r10d      # 4-byte Reload
	movl	-1260(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %r10d
	.loc	4 95 14                 # poly.c:95:14
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1276(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$95, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.156.500, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1280(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.151.495, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.155.499, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1276(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1288(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$96, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.157.501, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-1176(%rbp), %r11       # 8-byte Reload
	movl	-1276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	4 96 14 is_stmt 1       # poly.c:96:14
	movl	$1, (%rsp)
	movl	%r10d, -1292(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.153.497, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1240(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rdi
	movq	%rdx, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -1312(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1312(%rbp), %r9        # 8-byte Reload
	movq	-1304(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$93, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.149.493, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movl	$0, (%rax,%r11,4)
.Ltmp270:
	.loc	4 93 32                 # poly.c:93:32
	movl	$1, (%rsp)
	movl	%r10d, -1316(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movq	$-1, %rdx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -1328(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.148.492, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1336(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.149.493, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	addq	$-1, %rdx
	.loc	4 93 24 is_stmt 0       # poly.c:93:24
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$93, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.158.502, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1348(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.140.484, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-848(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.148.492, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1360(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.158.502, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	setg	%r15b
.Ltmp271:
	.loc	4 93 5                  # poly.c:93:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -1368(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1368(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -1369(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$93, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.142.486, %rdx
	movabsq	$.L.str.159.503, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1376(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.142.486, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1384(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.25.355, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1392(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.158.502, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-1369(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1400(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1400(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1369(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-1344(%rbp), %rax       # 8-byte Reload
	movq	%rax, -880(%rbp)        # 8-byte Spill
	jne	.LBB24_8
	jmp	.LBB24_6
.Ltmp272:
.LBB24_9:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movq	-1120(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp273:
	.loc	4 98 13 is_stmt 1       # poly.c:98:13
	movl	$1, (%rsp)
	movq	%rax, -1408(%rbp)       # 8-byte Spill
	movl	%r10d, -1412(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.24.354, %rcx
	movq	%rax, %rdx
	movq	%rcx, -1424(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1424(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.147.491, %rcx
	movq	%rax, %rdi
	movq	%rcx, -1432(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1432(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.147.491, %rax
	movq	-1408(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$99, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.160.504, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp274:
	#DEBUG_VALUE: i <- [DW_OP_constu 1408, DW_OP_minus] [%rbp+0]
	.loc	4 99 17                 # poly.c:99:17
	movl	$1, (%rsp)
	movl	%r10d, -1436(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1408(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -1448(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1448(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.160.504, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1408(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1456(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$99, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.161.505, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1460(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.160.504, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1456(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1472(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1472(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.161.505, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-1408(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 99 16 is_stmt 0       # poly.c:99:16
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1476(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$99, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.162.506, %rcx
	movl	$13, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1480(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.161.505, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1476(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rdi
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -1496(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1496(%rbp), %r9        # 8-byte Reload
	movq	-1488(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.162.506, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	xorl	%r10d, %r10d
	movl	-1476(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %r10d
	.loc	4 100 21 is_stmt 1      # poly.c:100:21
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1500(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.163.507, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1504(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1512(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.161.505, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1476(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1520(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1520(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.163.507, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1476(%rbp), %r10d      # 4-byte Reload
	cmpl	$0, %r10d
	setl	%r15b
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %ebx
	movl	%ebx, %edx
	movq	%rax, %rsi
	movq	%rcx, -1528(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -1529(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.86.423, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1536(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-72(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.162.506, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1500(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1544(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1544(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1500(%rbp), %r10d      # 4-byte Reload
	movq	%rax, -1552(%rbp)       # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-72(%rbp), %ebx         # 4-byte Reload
	idivl	%ebx
	.loc	4 100 16 is_stmt 0      # poly.c:100:16
	movl	%edx, %r14d
	movl	%r14d, %r11d
	movl	%edx, -1556(%rbp)       # 4-byte Spill
	movq	%r11, %rdx
	movq	-1552(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.164.508, %rcx
	movl	$55, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1560(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-72(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rdx, -1576(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1576(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1584(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1584(%rbp), %r13       # 8-byte Reload
	movq	%r9, -1592(%rbp)        # 8-byte Spill
	movq	%r13, %r9
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.163.507, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-1529(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1600(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1600(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %ecx
	movabsq	$.L.str.164.508, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rdx
	xorl	%ebx, %ebx
	.loc	4 100 21                # poly.c:100:21
	movl	-1476(%rbp), %r14d      # 4-byte Reload
	cmpl	$0, %r14d
	.loc	4 100 16                # poly.c:100:16
	movl	-72(%rbp), %r10d        # 4-byte Reload
	cmovll	%ebx, %r10d
	movl	%r10d, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1616(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%r10d, -1620(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.97.435, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1624(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1556(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.164.508, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1620(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1640(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1648(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1648(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.97.435, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1620(%rbp), %r10d      # 4-byte Reload
	movl	-1556(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %r10d
	.loc	4 100 14                # poly.c:100:14
	movl	%r10d, %r14d
	movl	%r14d, %r11d
	movq	%rdx, -1656(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%r10d, -1660(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$100, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.165.509, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1664(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.160.504, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1672(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.97.435, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1660(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1680(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1688(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1688(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$98, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-1408(%rbp), %r13       # 8-byte Reload
	movl	-1660(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r11,%r13,4)
.Ltmp275:
	.loc	4 98 27 is_stmt 1       # poly.c:98:27
	movl	$1, (%rsp)
	movl	%r10d, -1692(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -1704(%rbp)       # 8-byte Spill
	movq	-1704(%rbp), %r9        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-1408(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1712(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1408(%rbp), %r11       # 8-byte Reload
	addq	$1, %r11
	.loc	4 98 19 is_stmt 0       # poly.c:98:19
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1720(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	movq	%r11, -1728(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$98, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1732(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1744(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1752(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-1088(%rbp), %r11       # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r15b
.Ltmp276:
	.loc	4 98 5                  # poly.c:98:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %r13d
	movq	%rcx, %rsi
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%r13, %rdx
	movq	-1760(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	movb	%r15b, -1761(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$98, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.147.491, %rdx
	movabsq	$.L.str.166.510, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1768(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.129.473, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1776(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1792(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1792(%rbp), %r9        # 8-byte Reload
	movq	-1776(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.147.491, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1800(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1808(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -1816(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-1816(%rbp), %r9        # 8-byte Reload
	movq	-1800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-1761(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1824(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1824(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1832(%rbp), %r13       # 8-byte Reload
	movq	%r13, (%rsp)
	callq	trace_logger_log_int
	movb	-1761(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-1728(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -1120(%rbp)       # 8-byte Spill
	jne	.LBB24_10
	jmp	.LBB24_9
.Ltmp277:
.LBB24_10:                              # %.critedge
	#DEBUG_VALUE: polymodulo:exp <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:mod_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:polymod <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymodulo:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$103, %eax
	movl	%eax, %edi
	movabsq	$.L.str.126.470, %rsi
	movabsq	$.L.str.129.473, %rdx
	movabsq	$.L.str.167.511, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 103 1 is_stmt 1       # poly.c:103:1
	movl	$1, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.126.470, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$1816, %rsp             # imm = 0x718
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp278:
.Lfunc_end24:
	.size	polymodulo, .Lfunc_end24-polymodulo
	.cfi_endproc
                                        # -- End function
	.globl	polymul                 # -- Begin function polymul
	.p2align	4, 0x90
	.type	polymul,@function
polymul:                                # @polymul
.Lfunc_begin25:
	.loc	4 106 0                 # poly.c:106:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2120, %rsp             # imm = 0x848
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	16(%rbp), %eax
	movl	$24601, %r10d           # imm = 0x6019
	movl	%r10d, %r11d
	movl	$64, %r10d
	movl	%r10d, %ebx
	movl	$1, %r10d
	movl	%r10d, %r14d
	movabsq	$.L.str.11.336, %r15
	xorl	%r10d, %r10d
	movl	%r10d, %r12d
	movabsq	$.L.str.10.337, %r13
.Ltmp279:
	.loc	4 105 19 prologue_end   # poly.c:105:19
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movl	%esi, -52(%rbp)         # 4-byte Spill
	movq	%rbx, %rsi
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movl	%ecx, -68(%rbp)         # 4-byte Spill
	movq	%r14, %rcx
	movl	%r8d, -72(%rbp)         # 4-byte Spill
	movq	%r15, %r8
	movq	%r9, -80(%rbp)          # 8-byte Spill
	movq	%r12, %r9
	movq	%r13, (%rsp)
	movl	%eax, -84(%rbp)         # 4-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.91.428, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-104(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-72(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.125.446, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$108, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.56.388, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
.Ltmp280:
	.loc	4 108 5                 # poly.c:108:5
	movl	$1, (%rsp)
	movl	%eax, -140(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-152(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -160(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-160(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-168(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56.388, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-84(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	setl	%al
	movb	%al, %sil
	andb	$1, %sil
	movzbl	%sil, %esi
	movl	%esi, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-176(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%al, -177(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$108, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.39.369, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %eax
	movl	%eax, %r11d
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-192(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-200(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-208(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	-84(%rbp), %r10d        # 4-byte Reload
	cmpl	%r10d, %eax
	setl	%al
	movb	%al, %sil
	andb	$1, %sil
	movzbl	%sil, %esi
	movl	%esi, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-216(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%al, -217(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$108, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.41.371, %rcx
	movl	$26, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.39.369, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-217(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, %esi
	movq	%rsi, -232(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-232(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -240(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-240(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.56.388, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-177(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -248(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-248(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-256(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.41.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-177(%rbp), %al         # 1-byte Reload
	movb	-217(%rbp), %sil        # 1-byte Reload
	andb	%sil, %al
	movb	%al, %sil
	andb	$1, %sil
	movzbl	%sil, %r10d
	movl	%r10d, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-264(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%al, -265(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	movl	$108, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.7.339, %rdx
	movabsq	$.L.str.106.449, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -272(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.107.450, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -280(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-288(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-296(%rbp), %r9         # 8-byte Reload
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.108.451, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -304(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-312(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-320(%rbp), %r9         # 8-byte Reload
	movq	-304(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.41.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-265(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -328(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-328(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-336(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movb	-265(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB25_2
# %bb.1:
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movl	$108, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.108.451, %rdx
	movabsq	$.L.str.109.452, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 108 5                 # poly.c:108:5
	movl	$1, (%rsp)
	movl	%eax, -340(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$5, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$__assert_fail, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110.453, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.111.454, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%r9, -360(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-360(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.112.455, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	-368(%rbp), %r10        # 8-byte Reload
	movq	%r9, -376(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-376(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movl	$3, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$108, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %r10        # 8-byte Reload
	movq	%r9, -392(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-392(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.169.515, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %r10        # 8-byte Reload
	movq	%r9, -408(%rbp)         # 8-byte Spill
	movq	%r10, %r9
	movq	-408(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str.4.457, %rdi
	movabsq	$.L.str.5.458, %rsi
	movl	$108, %edx
	movabsq	$.L__PRETTY_FUNCTION__.polymul, %rcx
	callq	__assert_fail
	movl	$108, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.108.451, %rdx
	movabsq	$.L.str.114.459, %rcx
	movl	$7, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -412(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
.Ltmp281:
.LBB25_2:
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$109, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.68.402, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 109 29 is_stmt 1      # poly.c:109:29
	movl	$1, (%rsp)
	movl	%eax, -416(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-424(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-432(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-440(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68.402, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	-52(%rbp), %r10d        # 4-byte Reload
	addl	%r10d, %eax
	.loc	4 109 9 is_stmt 0       # poly.c:109:9
	movl	%eax, %r14d
	movl	%r14d, %r11d
	movq	%rdx, -448(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-448(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -452(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.170.516, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp282:
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	.loc	4 111 51 is_stmt 1      # poly.c:111:51
	movl	$1, (%rsp)
	movl	%eax, -456(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	-464(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68.402, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-452(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -472(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-472(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-480(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.170.516, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-452(%rbp), %eax        # 4-byte Reload
	addl	$1, %eax
	.loc	4 111 40 is_stmt 0      # poly.c:111:40
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-488(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -492(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.69.403, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -496(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.170.516, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-492(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-504(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-512(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69.403, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-492(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %r11
	.loc	4 111 54                # poly.c:111:54
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-520(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -528(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.70.404, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -532(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rdi
	movq	%rdi, -544(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	-552(%rbp), %r9         # 8-byte Reload
	movq	-544(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.69.403, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-560(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.70.404, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-528(%rbp), %r11        # 8-byte Reload
	shlq	$2, %r11
	.loc	4 111 33                # poly.c:111:33
	movq	%rdx, -568(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-568(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.46.376, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -580(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$malloc, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65.400, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r11
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.70.404, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-576(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-592(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movq	-576(%rbp), %rdi        # 8-byte Reload
	callq	malloc
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 111 26                # poly.c:111:26
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-600(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%rax, -608(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.16.346, %rcx
	movl	$47, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -612(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-608(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.46.376, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-608(%rbp), %rdx        # 8-byte Reload
	.loc	4 111 10                # poly.c:111:10
	movq	%rdx, -632(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$112, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.171.517, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp283:
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: i <- 0
	.loc	4 112 19 is_stmt 1      # poly.c:112:19
	movl	$1, (%rsp)
	movl	%r10d, -636(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rdx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.68.402, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-452(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.171.517, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-452(%rbp), %r10d       # 4-byte Reload
	cmpl	$0, %r10d
	setl	%r15b
.Ltmp284:
	.loc	4 112 5 is_stmt 0       # poly.c:112:5
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r14d
	movl	%r14d, %edx
	movq	%rax, %rsi
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -665(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$112, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.107.450, %rdx
	movabsq	$.L.str.118.463, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.172.518, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.173.519, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.171.517, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-665(%rbp), %r15b       # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -696(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-665(%rbp), %r15b       # 1-byte Reload
	testb	$1, %r15b
	jne	.LBB25_4
# %bb.3:                                # %.lr.ph69
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$112, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.173.519, %rdx
	movabsq	$.L.str.38.368, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 112 5                 # poly.c:112:5
	movl	$1, (%rsp)
	movl	%eax, -700(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-712(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -720(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-720(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -728(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-728(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.38.368, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	-52(%rbp), %r10d        # 4-byte Reload
	addl	%r10d, %eax
	movl	%eax, %r14d
	movl	%r14d, %r11d
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-736(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -740(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$112, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.173.519, %rdx
	movabsq	$.L.str.75.409, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -744(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	-752(%rbp), %r9         # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.38.368, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-740(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -760(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-760(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-768(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-740(%rbp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.173.519, %rdx
	movabsq	$.L.str.174.520, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edi
	movq	%rdi, -792(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-792(%rbp), %r11        # 8-byte Reload
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-800(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.174.520, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %r11d
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-808(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, (%rsp)
	movq	%r11, -816(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$112, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.173.519, %rdx
	movabsq	$.L.str.175.521, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.51.382, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -832(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	-840(%rbp), %r9         # 8-byte Reload
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	jmp	.LBB25_6
.Ltmp285:
.LBB25_4:                               # %._crit_edge70
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.172.518, %rdx
	movabsq	$.L.str.176.522, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp286:
	#DEBUG_VALUE: i <- 0
	.loc	4 115 25 is_stmt 1      # poly.c:115:25
	movl	$1, (%rsp)
	movl	%eax, -852(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-864(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -872(%rbp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	-872(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -880(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -888(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-888(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.176.522, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setl	%r14b
.Ltmp287:
	.loc	4 115 11 is_stmt 0      # poly.c:115:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %esi
	movq	%rsi, -896(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-896(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -904(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-904(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -905(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.172.518, %rdx
	movabsq	$.L.str.177.523, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -912(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.178.524, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -920(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-928(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	-936(%rbp), %r9         # 8-byte Reload
	movq	-920(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.179, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -944(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -960(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	-960(%rbp), %r9         # 8-byte Reload
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.176.522, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-905(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -968(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-968(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-976(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-905(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	jne	.LBB25_7
# %bb.5:                                # %.lr.ph64
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 11                  # poly.c:0:11
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.179, %rdx
	movabsq	$.L.str.180, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -980(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-992(%rbp), %r11        # 8-byte Reload
	movq	%rcx, -1000(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-1000(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1008(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1008(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.180, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setl	%r14b
	.loc	4 115 11                # poly.c:115:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %ebx
	movl	%ebx, %esi
	movq	%rsi, -1024(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r14b, -1033(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.179, %rdx
	movabsq	$.L.str.45.375, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1040(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -1048(%rbp)       # 8-byte Spill
	movq	-1048(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105.445, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1056(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1056(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-68(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1076(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.179, %rdx
	movabsq	$.L.str.78.412, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1080(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -1088(%rbp)       # 8-byte Spill
	movq	-1088(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1096(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1096(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.78.412, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-52(%rbp), %eax         # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.179, %rdx
	movabsq	$.L.str.181, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.78.412, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1128(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1128(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1152(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.179, %rdx
	movabsq	$.L.str.76.410, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1156(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1168(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1168(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1192(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.179, %rdx
	movabsq	$.L.str.182, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.183, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1208(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1216(%rbp)       # 8-byte Spill
	movq	-1216(%rbp), %r9        # 8-byte Reload
	movq	-1208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	jmp	.LBB25_8
.Ltmp288:
.LBB25_6:                               # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 11                  # poly.c:0:11
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.184, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp289:
	.loc	4 112 13 is_stmt 1      # poly.c:112:13
	movl	$1, (%rsp)
	movq	%rax, -1232(%rbp)       # 8-byte Spill
	movl	%r10d, -1236(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.173.519, %rcx
	movq	%rax, %rdx
	movq	%rcx, -1248(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.185, %r8
	movabsq	$.L.str.51.382, %rcx
	movq	%rax, %rdi
	movq	%rcx, -1256(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1256(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.51.382, %rax
	movq	-1232(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$113, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.37.367, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp290:
	#DEBUG_VALUE: i <- [DW_OP_constu 1232, DW_OP_minus] [%rbp+0]
	.loc	4 113 9                 # poly.c:113:9
	movl	$1, (%rsp)
	movl	%r10d, -1260(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1232(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-632(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1272(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1232(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-632(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	4 113 26 is_stmt 0      # poly.c:113:26
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1280(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$113, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.186, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1284(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.37.367, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1280(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.74.408, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rdi
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -1304(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1304(%rbp), %r9        # 8-byte Reload
	movq	-1296(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$112, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.185, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movl	$0, (%rax,%r11,4)
.Ltmp291:
	.loc	4 112 34 is_stmt 1      # poly.c:112:34
	movl	$1, (%rsp)
	movl	%r10d, -1308(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %rcx
	movq	%rcx, -1320(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.184, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1232(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1328(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.185, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1232(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	4 112 19 is_stmt 0      # poly.c:112:19
	movq	%rdx, -1336(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$112, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.187, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1340(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.174.520, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-816(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.185, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1336(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1352(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1352(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.187, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	-1336(%rbp), %rdx       # 8-byte Reload
	movq	-816(%rbp), %rsi        # 8-byte Reload
	cmpq	%rsi, %rdx
	sete	%bl
.Ltmp292:
	.loc	4 112 5                 # poly.c:112:5
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -1360(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bl, -1361(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$112, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.51.382, %rdx
	movabsq	$.L.str.188, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1368(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.172.518, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1376(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1376(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.51.382, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1384(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.187, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-1361(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1392(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1392(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1361(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-1336(%rbp), %rax       # 8-byte Reload
	movq	%rax, -848(%rbp)        # 8-byte Spill
	jne	.LBB25_4
	jmp	.LBB25_6
.Ltmp293:
.LBB25_7:                               # %._crit_edge65
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5                   # poly.c:0:5
	movl	$121, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.178.524, %rdx
	movabsq	$.L.str.189, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 121 19 is_stmt 1      # poly.c:121:19
	movl	$1, (%rsp)
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$polymodulo, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.126.470, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-632(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68.402, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-452(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
                                        # implicit-def: %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r9
	movq	%rcx, -1424(%rbp)       # 8-byte Spill
	movq	-1424(%rbp), %r10       # 8-byte Reload
	movq	%r9, -1432(%rbp)        # 8-byte Spill
	movq	%r10, %r9
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103.447, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-72(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
                                        # implicit-def: %rdx
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movl	-452(%rbp), %esi        # 4-byte Reload
	movl	-84(%rbp), %ecx         # 4-byte Reload
	movl	-72(%rbp), %r8d         # 4-byte Reload
	callq	polymodulo
	movl	$19134, %ecx            # imm = 0x4ABE
	movl	%ecx, %edi
	movl	$64, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
                                        # kill: def %rcx killed %ecx
	movabsq	$.L.str.189, %r8
	xorl	%ebx, %ebx
	movl	%ebx, %r9d
	movabsq	$.L.str.10.337, %rdx
	.loc	4 121 10 is_stmt 0      # poly.c:121:10
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1456(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$123, %ebx
	movl	%ebx, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.178.524, %rdx
	movabsq	$.L.str.190, %rcx
	movl	$1, %ebx
	movl	%ebx, %r8d
	xorl	%r9d, %r9d
	movl	$1, %ebx
.Ltmp294:
	#DEBUG_VALUE: polymul:result <- [DW_OP_constu 1464, DW_OP_minus] [%rbp+0]
	.loc	4 123 5 is_stmt 1       # poly.c:123:5
	movl	$1, (%rsp)
	movl	%ebx, -1468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.189, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1464(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1480(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movabsq	$.L.str.168.514, %rdi
	movl	$1, %ebx
	movl	%ebx, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	movq	-1464(%rbp), %rax       # 8-byte Reload
	addq	$2120, %rsp             # imm = 0x848
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB25_8:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_11 Depth 2
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 5 is_stmt 0         # poly.c:0:5
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.183, %rdx
	movabsq	$.L.str.191, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp295:
	.loc	4 116 23 is_stmt 1      # poly.c:116:23
	movl	$1, (%rsp)
	movq	%rax, -1488(%rbp)       # 8-byte Spill
	movl	%r10d, -1492(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.179, %rcx
	movq	%rax, %rdx
	movq	%rcx, -1504(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.192, %r8
	movabsq	$.L.str.193, %rcx
	movq	%rax, %rdi
	movq	%rcx, -1512(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1512(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.191, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.193, %rax
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$116, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.183, %rdx
	movabsq	$.L.str.194, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp296:
	#DEBUG_VALUE: j <- 0
	#DEBUG_VALUE: i <- [DW_OP_constu 1488, DW_OP_minus] [%rbp+0]
	.loc	4 116 15 is_stmt 0      # poly.c:116:15
	movl	$1, (%rsp)
	movl	%r10d, -1516(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.193, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.195, %r8
	movabsq	$.L.str.10.337, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1536(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1536(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.180, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movb	-1033(%rbp), %r11b      # 1-byte Reload
	andb	$1, %r11b
	movzbl	%r11b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1544(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1544(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1033(%rbp), %r11b      # 1-byte Reload
	testb	$1, %r11b
	jne	.LBB25_10
# %bb.9:                                # %.lr.ph
                                        #   in Loop: Header=BB25_8 Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 1488, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 15                  # poly.c:0:15
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.195, %rdx
	movabsq	$.L.str.121.466, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1548(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11.336, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.121.466, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1488(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1576(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1576(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1584(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.195, %rdx
	movabsq	$.L.str.140.484, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1588(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.121.466, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.140.484, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	.loc	4 116 15                # poly.c:116:15
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1608(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$116, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.195, %rdx
	movabsq	$.L.str.196, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.197, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -1624(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	-1632(%rbp), %r9        # 8-byte Reload
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -1640(%rbp)       # 8-byte Spill
	jmp	.LBB25_11
.Ltmp297:
.LBB25_10:                              # %._crit_edge
                                        #   in Loop: Header=BB25_8 Depth=1
	#DEBUG_VALUE: i <- [DW_OP_constu 1488, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 15                  # poly.c:0:15
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.193, %rdx
	movabsq	$.L.str.192, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	4 115 36 is_stmt 1      # poly.c:115:36
	movl	$1, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r10
	movq	%rcx, -1656(%rbp)       # 8-byte Spill
	movq	-1656(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-1488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.192, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1488(%rbp), %r10       # 8-byte Reload
	addq	$1, %r10
	.loc	4 115 25 is_stmt 0      # poly.c:115:25
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1680(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.193, %rdx
	movabsq	$.L.str.198, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.192, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.198, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1680(%rbp), %rsi       # 8-byte Reload
	movq	-1152(%rbp), %r10       # 8-byte Reload
	cmpq	%r10, %rsi
	sete	%bl
.Ltmp298:
	.loc	4 115 11                # poly.c:115:11
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%bl, -1713(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$115, %eax
	movl	%eax, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.193, %rdx
	movabsq	$.L.str.199, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1720(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.178.524, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1728(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1736(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -1744(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-1744(%rbp), %r9        # 8-byte Reload
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.183, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -1752(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1760(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -1768(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-1768(%rbp), %r9        # 8-byte Reload
	movq	-1752(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.198, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-1713(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -1776(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-1776(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-1713(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-1680(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	jne	.LBB25_7
	jmp	.LBB25_8
.LBB25_11:                              #   Parent Loop BB25_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: i <- [DW_OP_constu 1488, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:result_coeffs <- [DW_OP_constu 632, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:new_degree <- [DW_OP_constu 452, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod_size <- [DW_OP_constu 84, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:polymod <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:mod <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y_size <- [DW_OP_constu 68, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:y <- [DW_OP_constu 64, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x_size <- [DW_OP_constu 52, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: polymul:x <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	.loc	4 0 11                  # poly.c:0:11
	movq	-1640(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.32.362, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp299:
	.loc	4 116 23 is_stmt 1      # poly.c:116:23
	movl	$1, (%rsp)
	movq	%rax, -1792(%rbp)       # 8-byte Spill
	movl	%r10d, -1796(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.9.341, %r8
	movl	$1, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.195, %rcx
	movq	%rax, %rdx
	movq	%rcx, -1808(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1808(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.33.363, %r8
	movabsq	$.L.str.197, %rcx
	movq	%rax, %rdi
	movq	%rcx, -1816(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1816(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.197, %rax
	movq	-1792(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.200, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp300:
	#DEBUG_VALUE: j <- [DW_OP_constu 1792, DW_OP_minus] [%rbp+0]
	.loc	4 117 42                # poly.c:117:42
	movl	$1, (%rsp)
	movl	%r10d, -1820(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32.362, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1792(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.91.428, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -1832(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1832(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.200, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1792(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-64(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1840(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.201, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1844(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.200, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1840(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1856(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.201, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-1792(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	4 117 40 is_stmt 0      # poly.c:117:40
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1860(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.202, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1864(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.140.484, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1612(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.201, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1860(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1872(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1872(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.202, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1860(%rbp), %r10d      # 4-byte Reload
	movl	-1612(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	.loc	4 117 28                # poly.c:117:28
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1876(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.150.494, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1880(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.191, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1792(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.150.494, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1792(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	4 117 13                # poly.c:117:13
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.160.504, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1900(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.150.494, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.46.376, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-632(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -1912(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1912(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.160.504, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-632(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	4 117 32                # poly.c:117:32
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -1920(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.152.496, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1924(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.160.504, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rcx
	movq	%rax, %rdi
	movq	-1920(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1936(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1936(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.152.496, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movq	-632(%rbp), %rdx        # 8-byte Reload
	movq	-1896(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1940(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$117, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.203, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1944(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.202, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1876(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.152.496, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1940(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1952(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1952(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.203, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1940(%rbp), %r10d      # 4-byte Reload
	movl	-1876(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %r10d
	.loc	4 118 53 is_stmt 1      # poly.c:118:53
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -1956(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$118, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.86.423, %rcx
	movl	$21, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1960(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.87.417, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-72(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.203, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rcx
	movl	-1956(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -1968(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1968(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rax
	movl	-1956(%rbp), %r10d      # 4-byte Reload
	movq	%rax, -1976(%rbp)       # 8-byte Spill
	movl	%r10d, %eax
	cltd
	movl	-72(%rbp), %ebx         # 4-byte Reload
	idivl	%ebx
	.loc	4 118 32 is_stmt 0      # poly.c:118:32
	movl	%edx, %r14d
	movl	%r14d, %r11d
	movl	%edx, -1980(%rbp)       # 4-byte Spill
	movq	%r11, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$118, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.204, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1984(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.160.504, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1920(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1992(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.86.423, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movl	-1980(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2000(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2008(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2008(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$116, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.33.363, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-632(%rbp), %r11        # 8-byte Reload
	movq	-1896(%rbp), %r15       # 8-byte Reload
	movl	-1980(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r11,%r15,4)
.Ltmp301:
	.loc	4 116 40 is_stmt 1      # poly.c:116:40
	movl	$1, (%rsp)
	movl	%r10d, -2012(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.9.341, %r8
	movabsq	$.L.str.10.337, %r11
	movq	%rcx, -2024(%rbp)       # 8-byte Spill
	movq	-2024(%rbp), %r9        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.32.362, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-1792(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2032(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2032(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1792(%rbp), %r11       # 8-byte Reload
	addq	$1, %r11
	.loc	4 116 29 is_stmt 0      # poly.c:116:29
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2040(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movq	%r11, -2048(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$116, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.80.414, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2052(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.76.410, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-1192(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2064(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2064(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33.363, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	%rcx, %rdi
	movq	-2048(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2072(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movq	-2048(%rbp), %rsi       # 8-byte Reload
	movq	-1192(%rbp), %r11       # 8-byte Reload
	cmpq	%r11, %rsi
	sete	%r12b
.Ltmp302:
	.loc	4 116 15                # poly.c:116:15
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %r10d
	movl	%r10d, %r15d
	movq	%rcx, %rsi
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2080(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movb	%r12b, -2081(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$116, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.168.514, %rsi
	movabsq	$.L.str.197, %rdx
	movabsq	$.L.str.205, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2088(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movabsq	$.L.str.193, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -2096(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2104(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -2112(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	-2112(%rbp), %r9        # 8-byte Reload
	movq	-2096(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.197, %r8
	movabsq	$.L.str.10.337, %rsi
	movq	%rsi, -2120(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2128(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -2136(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-2136(%rbp), %r9        # 8-byte Reload
	movq	-2120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.80.414, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.10.337, %rdx
	movb	-2081(%rbp), %r12b      # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %esi
	movq	%rcx, %rdi
	movq	%rsi, -2144(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2144(%rbp), %r11       # 8-byte Reload
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2152(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	movb	-2081(%rbp), %r12b      # 1-byte Reload
	testb	$1, %r12b
	movq	-2048(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -1640(%rbp)       # 8-byte Spill
	jne	.LBB25_10
	jmp	.LBB25_11
.Ltmp303:
.Lfunc_end25:
	.size	polymul, .Lfunc_end25-polymul
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	4, 0x90         # -- Begin function _GLOBAL__sub_I_trace_logger.cpp
	.type	_GLOBAL__sub_I_trace_logger.cpp,@function
_GLOBAL__sub_I_trace_logger.cpp:        # @_GLOBAL__sub_I_trace_logger.cpp
.Lfunc_begin26:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	popq	%rbp
	jmp	__cxx_global_var_init.1 # TAILCALL
.Lfunc_end26:
	.size	_GLOBAL__sub_I_trace_logger.cpp, .Lfunc_end26-_GLOBAL__sub_I_trace_logger.cpp
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function __cxx_global_var_init
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
.Lfunc_begin27:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z8gz_filesB5cxx11, %eax
	movl	%eax, %edi
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
	movl	$__dtor__Z8gz_filesB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	atexit                  # TAILCALL
.Lfunc_end27:
	.size	__cxx_global_var_init, .Lfunc_end27-__cxx_global_var_init
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function __cxx_global_var_init.1
	.type	__cxx_global_var_init.1,@function
__cxx_global_var_init.1:                # @__cxx_global_var_init.1
.Lfunc_begin28:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z12labelmap_strB5cxx11, %eax
	movl	%eax, %edi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev
	movl	$__dtor__Z12labelmap_strB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	atexit                  # TAILCALL
.Lfunc_end28:
	.size	__cxx_global_var_init.1, .Lfunc_end28-__cxx_global_var_init.1
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function __dtor__Z12labelmap_strB5cxx11
	.type	__dtor__Z12labelmap_strB5cxx11,@function
__dtor__Z12labelmap_strB5cxx11:         # @__dtor__Z12labelmap_strB5cxx11
.Lfunc_begin29:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z12labelmap_strB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev # TAILCALL
.Lfunc_end29:
	.size	__dtor__Z12labelmap_strB5cxx11, .Lfunc_end29-__dtor__Z12labelmap_strB5cxx11
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
.Lfunc_begin30:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev # TAILCALL
.Lfunc_end30:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev, .Lfunc_end30-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	4, 0x90         # -- Begin function __dtor__Z8gz_filesB5cxx11
	.type	__dtor__Z8gz_filesB5cxx11,@function
__dtor__Z8gz_filesB5cxx11:              # @__dtor__Z8gz_filesB5cxx11
.Lfunc_begin31:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z8gz_filesB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev # TAILCALL
.Lfunc_end31:
	.size	__dtor__Z8gz_filesB5cxx11, .Lfunc_end31-__dtor__Z8gz_filesB5cxx11
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev
.Lfunc_begin32:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev # TAILCALL
.Lfunc_end32:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev, .Lfunc_end32-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev
.Lfunc_begin33:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception0
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
.Ltmp304:
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
.Ltmp305:
	jmp	.LBB33_1
.LBB33_1:
	movq	-8(%rbp), %rax          # 8-byte Reload
	movq	%rax, %rdi
	addq	$32, %rsp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev # TAILCALL
.LBB33_2:
.Ltmp306:
	movl	%edx, %ecx
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rdx, %rdi
	movl	%ecx, -12(%rbp)         # 4-byte Spill
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	__clang_call_terminate
.Lfunc_end33:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev, .Lfunc_end33-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table33:
.Lexception0:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp304-.Lfunc_begin33 # >> Call Site 1 <<
	.long	.Ltmp305-.Ltmp304       #   Call between .Ltmp304 and .Ltmp305
	.long	.Ltmp306-.Lfunc_begin33 #     jumps to .Ltmp306
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
.Lfunc_begin34:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	16(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end34:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv, .Lfunc_end34-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin35:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	cmpq	$0, %rsi
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	je	.LBB35_3
# %bb.1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jmp	.LBB35_2
.LBB35_2:                               # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jne	.LBB35_2
.LBB35_3:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end35:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E, .Lfunc_end35-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
.Lfunc_begin36:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end36:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev, .Lfunc_end36-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text.__clang_call_terminate,"axG",@progbits,__clang_call_terminate,comdat
	.hidden	__clang_call_terminate  # -- Begin function __clang_call_terminate
	.weak	__clang_call_terminate
	.p2align	4, 0x90
	.type	__clang_call_terminate,@function
__clang_call_terminate:                 # @__clang_call_terminate
.Lfunc_begin37:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	__cxa_begin_catch
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	_ZSt9terminatev
.Lfunc_end37:
	.size	__clang_call_terminate, .Lfunc_end37-__clang_call_terminate
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
.Lfunc_begin38:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	24(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end38:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base, .Lfunc_end38-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
.Lfunc_begin39:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	16(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end39:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base, .Lfunc_end39-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin40:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-16(%rbp), %rsi         # 8-byte Reload
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E # TAILCALL
.Lfunc_end40:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E, .Lfunc_end40-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin41:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception1
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
.Ltmp307:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
.Ltmp308:
	jmp	.LBB41_1
.LBB41_1:
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB41_2:
.Ltmp309:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	callq	__clang_call_terminate
.Lfunc_end41:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E, .Lfunc_end41-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table41:
.Lexception1:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp307-.Lfunc_begin41 # >> Call Site 1 <<
	.long	.Ltmp308-.Ltmp307       #   Call between .Ltmp307 and .Ltmp308
	.long	.Ltmp309-.Lfunc_begin41 #     jumps to .Ltmp309
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin42:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception2
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
.Ltmp310:
	movl	$1, %ecx
	movl	%ecx, %edx
	movq	%rax, %rdi
	movq	-8(%rbp), %rsi          # 8-byte Reload
	callq	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
.Ltmp311:
	jmp	.LBB42_1
.LBB42_1:
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB42_2:
.Ltmp312:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -12(%rbp)         # 4-byte Spill
	callq	__clang_call_terminate
.Lfunc_end42:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E, .Lfunc_end42-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table42:
.Lexception2:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp310-.Lfunc_begin42 # >> Call Site 1 <<
	.long	.Ltmp311-.Ltmp310       #   Call between .Ltmp310 and .Ltmp311
	.long	.Ltmp312-.Lfunc_begin42 #     jumps to .Ltmp312
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
.Lfunc_begin43:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end43:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv, .Lfunc_end43-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
.Lfunc_begin44:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m # TAILCALL
.Lfunc_end44:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m, .Lfunc_end44-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m
.Lfunc_begin45:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	popq	%rbp
	jmp	_ZdlPv                  # TAILCALL
.Lfunc_end45:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m, .Lfunc_end45-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,"axG",@progbits,_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,comdat
	.weak	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv # -- Begin function _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.p2align	4, 0x90
	.type	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,@function
_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv: # @_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
.Lfunc_begin46:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$32, %rdi
	popq	%rbp
	jmp	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # TAILCALL
.Lfunc_end46:
	.size	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv, .Lfunc_end46-_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_ # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
.Lfunc_begin47:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_ # TAILCALL
.Lfunc_end47:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_, .Lfunc_end47-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_ # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_
.Lfunc_begin48:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	popq	%rbp
	jmp	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev # TAILCALL
.Lfunc_end48:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_, .Lfunc_end48-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev,"axG",@progbits,_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev,comdat
	.weak	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev # -- Begin function _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev
	.p2align	4, 0x90
	.type	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev,@function
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev: # @_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev
.Lfunc_begin49:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev # TAILCALL
.Lfunc_end49:
	.size	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev, .Lfunc_end49-_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,"axG",@progbits,_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,comdat
	.weak	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # -- Begin function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,@function
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv: # @_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
.Lfunc_begin50:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # TAILCALL
.Lfunc_end50:
	.size	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv, .Lfunc_end50-_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,"axG",@progbits,_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,comdat
	.weak	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # -- Begin function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,@function
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv: # @_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
.Lfunc_begin51:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end51:
	.size	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv, .Lfunc_end51-_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev
.Lfunc_begin52:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev # TAILCALL
.Lfunc_end52:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev, .Lfunc_end52-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev
.Lfunc_begin53:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
	movq	-8(%rbp), %rdi          # 8-byte Reload
	addq	$8, %rdi
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt15_Rb_tree_headerC2Ev # TAILCALL
.Lfunc_end53:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev, .Lfunc_end53-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,"axG",@progbits,_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,comdat
	.weak	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev # -- Begin function _ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.p2align	4, 0x90
	.type	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,@function
_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev: # @_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
.Lfunc_begin54:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev # TAILCALL
.Lfunc_end54:
	.size	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev, .Lfunc_end54-_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,"axG",@progbits,_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,comdat
	.weak	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev # -- Begin function _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,@function
_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev: # @_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
.Lfunc_begin55:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end55:
	.size	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev, .Lfunc_end55-_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt15_Rb_tree_headerC2Ev,"axG",@progbits,_ZNSt15_Rb_tree_headerC2Ev,comdat
	.weak	_ZNSt15_Rb_tree_headerC2Ev # -- Begin function _ZNSt15_Rb_tree_headerC2Ev
	.p2align	4, 0x90
	.type	_ZNSt15_Rb_tree_headerC2Ev,@function
_ZNSt15_Rb_tree_headerC2Ev:             # @_ZNSt15_Rb_tree_headerC2Ev
.Lfunc_begin56:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$0, (%rdi)
	popq	%rbp
	jmp	_ZNSt15_Rb_tree_header8_M_resetEv # TAILCALL
.Lfunc_end56:
	.size	_ZNSt15_Rb_tree_headerC2Ev, .Lfunc_end56-_ZNSt15_Rb_tree_headerC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt15_Rb_tree_header8_M_resetEv,"axG",@progbits,_ZNSt15_Rb_tree_header8_M_resetEv,comdat
	.weak	_ZNSt15_Rb_tree_header8_M_resetEv # -- Begin function _ZNSt15_Rb_tree_header8_M_resetEv
	.p2align	4, 0x90
	.type	_ZNSt15_Rb_tree_header8_M_resetEv,@function
_ZNSt15_Rb_tree_header8_M_resetEv:      # @_ZNSt15_Rb_tree_header8_M_resetEv
.Lfunc_begin57:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, 8(%rdi)
	movq	%rdi, 16(%rdi)
	movq	%rdi, 24(%rdi)
	movq	$0, 32(%rdi)
	popq	%rbp
	retq
.Lfunc_end57:
	.size	_ZNSt15_Rb_tree_header8_M_resetEv, .Lfunc_end57-_ZNSt15_Rb_tree_header8_M_resetEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
.Lfunc_begin58:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end58:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev, .Lfunc_end58-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z12create_tracePKc     # -- Begin function _Z12create_tracePKc
	.p2align	4, 0x90
	.type	_Z12create_tracePKc,@function
_Z12create_tracePKc:                    # @_Z12create_tracePKc
.Lfunc_begin59:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception3
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB59_2
# %bb.1:
	movabsq	$.L.str.3.526, %rdi
	movabsq	$.L.str.4.527, %rsi
	movl	$10, %edx
	movabsq	$.L__PRETTY_FUNCTION__._Z12create_tracePKc, %rcx
	callq	__assert_fail
.LBB59_2:
	movl	$88, %eax
	movl	%eax, %edi
	callq	_Znwm
	movq	%rax, %rdi
.Ltmp313:
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-8(%rbp), %rsi          # 8-byte Reload
	callq	_ZN10trace_infoC2EPKc
.Ltmp314:
	jmp	.LBB59_3
.LBB59_3:
	callq	_ZTW5trace
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB59_4:
.Ltmp315:
	movl	%edx, %ecx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZdlPv
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_Unwind_Resume
.Lfunc_end59:
	.size	_Z12create_tracePKc, .Lfunc_end59-_Z12create_tracePKc
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table59:
.Lexception3:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
	.long	.Lfunc_begin59-.Lfunc_begin59 # >> Call Site 1 <<
	.long	.Ltmp313-.Lfunc_begin59 #   Call between .Lfunc_begin59 and .Ltmp313
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp313-.Lfunc_begin59 # >> Call Site 2 <<
	.long	.Ltmp314-.Ltmp313       #   Call between .Ltmp313 and .Ltmp314
	.long	.Ltmp315-.Lfunc_begin59 #     jumps to .Ltmp315
	.byte	0                       #   On action: cleanup
	.long	.Ltmp314-.Lfunc_begin59 # >> Call Site 3 <<
	.long	.Lfunc_end59-.Ltmp314   #   Call between .Ltmp314 and .Lfunc_end59
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.p2align	2
                                        # -- End function
	.text
	.hidden	_ZTW5trace              # -- Begin function _ZTW5trace
	.weak	_ZTW5trace
	.p2align	4, 0x90
	.type	_ZTW5trace,@function
_ZTW5trace:                             # @_ZTW5trace
.Lfunc_begin60:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%fs:0, %rax
	leaq	trace@TPOFF(%rax), %rax
	popq	%rbp
	retq
.Lfunc_end60:
	.size	_ZTW5trace, .Lfunc_end60-_ZTW5trace
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN10trace_infoC2EPKc,"axG",@progbits,_ZN10trace_infoC2EPKc,comdat
	.weak	_ZN10trace_infoC2EPKc   # -- Begin function _ZN10trace_infoC2EPKc
	.p2align	4, 0x90
	.type	_ZN10trace_infoC2EPKc,@function
_ZN10trace_infoC2EPKc:                  # @_ZN10trace_infoC2EPKc
.Lfunc_begin61:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception4
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	callq	_ZNSaIcEC2Ev
.Ltmp316:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_
.Ltmp317:
	jmp	.LBB61_1
.LBB61_1:
	leaq	-8(%rbp), %rdi
	callq	_ZNSaIcED2Ev
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	$0, 40(%rdi)
	addq	$48, %rdi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movl	$1, 80(%rdi)
	addq	$48, %rsp
	popq	%rbp
	retq
.LBB61_2:
.Ltmp318:
	leaq	-8(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movl	%ecx, -44(%rbp)         # 4-byte Spill
	callq	_ZNSaIcED2Ev
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_Unwind_Resume
.Lfunc_end61:
	.size	_ZN10trace_infoC2EPKc, .Lfunc_end61-_ZN10trace_infoC2EPKc
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table61:
.Lexception4:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	"\234"                  # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
	.long	.Ltmp316-.Lfunc_begin61 # >> Call Site 1 <<
	.long	.Ltmp317-.Ltmp316       #   Call between .Ltmp316 and .Ltmp317
	.long	.Ltmp318-.Lfunc_begin61 #     jumps to .Ltmp318
	.byte	0                       #   On action: cleanup
	.long	.Ltmp317-.Lfunc_begin61 # >> Call Site 2 <<
	.long	.Lfunc_end61-.Ltmp317   #   Call between .Ltmp317 and .Lfunc_end61
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.p2align	2
                                        # -- End function
	.text
	.globl	_Z14write_labelmapv     # -- Begin function _Z14write_labelmapv
	.p2align	4, 0x90
	.type	_Z14write_labelmapv,@function
_Z14write_labelmapv:                    # @_Z14write_labelmapv
.Lfunc_begin62:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	$.L.str.5.528, %ecx
	movl	%ecx, %esi
	movl	$26, %edx
	movq	%rax, %rdi
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	gzwrite
	movl	$_Z12labelmap_strB5cxx11, %ecx
	movl	%ecx, %esi
	movq	%rsi, %rdi
	movl	%eax, -12(%rbp)         # 4-byte Spill
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movl	%ecx, %edx
	callq	gzwrite
	movl	$.L.str.6.529, %ecx
	movl	%ecx, %esi
	movl	$25, %edx
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movl	%eax, -36(%rbp)         # 4-byte Spill
	addq	$48, %rsp
	popq	%rbp
	jmp	gzwrite                 # TAILCALL
.Lfunc_end62:
	.size	_Z14write_labelmapv, .Lfunc_end62-_Z14write_labelmapv
	.cfi_endproc
                                        # -- End function
	.globl	_Z15open_trace_filev    # -- Begin function _Z15open_trace_filev
	.p2align	4, 0x90
	.type	_Z15open_trace_filev,@function
_Z15open_trace_filev:                   # @_Z15open_trace_filev
.Lfunc_begin63:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$lock, %rdi
	callq	pthread_mutex_lock
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	(%rax), %rsi
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	%rax, -8(%rbp)
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	movb	%al, -21(%rbp)          # 1-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movb	-21(%rbp), %cl          # 1-byte Reload
	testb	$1, %cl
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jne	.LBB63_1
	jmp	.LBB63_2
.LBB63_1:
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, 32(%rax)
	jmp	.LBB63_5
.LBB63_2:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movabsq	$.L.str.7.530, %rsi
	movq	%rax, %rdi
	callq	gzopen
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jne	.LBB63_4
# %bb.3:
	movabsq	$.L.str.8.531, %rdi
	callq	perror
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB63_4:
	callq	_ZTW5trace
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	(%rax), %rsi
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, (%rax)
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, 32(%rax)
	callq	_Z14write_labelmapv
.LBB63_5:
	movabsq	$lock, %rdi
	callq	pthread_mutex_unlock
	movl	%eax, -52(%rbp)         # 4-byte Spill
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end63:
	.size	_Z15open_trace_filev, .Lfunc_end63-_Z15open_trace_filev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
.Lfunc_begin64:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_ # TAILCALL
.Lfunc_end64:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_, .Lfunc_end64-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
.Lfunc_begin65:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv # TAILCALL
.Lfunc_end65:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv, .Lfunc_end65-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_ # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
.Lfunc_begin66:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	cmpq	(%rsi), %rdi
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end66:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_, .Lfunc_end66-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
.Lfunc_begin67:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	leaq	-16(%rbp), %rsi
	movq	%rax, -8(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB67_2
# %bb.1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	leaq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB67_3
	jmp	.LBB67_4
.LBB67_2:
.LBB67_3:
	movabsq	$.L.str.36.532, %rdi
	callq	_ZSt20__throw_out_of_rangePKc
.LBB67_4:
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	addq	$32, %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end67:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_, .Lfunc_end67-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
.Lfunc_begin68:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	leaq	-16(%rbp), %rsi
	leaq	-8(%rbp), %rdi
	movq	%rax, -8(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB68_2
# %bb.1:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	leaq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB68_3
	jmp	.LBB68_4
.LBB68_2:
.LBB68_3:
	leaq	-32(%rbp), %rdi
	leaq	-8(%rbp), %rsi
	callq	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
	leaq	-40(%rbp), %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
	movabsq	$_ZStL19piecewise_construct, %rdx
	leaq	-40(%rbp), %rcx
	leaq	-48(%rbp), %r8
	movq	-32(%rbp), %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
.LBB68_4:
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	addq	$32, %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end68:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_, .Lfunc_end68-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
.Lfunc_begin69:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_ # TAILCALL
.Lfunc_end69:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_, .Lfunc_end69-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_ # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
.Lfunc_begin70:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	cmpq	(%rsi), %rdi
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end70:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_, .Lfunc_end70-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv,"axG",@progbits,_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv,comdat
	.weak	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv # -- Begin function _ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	.p2align	4, 0x90
	.type	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv,@function
_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv: # @_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
.Lfunc_begin71:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv # TAILCALL
.Lfunc_end71:
	.size	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv, .Lfunc_end71-_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
.Lfunc_begin72:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	callq	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	popq	%rbp
	retq
.Lfunc_end72:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv, .Lfunc_end72-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_,"axG",@progbits,_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_,comdat
	.weak	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_ # -- Begin function _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	.p2align	4, 0x90
	.type	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_,@function
_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_: # @_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
.Lfunc_begin73:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	popq	%rbp
	jmp	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_ # TAILCALL
.Lfunc_end73:
	.size	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_, .Lfunc_end73-_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E,"axG",@progbits,_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E,comdat
	.weak	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E # -- Begin function _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
	.p2align	4, 0x90
	.type	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E,@function
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E: # @_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
.Lfunc_begin74:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rsi), %rsi
	movq	%rsi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end74:
	.size	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E, .Lfunc_end74-_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_,"axG",@progbits,_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_,comdat
	.weak	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_ # -- Begin function _ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
	.p2align	4, 0x90
	.type	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_,@function
_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_: # @_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
.Lfunc_begin75:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_ # TAILCALL
.Lfunc_end75:
	.size	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_, .Lfunc_end75-_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
.Lfunc_begin76:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception5
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
	movq	%rax, %rcx
.Ltmp319:
	movq	%rax, %rdi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
.Ltmp320:
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB76_1
.LBB76_1:
.Ltmp321:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
.Ltmp322:
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB76_2
.LBB76_2:
	movq	-80(%rbp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB76_6
# %bb.3:
.Ltmp323:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
.Ltmp324:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB76_4
.LBB76_4:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB76_7
.LBB76_5:
.Ltmp325:
	movq	%rax, %rdi
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	__cxa_begin_catch
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
.Ltmp326:
	callq	__cxa_rethrow
.Ltmp327:
	jmp	.LBB76_11
.LBB76_6:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	leaq	-8(%rbp), %rdi
	movq	-88(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rsi
	movq	%rsi, -104(%rbp)        # 8-byte Spill
.LBB76_7:
	movq	-104(%rbp), %rax        # 8-byte Reload
	addq	$144, %rsp
	popq	%rbp
	retq
.LBB76_8:
.Ltmp328:
	movl	%edx, %ecx
.Ltmp329:
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	__cxa_end_catch
.Ltmp330:
	jmp	.LBB76_9
.LBB76_9:
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_Unwind_Resume
.LBB76_10:
.Ltmp331:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	callq	__clang_call_terminate
.LBB76_11:
.Lfunc_end76:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_, .Lfunc_end76-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table76:
.Lexception5:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	"\326\200\200"          # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	78                      # Call site table length
	.long	.Lfunc_begin76-.Lfunc_begin76 # >> Call Site 1 <<
	.long	.Ltmp319-.Lfunc_begin76 #   Call between .Lfunc_begin76 and .Ltmp319
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp319-.Lfunc_begin76 # >> Call Site 2 <<
	.long	.Ltmp324-.Ltmp319       #   Call between .Ltmp319 and .Ltmp324
	.long	.Ltmp325-.Lfunc_begin76 #     jumps to .Ltmp325
	.byte	1                       #   On action: 1
	.long	.Ltmp324-.Lfunc_begin76 # >> Call Site 3 <<
	.long	.Ltmp326-.Ltmp324       #   Call between .Ltmp324 and .Ltmp326
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp326-.Lfunc_begin76 # >> Call Site 4 <<
	.long	.Ltmp327-.Ltmp326       #   Call between .Ltmp326 and .Ltmp327
	.long	.Ltmp328-.Lfunc_begin76 #     jumps to .Ltmp328
	.byte	0                       #   On action: cleanup
	.long	.Ltmp329-.Lfunc_begin76 # >> Call Site 5 <<
	.long	.Ltmp330-.Ltmp329       #   Call between .Ltmp329 and .Ltmp330
	.long	.Ltmp331-.Lfunc_begin76 #     jumps to .Ltmp331
	.byte	1                       #   On action: 1
	.long	.Ltmp330-.Lfunc_begin76 # >> Call Site 6 <<
	.long	.Lfunc_end76-.Ltmp330   #   Call between .Ltmp330 and .Lfunc_end76
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE,"axG",@progbits,_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE,comdat
	.weak	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE # -- Begin function _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE,@function
_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE: # @_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
.Lfunc_begin77:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end77:
	.size	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE, .Lfunc_end77-_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE,"axG",@progbits,_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE,comdat
	.weak	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE # -- Begin function _ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE,@function
_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE: # @_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
.Lfunc_begin78:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end78:
	.size	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE, .Lfunc_end78-_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE,"axG",@progbits,_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE,comdat
	.weak	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE # -- Begin function _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE,@function
_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE: # @_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
.Lfunc_begin79:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end79:
	.size	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE, .Lfunc_end79-_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
.Lfunc_begin80:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end80:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_, .Lfunc_end80-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
.Lfunc_begin81:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end81:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E, .Lfunc_end81-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
.Lfunc_begin82:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	leaq	-24(%rbp), %rax
	leaq	-32(%rbp), %rcx
	movq	%rsi, -24(%rbp)
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
	leaq	-32(%rbp), %rcx
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB82_5
# %bb.1:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
	cmpq	$0, %rax
	je	.LBB82_4
# %bb.2:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB82_3
	jmp	.LBB82_4
.LBB82_3:
	movq	$0, -40(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	leaq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB82_24
.LBB82_4:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	jmp	.LBB82_24
.LBB82_5:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB82_6
	jmp	.LBB82_14
.LBB82_6:
	leaq	-48(%rbp), %rax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -48(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rcx, (%rax)
	jne	.LBB82_8
# %bb.7:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	leaq	-16(%rbp), %rdi
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp	.LBB82_13
.LBB82_8:
	leaq	-48(%rbp), %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB82_9
	jmp	.LBB82_12
.LBB82_9:
	leaq	-48(%rbp), %rdx
	movq	-48(%rbp), %rdi
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	cmpq	$0, %rax
	jne	.LBB82_11
# %bb.10:
	leaq	-16(%rbp), %rdi
	leaq	-56(%rbp), %rsi
	movq	$0, -56(%rbp)
	movq	-152(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB82_13
.LBB82_11:
	leaq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp	.LBB82_13
.LBB82_12:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
.LBB82_13:
	jmp	.LBB82_24
.LBB82_14:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB82_15
	jmp	.LBB82_23
.LBB82_15:
	leaq	-64(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rcx, (%rax)
	jne	.LBB82_17
# %bb.16:
	movq	$0, -72(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB82_22
.LBB82_17:
	leaq	-64(%rbp), %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB82_18
	jmp	.LBB82_21
.LBB82_18:
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	cmpq	$0, %rax
	jne	.LBB82_20
# %bb.19:
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rsi
	movq	$0, -80(%rbp)
	movq	-128(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB82_22
.LBB82_20:
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rax
	movq	%rax, %rsi
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp	.LBB82_22
.LBB82_21:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
.LBB82_22:
	jmp	.LBB82_24
.LBB82_23:
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	movq	$0, -88(%rbp)
	movq	-128(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
.LBB82_24:
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end82:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_, .Lfunc_end82-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
.Lfunc_begin83:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	$1, %al
	cmpq	$0, %rsi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movb	%al, -33(%rbp)          # 1-byte Spill
	jne	.LBB83_3
# %bb.1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movb	$1, %cl
	movq	-16(%rbp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rax
	movb	%cl, -33(%rbp)          # 1-byte Spill
	je	.LBB83_3
# %bb.2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	movb	%al, -33(%rbp)          # 1-byte Spill
.LBB83_3:
	movb	-33(%rbp), %al          # 1-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	andb	$1, %al
	movzbl	%al, %edi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	-16(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
	leaq	-8(%rbp), %rdi
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	40(%rcx), %rdx
	addq	$1, %rdx
	movq	%rdx, 40(%rcx)
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end83:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E, .Lfunc_end83-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base # -- Begin function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base,@function
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base: # @_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
.Lfunc_begin84:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end84:
	.size	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base, .Lfunc_end84-_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
.Lfunc_begin85:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$8, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end85:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv, .Lfunc_end85-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
.Lfunc_begin86:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end86:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base, .Lfunc_end86-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
.Lfunc_begin87:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	popq	%rbp
	retq
.Lfunc_end87:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base, .Lfunc_end87-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_,"axG",@progbits,_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_,comdat
	.weak	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_ # -- Begin function _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	.p2align	4, 0x90
	.type	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_,@function
_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_: # @_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
.Lfunc_begin88:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end88:
	.size	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_, .Lfunc_end88-_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,"axG",@progbits,_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,comdat
	.weak	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv # -- Begin function _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.p2align	4, 0x90
	.type	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,@function
_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv: # @_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
.Lfunc_begin89:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$32, %rdi
	popq	%rbp
	jmp	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # TAILCALL
.Lfunc_end89:
	.size	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv, .Lfunc_end89-_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,"axG",@progbits,_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,comdat
	.weak	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # -- Begin function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.p2align	4, 0x90
	.type	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,@function
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv: # @_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
.Lfunc_begin90:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # TAILCALL
.Lfunc_end90:
	.size	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv, .Lfunc_end90-_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,"axG",@progbits,_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,comdat
	.weak	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # -- Begin function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.p2align	4, 0x90
	.type	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,@function
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv: # @_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
.Lfunc_begin91:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end91:
	.size	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv, .Lfunc_end91-_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv,"axG",@progbits,_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv,comdat
	.weak	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv # -- Begin function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
	.p2align	4, 0x90
	.type	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv,@function
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv: # @_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
.Lfunc_begin92:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end92:
	.size	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv, .Lfunc_end92-_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv,"axG",@progbits,_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv,comdat
	.weak	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv # -- Begin function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
	.p2align	4, 0x90
	.type	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv,@function
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv: # @_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
.Lfunc_begin93:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	40(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end93:
	.size	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv, .Lfunc_end93-_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
.Lfunc_begin94:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$32, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end94:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv, .Lfunc_end94-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
.Lfunc_begin95:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	(%rsi), %rsi
	movq	%rsi, (%rdi)
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, %rdi
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end95:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_, .Lfunc_end95-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
.Lfunc_begin96:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	leaq	-24(%rbp), %rax
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	leaq	-32(%rbp), %rsi
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rsi         # 8-byte Reload
	cmpq	$0, %rsi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jne	.LBB96_2
# %bb.1:
	leaq	-40(%rbp), %rax
	movq	%rax, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB96_8
.LBB96_2:
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB96_3:                               # =>This Inner Loop Header: Depth=1
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	movb	%al, -137(%rbp)         # 1-byte Spill
	jne	.LBB96_4
	jmp	.LBB96_5
.LBB96_4:                               #   in Loop: Header=BB96_3 Depth=1
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB96_6
.LBB96_5:                               #   in Loop: Header=BB96_3 Depth=1
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB96_6:                               #   in Loop: Header=BB96_3 Depth=1
	movq	-152(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	movq	%rax, %rcx
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jne	.LBB96_3
# %bb.7:
	leaq	-40(%rbp), %rax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -24(%rbp)
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -32(%rbp)
	movq	%rax, %rsi
	movq	%rax, %rdi
	movq	%rsi, -168(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movb	-137(%rbp), %r8b        # 1-byte Reload
	testb	$1, %r8b
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jne	.LBB96_8
	jmp	.LBB96_11
.LBB96_8:
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
	leaq	-40(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	movq	%rax, -48(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB96_9
	jmp	.LBB96_10
.LBB96_9:
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	leaq	-32(%rbp), %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB96_14
.LBB96_10:
	leaq	-40(%rbp), %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	%rdi, -176(%rbp)        # 8-byte Spill
.LBB96_11:
	movq	-176(%rbp), %rax        # 8-byte Reload
	leaq	-40(%rbp), %rsi
	movq	-40(%rbp), %rdi
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rsi, -216(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-80(%rbp), %rdx         # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB96_12
	jmp	.LBB96_13
.LBB96_12:
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	leaq	-32(%rbp), %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB96_14
.LBB96_13:
	leaq	-16(%rbp), %rdi
	leaq	-56(%rbp), %rdx
	movq	$0, -56(%rbp)
	movq	-216(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
.LBB96_14:
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end96:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_, .Lfunc_end96-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
.Lfunc_begin97:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$24, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end97:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv, .Lfunc_end97-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
.Lfunc_begin98:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end98:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_, .Lfunc_end98-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv,"axG",@progbits,_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv,comdat
	.weak	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv # -- Begin function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	.p2align	4, 0x90
	.type	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv,@function
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv: # @_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
.Lfunc_begin99:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	(%rdi), %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, (%rdi)
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end99:
	.size	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv, .Lfunc_end99-_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv,"axG",@progbits,_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv,comdat
	.weak	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv # -- Begin function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	.p2align	4, 0x90
	.type	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv,@function
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv: # @_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
.Lfunc_begin100:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	(%rdi), %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, (%rdi)
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end100:
	.size	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv, .Lfunc_end100-_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
.Lfunc_begin101:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	movq	%rsi, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end101:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_, .Lfunc_end101-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE,"axG",@progbits,_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE,comdat
	.weak	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE # -- Begin function _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE,@function
_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE: # @_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
.Lfunc_begin102:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end102:
	.size	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE, .Lfunc_end102-_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
.Lfunc_begin103:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	24(%rdi), %rsi
	movq	%rax, %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end103:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv, .Lfunc_end103-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
.Lfunc_begin104:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end104:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_, .Lfunc_end104-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE,"axG",@progbits,_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE,comdat
	.weak	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE # -- Begin function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE,@function
_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE: # @_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
.Lfunc_begin105:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end105:
	.size	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE, .Lfunc_end105-_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
.Lfunc_begin106:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	popq	%rbp
	retq
.Lfunc_end106:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E, .Lfunc_end106-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
.Lfunc_begin107:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	popq	%rbp
	jmp	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m # TAILCALL
.Lfunc_end107:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv, .Lfunc_end107-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
.Lfunc_begin108:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception6
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movq	%rdx, -24(%rbp)         # 8-byte Spill
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	movq	%r8, -40(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
.Ltmp332:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
.Ltmp333:
	jmp	.LBB108_3
.LBB108_1:
.Ltmp334:
	movq	%rax, %rdi
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	__cxa_begin_catch
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
.Ltmp335:
	callq	__cxa_rethrow
.Ltmp336:
	jmp	.LBB108_6
.LBB108_2:
.Ltmp337:
	movl	%edx, %ecx
.Ltmp338:
	movl	%ecx, -92(%rbp)         # 4-byte Spill
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	__cxa_end_catch
.Ltmp339:
	jmp	.LBB108_4
.LBB108_3:
	addq	$112, %rsp
	popq	%rbp
	retq
.LBB108_4:
	movq	-104(%rbp), %rdi        # 8-byte Reload
	callq	_Unwind_Resume
.LBB108_5:
.Ltmp340:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -108(%rbp)        # 4-byte Spill
	callq	__clang_call_terminate
.LBB108_6:
.Lfunc_end108:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_, .Lfunc_end108-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table108:
.Lexception6:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
	.long	.Ltmp332-.Lfunc_begin108 # >> Call Site 1 <<
	.long	.Ltmp333-.Ltmp332       #   Call between .Ltmp332 and .Ltmp333
	.long	.Ltmp334-.Lfunc_begin108 #     jumps to .Ltmp334
	.byte	1                       #   On action: 1
	.long	.Ltmp333-.Lfunc_begin108 # >> Call Site 2 <<
	.long	.Ltmp335-.Ltmp333       #   Call between .Ltmp333 and .Ltmp335
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp335-.Lfunc_begin108 # >> Call Site 3 <<
	.long	.Ltmp336-.Ltmp335       #   Call between .Ltmp335 and .Ltmp336
	.long	.Ltmp337-.Lfunc_begin108 #     jumps to .Ltmp337
	.byte	0                       #   On action: cleanup
	.long	.Ltmp338-.Lfunc_begin108 # >> Call Site 4 <<
	.long	.Ltmp339-.Ltmp338       #   Call between .Ltmp338 and .Ltmp339
	.long	.Ltmp340-.Lfunc_begin108 #     jumps to .Ltmp340
	.byte	1                       #   On action: 1
	.long	.Ltmp339-.Lfunc_begin108 # >> Call Site 5 <<
	.long	.Lfunc_end108-.Ltmp339  #   Call between .Ltmp339 and .Lfunc_end108
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_ # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
.Lfunc_begin109:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	addq	$48, %rsp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_ # TAILCALL
.Lfunc_end109:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_, .Lfunc_end109-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_ # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_
.Lfunc_begin110:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	leaq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end110:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_, .Lfunc_end110-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,"axG",@progbits,_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,comdat
	.weak	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_ # -- Begin function _ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.p2align	4, 0x90
	.type	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,@function
_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_: # @_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
.Lfunc_begin111:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_ # TAILCALL
.Lfunc_end111:
	.size	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_, .Lfunc_end111-_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE,"axG",@progbits,_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE,comdat
	.weak	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE # -- Begin function _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
	.p2align	4, 0x90
	.type	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE,@function
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE: # @_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
.Lfunc_begin112:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rdx
	callq	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end112:
	.size	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE, .Lfunc_end112-_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE,"axG",@progbits,_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE,comdat
	.weak	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE # -- Begin function _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
	.p2align	4, 0x90
	.type	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE,@function
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE: # @_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
.Lfunc_begin113:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
	movq	%rax, %rdi
	callq	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_
	movq	-8(%rbp), %rax          # 8-byte Reload
	movq	$0, 32(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end113:
	.size	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE, .Lfunc_end113-_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_,"axG",@progbits,_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_,comdat
	.weak	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_ # -- Begin function _ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
	.p2align	4, 0x90
	.type	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_,@function
_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_: # @_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
.Lfunc_begin114:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE # TAILCALL
.Lfunc_end114:
	.size	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_, .Lfunc_end114-_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE,"axG",@progbits,_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE,comdat
	.weak	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE # -- Begin function _ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE,@function
_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE: # @_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
.Lfunc_begin115:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end115:
	.size	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE, .Lfunc_end115-_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE,"axG",@progbits,_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE,comdat
	.weak	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE # -- Begin function _ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE
	.p2align	4, 0x90
	.type	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE,@function
_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE: # @_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE
.Lfunc_begin116:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_ # TAILCALL
.Lfunc_end116:
	.size	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE, .Lfunc_end116-_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_,"axG",@progbits,_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_,comdat
	.weak	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_ # -- Begin function _ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
	.p2align	4, 0x90
	.type	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_,@function
_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_: # @_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
.Lfunc_begin117:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_ # TAILCALL
.Lfunc_end117:
	.size	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_, .Lfunc_end117-_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_,"axG",@progbits,_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_,comdat
	.weak	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_ # -- Begin function _ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_
	.p2align	4, 0x90
	.type	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_,@function
_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_: # @_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_
.Lfunc_begin118:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end118:
	.size	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_, .Lfunc_end118-_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,"axG",@progbits,_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,comdat
	.weak	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_ # -- Begin function _ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.p2align	4, 0x90
	.type	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,@function
_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_: # @_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
.Lfunc_begin119:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
	movq	%rax, %rdi
	callq	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_ # TAILCALL
.Lfunc_end119:
	.size	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_, .Lfunc_end119-_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_,"axG",@progbits,_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_,comdat
	.weak	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_ # -- Begin function _ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_
	.p2align	4, 0x90
	.type	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_,@function
_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_: # @_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_
.Lfunc_begin120:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end120:
	.size	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_, .Lfunc_end120-_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m
.Lfunc_begin121:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	%eax, %edx
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv # TAILCALL
.Lfunc_end121:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m, .Lfunc_end121-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv
.Lfunc_begin122:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
	movq	-8(%rbp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rax
	jae	.LBB122_2
# %bb.1:
	callq	_ZSt17__throw_bad_allocv
.LBB122_2:
	movq	-8(%rbp), %rax          # 8-byte Reload
	shlq	$3, %rax
	leaq	(%rax,%rax,8), %rdi
	addq	$16, %rsp
	popq	%rbp
	jmp	_Znwm                   # TAILCALL
.Lfunc_end122:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv, .Lfunc_end122-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv # -- Begin function _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
	.p2align	4, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
.Lfunc_begin123:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$256204778801521550, %rax # imm = 0x38E38E38E38E38E
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end123:
	.size	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv, .Lfunc_end123-_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_,"axG",@progbits,_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_,comdat
	.weak	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_ # -- Begin function _ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_
	.p2align	4, 0x90
	.type	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_,@function
_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_: # @_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_
.Lfunc_begin124:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_ # TAILCALL
.Lfunc_end124:
	.size	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_, .Lfunc_end124-_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_,"axG",@progbits,_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_,comdat
	.weak	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_ # -- Begin function _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	.p2align	4, 0x90
	.type	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_,@function
_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_: # @_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
.Lfunc_begin125:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception7
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
.Ltmp341:
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_
.Ltmp342:
	movl	%eax, -4(%rbp)          # 4-byte Spill
	jmp	.LBB125_1
.LBB125_1:
	movl	-4(%rbp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	setl	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB125_2:
.Ltmp343:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -8(%rbp)          # 4-byte Spill
	callq	__clang_call_terminate
.Lfunc_end125:
	.size	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_, .Lfunc_end125-_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table125:
.Lexception7:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp341-.Lfunc_begin125 # >> Call Site 1 <<
	.long	.Ltmp342-.Ltmp341       #   Call between .Ltmp341 and .Ltmp342
	.long	.Ltmp343-.Lfunc_begin125 #     jumps to .Ltmp343
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv,"axG",@progbits,_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv,comdat
	.weak	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv # -- Begin function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv
	.p2align	4, 0x90
	.type	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv,@function
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv: # @_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv
.Lfunc_begin126:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end126:
	.size	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv, .Lfunc_end126-_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_
.Lfunc_begin127:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	-16(%rbp), %rcx         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_ # TAILCALL
.Lfunc_end127:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_, .Lfunc_end127-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
.Lfunc_begin128:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	cmpq	$0, %rsi
	movq	%rdx, %rax
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB128_6
# %bb.1:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -64(%rbp)         # 8-byte Spill
.LBB128_2:                              # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-40(%rbp), %rdx         # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB128_4
# %bb.3:                                #   in Loop: Header=BB128_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB128_5
.LBB128_4:                              #   in Loop: Header=BB128_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB128_5:                              #   in Loop: Header=BB128_2 Depth=1
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jne	.LBB128_2
.LBB128_6:
	movq	-48(%rbp), %rax         # 8-byte Reload
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end128:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_, .Lfunc_end128-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
.Lfunc_begin129:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	addq	$8, %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end129:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv, .Lfunc_end129-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_
.Lfunc_begin130:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	-40(%rbp), %rcx         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
	leaq	-16(%rbp), %rcx
	leaq	-8(%rbp), %rdx
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB130_2
# %bb.1:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB130_2
	jmp	.LBB130_3
.LBB130_2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB130_4
.LBB130_3:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	%rcx, -72(%rbp)         # 8-byte Spill
.LBB130_4:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end130:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_, .Lfunc_end130-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_
	.cfi_endproc
                                        # -- End function
	.text
	.globl	trace_logger_register_labelmap # -- Begin function trace_logger_register_labelmap
	.p2align	4, 0x90
	.type	trace_logger_register_labelmap,@function
trace_logger_register_labelmap:         # @trace_logger_register_labelmap
.Lfunc_begin131:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z12labelmap_strB5cxx11, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rcx, %rdi
	movq	-8(%rbp), %rcx          # 8-byte Reload
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rsi
	movq	-16(%rbp), %rdx         # 8-byte Reload
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm # TAILCALL
.Lfunc_end131:
	.size	trace_logger_register_labelmap, .Lfunc_end131-trace_logger_register_labelmap
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_init       # -- Begin function trace_logger_init
	.p2align	4, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
.Lfunc_begin132:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$lock, %rdi
	xorl	%eax, %eax
	movl	%eax, %esi
	callq	pthread_mutex_init
	cmpl	$0, %eax
	je	.LBB132_2
# %bb.1:
	movabsq	$.L.str.9.537, %rdi
	callq	perror
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB132_2:
	movq	default_trace_name(%rip), %rdi
	callq	_Z12create_tracePKc
	movl	$_Z8fin_mainv, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	atexit                  # TAILCALL
.Lfunc_end132:
	.size	trace_logger_init, .Lfunc_end132-trace_logger_init
	.cfi_endproc
                                        # -- End function
	.globl	_Z8fin_mainv            # -- Begin function _Z8fin_mainv
	.p2align	4, 0x90
	.type	_Z8fin_mainv,@function
_Z8fin_mainv:                           # @_Z8fin_mainv
.Lfunc_begin133:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB133_2
# %bb.1:
	callq	_Z12fin_toplevelv
.LBB133_2:
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	leaq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	leaq	-16(%rbp), %rcx
	movq	%rax, -8(%rbp)
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	movq	%rax, -16(%rbp)
	movq	%rcx, %rsi
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	testb	$1, %al
	jne	.LBB133_3
	jmp	.LBB133_4
.LBB133_3:
	jmp	.LBB133_5
.LBB133_4:
	addq	$64, %rsp
	popq	%rbp
	retq
.LBB133_5:                              # =>This Inner Loop Header: Depth=1
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
	movq	32(%rax), %rdi
	callq	gzclose
	leaq	-8(%rbp), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	testb	$1, %al
	jne	.LBB133_5
	jmp	.LBB133_4
.Lfunc_end133:
	.size	_Z8fin_mainv, .Lfunc_end133-_Z8fin_mainv
	.cfi_endproc
                                        # -- End function
	.globl	_Z12fin_toplevelv       # -- Begin function _Z12fin_toplevelv
	.p2align	4, 0x90
	.type	_Z12fin_toplevelv,@function
_Z12fin_toplevelv:                      # @_Z12fin_toplevelv
.Lfunc_begin134:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	je	.LBB134_2
# %bb.1:
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_ZN10trace_infoD2Ev
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_ZdlPv
.LBB134_2:
	callq	_ZTW5trace
	movq	$0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end134:
	.size	_Z12fin_toplevelv, .Lfunc_end134-_Z12fin_toplevelv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
.Lfunc_begin135:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv # TAILCALL
.Lfunc_end135:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv, .Lfunc_end135-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
.Lfunc_begin136:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	popq	%rbp
	jmp	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv # TAILCALL
.Lfunc_end136:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv, .Lfunc_end136-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN10trace_infoD2Ev,"axG",@progbits,_ZN10trace_infoD2Ev,comdat
	.weak	_ZN10trace_infoD2Ev     # -- Begin function _ZN10trace_infoD2Ev
	.p2align	4, 0x90
	.type	_ZN10trace_infoD2Ev,@function
_ZN10trace_infoD2Ev:                    # @_ZN10trace_infoD2Ev
.Lfunc_begin137:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	addq	$48, %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev
	movq	-8(%rbp), %rax          # 8-byte Reload
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev # TAILCALL
.Lfunc_end137:
	.size	_ZN10trace_infoD2Ev, .Lfunc_end137-_ZN10trace_infoD2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	llvmtracer_set_trace_name # -- Begin function llvmtracer_set_trace_name
	.p2align	4, 0x90
	.type	llvmtracer_set_trace_name,@function
llvmtracer_set_trace_name:              # @llvmtracer_set_trace_name
.Lfunc_begin138:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	jne	.LBB138_2
# %bb.1:
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_Z12create_tracePKc
	jmp	.LBB138_3
.LBB138_2:
	callq	_ZTW5trace
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi          # 8-byte Reload
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
	movq	%rax, -16(%rbp)         # 8-byte Spill
.LBB138_3:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end138:
	.size	llvmtracer_set_trace_name, .Lfunc_end138-llvmtracer_set_trace_name
	.cfi_endproc
                                        # -- End function
	.globl	_Z10log_or_notbbiPc     # -- Begin function _Z10log_or_notbbiPc
	.p2align	4, 0x90
	.type	_Z10log_or_notbbiPc,@function
_Z10log_or_notbbiPc:                    # @_Z10log_or_notbbiPc
.Lfunc_begin139:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, -4(%rbp)          # 4-byte Spill
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movb	%al, -17(%rbp)          # 1-byte Spill
	jne	.LBB139_2
	jmp	.LBB139_1
.LBB139_1:
	movb	-17(%rbp), %al          # 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -24(%rbp)         # 4-byte Spill
	jmp	.LBB139_9
.LBB139_2:
	movb	-17(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB139_4
	jmp	.LBB139_3
.LBB139_3:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movl	80(%rax), %ecx
	movl	%ecx, -24(%rbp)         # 4-byte Spill
	jmp	.LBB139_9
.LBB139_4:
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, -24(%rbp)         # 4-byte Spill
	jne	.LBB139_9
# %bb.5:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv
	cmpq	$0, %rax
	jne	.LBB139_7
# %bb.6:
	movabsq	$.L.str.10.538, %rdi
	movabsq	$.L.str.4.527, %rsi
	movl	$132, %edx
	movabsq	$.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc, %rcx
	callq	__assert_fail
.LBB139_7:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movl	$1, %ecx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	-28(%rbp), %eax         # 4-byte Reload
	movl	%eax, -24(%rbp)         # 4-byte Spill
	je	.LBB139_9
# %bb.8:
	movabsq	$.L.str.11.539, %rdi
	movabsq	$.L.str.4.527, %rsi
	movl	$137, %edx
	movabsq	$.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc, %rcx
	callq	__assert_fail
.LBB139_9:
	movl	-24(%rbp), %eax         # 4-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end139:
	.size	_Z10log_or_notbbiPc, .Lfunc_end139-_Z10log_or_notbbiPc
	.cfi_endproc
                                        # -- End function
	.globl	_Z20convert_bytes_to_hexPcPhi # -- Begin function _Z20convert_bytes_to_hexPcPhi
	.p2align	4, 0x90
	.type	_Z20convert_bytes_to_hexPcPhi,@function
_Z20convert_bytes_to_hexPcPhi:          # @_Z20convert_bytes_to_hexPcPhi
.Lfunc_begin140:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movw	.L.str.12.540, %ax
	movw	%ax, (%rdi)
	movb	.L.str.12.540+2, %cl
	movb	%cl, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rdi, %r8
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	movl	%edx, -12(%rbp)         # 4-byte Spill
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	jle	.LBB140_2
# %bb.1:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	-12(%rbp), %eax         # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	jmp	.LBB140_3
.LBB140_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	addq	$80, %rsp
	popq	%rbp
	retq
.LBB140_3:                              # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movabsq	$.L.str.13.541, %rsi
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movq	%rax, %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movb	$0, %al
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	%rcx, %rsi
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movq	-40(%rbp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rcx
	movq	%rsi, %r8
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	je	.LBB140_2
	jmp	.LBB140_3
.Lfunc_end140:
	.size	_Z20convert_bytes_to_hexPcPhi, .Lfunc_end140-_Z20convert_bytes_to_hexPcPhi
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_update_status # -- Begin function trace_logger_update_status
	.p2align	4, 0x90
	.type	trace_logger_update_status,@function
trace_logger_update_status:             # @trace_logger_update_status
.Lfunc_begin141:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movb	%cl, %al
	movb	%dl, %r8b
	movl	%esi, -4(%rbp)          # 4-byte Spill
	movb	%al, -5(%rbp)           # 1-byte Spill
	movb	%r8b, -6(%rbp)          # 1-byte Spill
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	jne	.LBB141_3
# %bb.1:
	movb	-6(%rbp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB141_2
	jmp	.LBB141_13
.LBB141_2:
	movq	default_trace_name, %rdi
	callq	_Z12create_tracePKc
.LBB141_3:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movl	80(%rax), %ecx
	movb	-5(%rbp), %dl           # 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %edi
	movb	-6(%rbp), %dl           # 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	-4(%rbp), %edx          # 4-byte Reload
	movq	-16(%rbp), %rax         # 8-byte Reload
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	movq	%rax, %rcx
	callq	_Z10log_or_notbbiPc
	movl	%eax, -24(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movl	-24(%rbp), %edx         # 4-byte Reload
	movl	%edx, 80(%rax)
	movl	-20(%rbp), %esi         # 4-byte Reload
	testl	%esi, %esi
	je	.LBB141_4
	jmp	.LBB141_14
.LBB141_14:
	movl	-20(%rbp), %eax         # 4-byte Reload
	subl	$1, %eax
	movl	%eax, -28(%rbp)         # 4-byte Spill
	je	.LBB141_6
	jmp	.LBB141_8
.LBB141_4:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	jne	.LBB141_8
# %bb.5:
	callq	_ZTW5trace
	movq	(%rax), %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movabsq	$.L.str.14.544, %rdi
	movq	(%rax), %rax
	movq	40(%rax), %rdx
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	fflush
	movl	%eax, -48(%rbp)         # 4-byte Spill
	jmp	.LBB141_8
.LBB141_6:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	je	.LBB141_8
# %bb.7:
	callq	_ZTW5trace
	movq	(%rax), %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movabsq	$.L.str.15.545, %rdi
	movq	(%rax), %rax
	movq	40(%rax), %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	fflush
	movl	%eax, -64(%rbp)         # 4-byte Spill
.LBB141_8:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv
	cmpq	$0, %rax
	jne	.LBB141_11
# %bb.9:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$0, 80(%rax)
	jne	.LBB141_11
# %bb.10:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	movq	-16(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB141_13
.LBB141_11:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	jne	.LBB141_13
# %bb.12:
	callq	_ZTW5trace
	movabsq	$.L.str.16.546, %rsi
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_Z12fin_toplevelv
.LBB141_13:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end141:
	.size	trace_logger_update_status, .Lfunc_end141-trace_logger_update_status
	.cfi_endproc
                                        # -- End function
	.globl	_Z10do_not_logv         # -- Begin function _Z10do_not_logv
	.p2align	4, 0x90
	.type	_Z10do_not_logv,@function
_Z10do_not_logv:                        # @_Z10do_not_logv
.Lfunc_begin142:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZTW5trace
	movb	$1, %cl
	cmpq	$0, (%rax)
	movb	%cl, -1(%rbp)           # 1-byte Spill
	je	.LBB142_2
# %bb.1:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	sete	%cl
	movb	%cl, -1(%rbp)           # 1-byte Spill
.LBB142_2:
	movb	-1(%rbp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end142:
	.size	_Z10do_not_logv, .Lfunc_end142-_Z10do_not_logv
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_entry  # -- Begin function trace_logger_log_entry
	.p2align	4, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
.Lfunc_begin143:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movl	%esi, -12(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	jne	.LBB143_2
# %bb.1:
	movq	default_trace_name, %rdi
	callq	_Z12create_tracePKc
.LBB143_2:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB143_4
# %bb.3:
	callq	_Z15open_trace_filev
	callq	_ZTW5trace
	movabsq	$.L.str.17.549, %rsi
	movq	(%rax), %rax
	movq	32(%rax), %rdi
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movl	-12(%rbp), %ecx         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -16(%rbp)         # 4-byte Spill
.LBB143_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end143:
	.size	trace_logger_log_entry, .Lfunc_end143-trace_logger_log_entry
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log0       # -- Begin function trace_logger_log0
	.p2align	4, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
.Lfunc_begin144:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	movl	%r8d, -12(%rbp)         # 4-byte Spill
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movl	%edi, -36(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB144_3
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB144_3
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rdi
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movabsq	$.L.str.18.552, %rsi
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	-36(%rbp), %edx         # 4-byte Reload
	movq	-8(%rbp), %rcx          # 8-byte Reload
	movq	-32(%rbp), %r8          # 8-byte Reload
	movq	-24(%rbp), %r9          # 8-byte Reload
	movl	-12(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -52(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	40(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 40(%rax)
.LBB144_3:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end144:
	.size	trace_logger_log0, .Lfunc_end144-trace_logger_log0
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_int    # -- Begin function trace_logger_log_int
	.p2align	4, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
.Lfunc_begin145:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB145_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB145_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB145_3
	jmp	.LBB145_13
.LBB145_13:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB145_4
	jmp	.LBB145_5
.LBB145_3:
	movabsq	$.L.str.19.555, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB145_6
.LBB145_4:
	movabsq	$.L.str.20.556, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB145_6
.LBB145_5:
	movabsq	$.L.str.21.557, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-40(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB145_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB145_8
# %bb.7:
	movabsq	$.L.str.22.558, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB145_9
.LBB145_8:
	movabsq	$.L.str.23.559, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB145_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB145_11
# %bb.10:
	movabsq	$.L.str.24.560, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB145_12
.LBB145_11:
	movabsq	$.L.str.25.561, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB145_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end145:
	.size	trace_logger_log_int, .Lfunc_end145-trace_logger_log_int
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_ptr    # -- Begin function trace_logger_log_ptr
	.p2align	4, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
.Lfunc_begin146:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB146_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB146_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB146_3
	jmp	.LBB146_13
.LBB146_13:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB146_4
	jmp	.LBB146_5
.LBB146_3:
	movabsq	$.L.str.26.564, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB146_6
.LBB146_4:
	movabsq	$.L.str.27.565, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB146_6
.LBB146_5:
	movabsq	$.L.str.28.566, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-40(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB146_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB146_8
# %bb.7:
	movabsq	$.L.str.22.558, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB146_9
.LBB146_8:
	movabsq	$.L.str.23.559, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB146_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB146_11
# %bb.10:
	movabsq	$.L.str.24.560, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB146_12
.LBB146_11:
	movabsq	$.L.str.25.561, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB146_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end146:
	.size	trace_logger_log_ptr, .Lfunc_end146-trace_logger_log_ptr
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_string # -- Begin function trace_logger_log_string
	.p2align	4, 0x90
	.type	trace_logger_log_string,@function
trace_logger_log_string:                # @trace_logger_log_string
.Lfunc_begin147:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB147_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB147_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB147_3
	jmp	.LBB147_13
.LBB147_13:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB147_4
	jmp	.LBB147_5
.LBB147_3:
	movabsq	$.L.str.29.569, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB147_6
.LBB147_4:
	movabsq	$.L.str.30.570, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB147_6
.LBB147_5:
	movabsq	$.L.str.31.571, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-40(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB147_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB147_8
# %bb.7:
	movabsq	$.L.str.22.558, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB147_9
.LBB147_8:
	movabsq	$.L.str.23.559, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB147_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB147_11
# %bb.10:
	movabsq	$.L.str.24.560, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB147_12
.LBB147_11:
	movabsq	$.L.str.25.561, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB147_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end147:
	.size	trace_logger_log_string, .Lfunc_end147-trace_logger_log_string
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_double # -- Begin function trace_logger_log_double
	.p2align	4, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
.Lfunc_begin148:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	%r8d, -4(%rbp)          # 4-byte Spill
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movl	%edx, -20(%rbp)         # 4-byte Spill
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, -36(%rbp)         # 4-byte Spill
	movl	%edi, -40(%rbp)         # 4-byte Spill
	movq	%r9, -48(%rbp)          # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB148_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB148_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-40(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB148_3
	jmp	.LBB148_13
.LBB148_13:
	movl	-40(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB148_4
	jmp	.LBB148_5
.LBB148_3:
	movabsq	$.L.str.32.574, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-36(%rbp), %edx         # 4-byte Reload
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-20(%rbp), %ecx         # 4-byte Reload
	movb	$1, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB148_6
.LBB148_4:
	movabsq	$.L.str.33.575, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-36(%rbp), %edx         # 4-byte Reload
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-20(%rbp), %ecx         # 4-byte Reload
	movb	$1, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB148_6
.LBB148_5:
	movabsq	$.L.str.34.576, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-40(%rbp), %edx         # 4-byte Reload
	movl	-36(%rbp), %ecx         # 4-byte Reload
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-20(%rbp), %r8d         # 4-byte Reload
	movb	$1, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB148_6:
	movl	-20(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB148_8
# %bb.7:
	movabsq	$.L.str.22.558, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-16(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB148_9
.LBB148_8:
	movabsq	$.L.str.23.559, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB148_9:
	movl	-4(%rbp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB148_11
# %bb.10:
	movabsq	$.L.str.24.560, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB148_12
.LBB148_11:
	movabsq	$.L.str.25.561, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB148_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end148:
	.size	trace_logger_log_double, .Lfunc_end148-trace_logger_log_double
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_vector # -- Begin function trace_logger_log_vector
	.p2align	4, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
.Lfunc_begin149:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB149_13
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB149_13
# %bb.2:
	movl	-44(%rbp), %eax         # 4-byte Reload
	sarl	$31, %eax
	movl	%eax, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	movabsq	$8589934576, %r8        # imm = 0x1FFFFFFF0
	andq	%r8, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	shrl	$29, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	addl	%eax, %ecx
	sarl	$3, %ecx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%ecx, %edx
	movq	%r8, -64(%rbp)          # 8-byte Spill
	callq	_Z20convert_bytes_to_hexPcPhi
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	je	.LBB149_3
	jmp	.LBB149_14
.LBB149_14:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -80(%rbp)         # 4-byte Spill
	je	.LBB149_4
	jmp	.LBB149_5
.LBB149_3:
	movabsq	$.L.str.29.569, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB149_6
.LBB149_4:
	movabsq	$.L.str.30.570, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB149_6
.LBB149_5:
	movabsq	$.L.str.31.571, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB149_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB149_8
# %bb.7:
	movabsq	$.L.str.22.558, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
	jmp	.LBB149_9
.LBB149_8:
	movabsq	$.L.str.23.559, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -100(%rbp)        # 4-byte Spill
.LBB149_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB149_11
# %bb.10:
	movabsq	$.L.str.24.560, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -104(%rbp)        # 4-byte Spill
	jmp	.LBB149_12
.LBB149_11:
	movabsq	$.L.str.25.561, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
.LBB149_12:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB149_13:
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end149:
	.size	trace_logger_log_vector, .Lfunc_end149-trace_logger_log_vector
	.cfi_endproc
                                        # -- End function
	.type	.L.str.177,@object      # @.str.177
	.section	.rodata,"a",@progbits
	.p2align	4
.L.str.177:
	.asciz	"polymul/loopi 115\npolymul/loopj 116\n"
	.size	.L.str.177, 37

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"main"
	.size	.L.str.15, 5

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"0:0"
	.size	.L.str.16, 4

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"call"
	.size	.L.str.17, 5

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"time"
	.size	.L.str.18, 5

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"phi"
	.size	.L.str.19, 4

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.zero	1
	.size	.L.str.20, 1

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"conv"
	.size	.L.str.21, 5

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"0:0-2"
	.size	.L.str.22, 6

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"srand"
	.size	.L.str.23, 6

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"call1"
	.size	.L.str.24, 6

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"printf"
	.size	.L.str.25, 7

	.type	.L.str.26,@object       # @.str.26
	.p2align	4
.L.str.26:
	.asciz	"Testing encyrpt/decrypt\n"
	.size	.L.str.26, 25

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Testing encyrpt/decrypt\n"
	.size	.L.str, 25

	.type	.L.str.27,@object       # @.str.27
	.section	.rodata,"a",@progbits
.L.str.27:
	.asciz	"call3"
	.size	.L.str.27, 6

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"malloc"
	.size	.L.str.28, 7

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"1"
	.size	.L.str.29, 2

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"0:0-7"
	.size	.L.str.30, 6

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"i"
	.size	.L.str.31, 2

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"arrayidx4"
	.size	.L.str.32, 10

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"2"
	.size	.L.str.33, 2

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"0:0-8"
	.size	.L.str.34, 6

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	"0:0-10"
	.size	.L.str.35, 7

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"4:1"
	.size	.L.str.36, 4

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"3:0"
	.size	.L.str.37, 4

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"call8"
	.size	.L.str.38, 6

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"keygen_secret"
	.size	.L.str.39, 14

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"n"
	.size	.L.str.40, 2

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"call9"
	.size	.L.str.41, 6

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"keygen_pub1"
	.size	.L.str.42, 12

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"q"
	.size	.L.str.43, 2

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"call10"
	.size	.L.str.44, 7

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"copy_poly"
	.size	.L.str.45, 10

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"call11"
	.size	.L.str.46, 7

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"keygen_pub0"
	.size	.L.str.47, 12

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"cmp12"
	.size	.L.str.48, 6

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"argc"
	.size	.L.str.49, 5

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"3:0-4"
	.size	.L.str.50, 6

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"5:0"
	.size	.L.str.51, 4

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"7:0"
	.size	.L.str.52, 4

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"indvars.iv"
	.size	.L.str.53, 11

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"indvars.iv.next"
	.size	.L.str.54, 16

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	"arrayidx7"
	.size	.L.str.55, 10

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"4:1-1"
	.size	.L.str.56, 6

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"exitcond"
	.size	.L.str.57, 9

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"4:1-2"
	.size	.L.str.58, 6

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"arrayidx14"
	.size	.L.str.59, 11

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"argv"
	.size	.L.str.60, 5

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"6"
	.size	.L.str.61, 2

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"call15"
	.size	.L.str.62, 7

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"atoi"
	.size	.L.str.63, 5

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"5:0-0"
	.size	.L.str.64, 6

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"cond"
	.size	.L.str.65, 5

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"call16"
	.size	.L.str.66, 7

	.type	.L.str.67,@object       # @.str.67
	.p2align	4
.L.str.67:
	.asciz	"Initial Value: %d\n"
	.size	.L.str.67, 19

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"Initial Value: %d\n"
	.size	.L.str.1, 19

	.type	.L.str.68,@object       # @.str.68
	.section	.rodata,"a",@progbits
.L.str.68:
	.asciz	"call17"
	.size	.L.str.68, 7

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"encrypt"
	.size	.L.str.69, 8

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"t"
	.size	.L.str.70, 2

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"8"
	.size	.L.str.71, 2

	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	"call19"
	.size	.L.str.72, 7

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"arrayidx20"
	.size	.L.str.73, 11

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	"9"
	.size	.L.str.74, 2

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"call21"
	.size	.L.str.75, 7

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"call22"
	.size	.L.str.76, 7

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"decrypt"
	.size	.L.str.77, 8

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"call23"
	.size	.L.str.78, 7

	.type	.L.str.79,@object       # @.str.79
	.p2align	4
.L.str.79:
	.asciz	"Test: Encryption/Decryption\n"
	.size	.L.str.79, 29

	.type	.L.str.2,@object        # @.str.2
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2:
	.asciz	"Test: Encryption/Decryption\n"
	.size	.L.str.2, 29

	.type	.L.str.80,@object       # @.str.80
	.section	.rodata,"a",@progbits
.L.str.80:
	.asciz	"cmp24"
	.size	.L.str.80, 6

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"7:0-5"
	.size	.L.str.81, 6

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"11:0"
	.size	.L.str.82, 5

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"10:0"
	.size	.L.str.83, 5

	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"call26"
	.size	.L.str.84, 7

	.type	.L.str.85,@object       # @.str.85
	.p2align	4
.L.str.85:
	.asciz	"Encrypt/Decrypt failed\n result: %d\n expected: %d\n"
	.size	.L.str.85, 50

	.type	.L.str.3,@object        # @.str.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3:
	.asciz	"Encrypt/Decrypt failed\n result: %d\n expected: %d\n"
	.size	.L.str.3, 50

	.type	.L.str.86,@object       # @.str.86
	.section	.rodata,"a",@progbits
.L.str.86:
	.asciz	"10:0-0"
	.size	.L.str.86, 7

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"12:0"
	.size	.L.str.87, 5

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"call27"
	.size	.L.str.88, 7

	.type	.L.str.89,@object       # @.str.89
	.p2align	4
.L.str.89:
	.asciz	"Encrypt/Decrypt test passed!\n"
	.size	.L.str.89, 30

	.type	.L.str.4,@object        # @.str.4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4:
	.asciz	"Encrypt/Decrypt test passed!\n"
	.size	.L.str.4, 30

	.type	.L.str.90,@object       # @.str.90
	.section	.rodata,"a",@progbits
.L.str.90:
	.asciz	"11:0-0"
	.size	.L.str.90, 7

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"cmp28"
	.size	.L.str.91, 6

	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"12:0-0"
	.size	.L.str.92, 7

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"13:0"
	.size	.L.str.93, 5

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"15:0"
	.size	.L.str.94, 5

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"arrayidx30"
	.size	.L.str.95, 11

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"14"
	.size	.L.str.96, 3

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"call31"
	.size	.L.str.97, 7

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"13:0-0"
	.size	.L.str.98, 7

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"cond32"
	.size	.L.str.99, 7

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"call33"
	.size	.L.str.100, 7

	.type	.L.str.101,@object      # @.str.101
	.p2align	4
.L.str.101:
	.asciz	"Test: adding %d to ciphertext\n"
	.size	.L.str.101, 31

	.type	.L.str.5,@object        # @.str.5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5:
	.asciz	"Test: adding %d to ciphertext\n"
	.size	.L.str.5, 31

	.type	.L.str.102,@object      # @.str.102
	.section	.rodata,"a",@progbits
.L.str.102:
	.asciz	"16"
	.size	.L.str.102, 3

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"call35"
	.size	.L.str.103, 7

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"17"
	.size	.L.str.104, 3

	.type	.L.str.105,@object      # @.str.105
.L.str.105:
	.asciz	"call37"
	.size	.L.str.105, 7

	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"call38"
	.size	.L.str.106, 7

	.type	.L.str.107,@object      # @.str.107
.L.str.107:
	.asciz	"plain_add"
	.size	.L.str.107, 10

	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"call39"
	.size	.L.str.108, 7

	.type	.L.str.109,@object      # @.str.109
.L.str.109:
	.asciz	"add40"
	.size	.L.str.109, 6

	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"rem"
	.size	.L.str.110, 4

	.type	.L.str.111,@object      # @.str.111
.L.str.111:
	.asciz	"cmp41"
	.size	.L.str.111, 6

	.type	.L.str.112,@object      # @.str.112
.L.str.112:
	.asciz	"15:0-5"
	.size	.L.str.112, 7

	.type	.L.str.113,@object      # @.str.113
.L.str.113:
	.asciz	"19:0"
	.size	.L.str.113, 5

	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"18:0"
	.size	.L.str.114, 5

	.type	.L.str.115,@object      # @.str.115
.L.str.115:
	.asciz	"call45"
	.size	.L.str.115, 7

	.type	.L.str.116,@object      # @.str.116
	.p2align	4
.L.str.116:
	.asciz	"Add test failed!\n result: %d\n expected: %d\n"
	.size	.L.str.116, 44

	.type	.L.str.6,@object        # @.str.6
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6:
	.asciz	"Add test failed!\n result: %d\n expected: %d\n"
	.size	.L.str.6, 44

	.type	.L.str.117,@object      # @.str.117
	.section	.rodata,"a",@progbits
.L.str.117:
	.asciz	"18:0-0"
	.size	.L.str.117, 7

	.type	.L.str.118,@object      # @.str.118
.L.str.118:
	.asciz	"20:0"
	.size	.L.str.118, 5

	.type	.L.str.119,@object      # @.str.119
.L.str.119:
	.asciz	"call46"
	.size	.L.str.119, 7

	.type	.L.str.120,@object      # @.str.120
	.p2align	4
.L.str.120:
	.asciz	"Plaintext Addition test passed!\n"
	.size	.L.str.120, 33

	.type	.L.str.7,@object        # @.str.7
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.7:
	.asciz	"Plaintext Addition test passed!\n"
	.size	.L.str.7, 33

	.type	.L.str.121,@object      # @.str.121
	.section	.rodata,"a",@progbits
.L.str.121:
	.asciz	"19:0-0"
	.size	.L.str.121, 7

	.type	.L.str.122,@object      # @.str.122
.L.str.122:
	.asciz	"cmp47"
	.size	.L.str.122, 6

	.type	.L.str.123,@object      # @.str.123
.L.str.123:
	.asciz	"20:0-0"
	.size	.L.str.123, 7

	.type	.L.str.124,@object      # @.str.124
.L.str.124:
	.asciz	"21:0"
	.size	.L.str.124, 5

	.type	.L.str.125,@object      # @.str.125
.L.str.125:
	.asciz	"23:0"
	.size	.L.str.125, 5

	.type	.L.str.126,@object      # @.str.126
.L.str.126:
	.asciz	"arrayidx49"
	.size	.L.str.126, 11

	.type	.L.str.127,@object      # @.str.127
.L.str.127:
	.asciz	"22"
	.size	.L.str.127, 3

	.type	.L.str.128,@object      # @.str.128
.L.str.128:
	.asciz	"call50"
	.size	.L.str.128, 7

	.type	.L.str.129,@object      # @.str.129
.L.str.129:
	.asciz	"21:0-0"
	.size	.L.str.129, 7

	.type	.L.str.130,@object      # @.str.130
.L.str.130:
	.asciz	"cond51"
	.size	.L.str.130, 7

	.type	.L.str.131,@object      # @.str.131
.L.str.131:
	.asciz	"24"
	.size	.L.str.131, 3

	.type	.L.str.132,@object      # @.str.132
.L.str.132:
	.asciz	"call53"
	.size	.L.str.132, 7

	.type	.L.str.133,@object      # @.str.133
.L.str.133:
	.asciz	"call54"
	.size	.L.str.133, 7

	.type	.L.str.134,@object      # @.str.134
	.p2align	4
.L.str.134:
	.asciz	"Test: multiplying %d to ciphertext of %d\n"
	.size	.L.str.134, 42

	.type	.L.str.8,@object        # @.str.8
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.8:
	.asciz	"Test: multiplying %d to ciphertext of %d\n"
	.size	.L.str.8, 42

	.type	.L.str.135,@object      # @.str.135
	.section	.rodata,"a",@progbits
.L.str.135:
	.asciz	"call55"
	.size	.L.str.135, 7

	.type	.L.str.136,@object      # @.str.136
.L.str.136:
	.asciz	"plain_mul"
	.size	.L.str.136, 10

	.type	.L.str.137,@object      # @.str.137
.L.str.137:
	.asciz	"25"
	.size	.L.str.137, 3

	.type	.L.str.138,@object      # @.str.138
.L.str.138:
	.asciz	"arrayidx57"
	.size	.L.str.138, 11

	.type	.L.str.139,@object      # @.str.139
.L.str.139:
	.asciz	"26"
	.size	.L.str.139, 3

	.type	.L.str.140,@object      # @.str.140
.L.str.140:
	.asciz	"call58"
	.size	.L.str.140, 7

	.type	.L.str.141,@object      # @.str.141
.L.str.141:
	.asciz	"mul59"
	.size	.L.str.141, 6

	.type	.L.str.142,@object      # @.str.142
.L.str.142:
	.asciz	"rem60"
	.size	.L.str.142, 6

	.type	.L.str.143,@object      # @.str.143
.L.str.143:
	.asciz	"cmp61"
	.size	.L.str.143, 6

	.type	.L.str.144,@object      # @.str.144
.L.str.144:
	.asciz	"23:0-4"
	.size	.L.str.144, 7

	.type	.L.str.145,@object      # @.str.145
.L.str.145:
	.asciz	"28:0"
	.size	.L.str.145, 5

	.type	.L.str.146,@object      # @.str.146
.L.str.146:
	.asciz	"27:0"
	.size	.L.str.146, 5

	.type	.L.str.147,@object      # @.str.147
.L.str.147:
	.asciz	"call66"
	.size	.L.str.147, 7

	.type	.L.str.148,@object      # @.str.148
	.p2align	4
.L.str.148:
	.asciz	"Mul test failed!\n result: %d\n expected: %d\n"
	.size	.L.str.148, 44

	.type	.L.str.9,@object        # @.str.9
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9:
	.asciz	"Mul test failed!\n result: %d\n expected: %d\n"
	.size	.L.str.9, 44

	.type	.L.str.149,@object      # @.str.149
	.section	.rodata,"a",@progbits
.L.str.149:
	.asciz	"27:0-0"
	.size	.L.str.149, 7

	.type	.L.str.150,@object      # @.str.150
.L.str.150:
	.asciz	"29:0"
	.size	.L.str.150, 5

	.type	.L.str.151,@object      # @.str.151
.L.str.151:
	.asciz	"call67"
	.size	.L.str.151, 7

	.type	.L.str.152,@object      # @.str.152
	.p2align	4
.L.str.152:
	.asciz	"Plaintext Multiplication test passed!\n"
	.size	.L.str.152, 39

	.type	.L.str.10,@object       # @.str.10
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.10:
	.asciz	"Plaintext Multiplication test passed!\n"
	.size	.L.str.10, 39

	.type	.L.str.153,@object      # @.str.153
	.section	.rodata,"a",@progbits
.L.str.153:
	.asciz	"28:0-0"
	.size	.L.str.153, 7

	.type	.L.str.154,@object      # @.str.154
.L.str.154:
	.asciz	"call68"
	.size	.L.str.154, 7

	.type	.L.str.155,@object      # @.str.155
	.p2align	4
.L.str.155:
	.asciz	"Test: adding %d to %d where both are encrypted\n"
	.size	.L.str.155, 48

	.type	.L.str.11,@object       # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"Test: adding %d to %d where both are encrypted\n"
	.size	.L.str.11, 48

	.type	.L.str.156,@object      # @.str.156
	.section	.rodata,"a",@progbits
.L.str.156:
	.asciz	"call69"
	.size	.L.str.156, 7

	.type	.L.str.157,@object      # @.str.157
.L.str.157:
	.asciz	"call70"
	.size	.L.str.157, 7

	.type	.L.str.158,@object      # @.str.158
.L.str.158:
	.asciz	"crypto_add"
	.size	.L.str.158, 11

	.type	.L.str.159,@object      # @.str.159
.L.str.159:
	.asciz	"30"
	.size	.L.str.159, 3

	.type	.L.str.160,@object      # @.str.160
.L.str.160:
	.asciz	"arrayidx72"
	.size	.L.str.160, 11

	.type	.L.str.161,@object      # @.str.161
.L.str.161:
	.asciz	"31"
	.size	.L.str.161, 3

	.type	.L.str.162,@object      # @.str.162
.L.str.162:
	.asciz	"call73"
	.size	.L.str.162, 7

	.type	.L.str.163,@object      # @.str.163
.L.str.163:
	.asciz	"cmp76"
	.size	.L.str.163, 6

	.type	.L.str.164,@object      # @.str.164
.L.str.164:
	.asciz	"29:0-3"
	.size	.L.str.164, 7

	.type	.L.str.165,@object      # @.str.165
.L.str.165:
	.asciz	"33:0"
	.size	.L.str.165, 5

	.type	.L.str.166,@object      # @.str.166
.L.str.166:
	.asciz	"32:0"
	.size	.L.str.166, 5

	.type	.L.str.167,@object      # @.str.167
.L.str.167:
	.asciz	"call80"
	.size	.L.str.167, 7

	.type	.L.str.168,@object      # @.str.168
	.p2align	4
.L.str.168:
	.asciz	"Crypto Add test failed!\n result: %d\n expected: %d\n"
	.size	.L.str.168, 51

	.type	.L.str.12,@object       # @.str.12
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.12:
	.asciz	"Crypto Add test failed!\n result: %d\n expected: %d\n"
	.size	.L.str.12, 51

	.type	.L.str.169,@object      # @.str.169
	.section	.rodata,"a",@progbits
.L.str.169:
	.asciz	"32:0-0"
	.size	.L.str.169, 7

	.type	.L.str.170,@object      # @.str.170
.L.str.170:
	.asciz	"34:0"
	.size	.L.str.170, 5

	.type	.L.str.171,@object      # @.str.171
.L.str.171:
	.asciz	"call81"
	.size	.L.str.171, 7

	.type	.L.str.172,@object      # @.str.172
	.p2align	4
.L.str.172:
	.asciz	"Cryptographic Addition test passed!\n"
	.size	.L.str.172, 37

	.type	.L.str.13,@object       # @.str.13
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.13:
	.asciz	"Cryptographic Addition test passed!\n"
	.size	.L.str.13, 37

	.type	.L.str.173,@object      # @.str.173
	.section	.rodata,"a",@progbits
.L.str.173:
	.asciz	"33:0-0"
	.size	.L.str.173, 7

	.type	.L.str.174,@object      # @.str.174
.L.str.174:
	.asciz	"call82"
	.size	.L.str.174, 7

	.type	.L.str.175,@object      # @.str.175
	.p2align	4
.L.str.175:
	.asciz	"Operation finished fully\n"
	.size	.L.str.175, 26

	.type	.L.str.14,@object       # @.str.14
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.14:
	.asciz	"Operation finished fully\n"
	.size	.L.str.14, 26

	.type	.L.str.176,@object      # @.str.176
	.section	.rodata,"a",@progbits
.L.str.176:
	.asciz	"34:0-0"
	.size	.L.str.176, 7

	.type	.L.str.3.1,@object      # @.str.3.1
.L.str.3.1:
	.asciz	"x"
	.size	.L.str.3.1, 2

	.type	.L.str.4.2,@object      # @.str.4.2
.L.str.4.2:
	.asciz	"phi"
	.size	.L.str.4.2, 4

	.type	.L.str.178,@object      # @.str.178
.L.str.178:
	.asciz	"free_tuple"
	.size	.L.str.178, 11

	.type	.L.str.1.179,@object    # @.str.1.179
.L.str.1.179:
	.asciz	"0:0"
	.size	.L.str.1.179, 4

	.type	.L.str.2.180,@object    # @.str.2.180
.L.str.2.180:
	.asciz	"1"
	.size	.L.str.2.180, 2

	.type	.L.str.5.181,@object    # @.str.5.181
.L.str.5.181:
	.asciz	"0:0-1"
	.size	.L.str.5.181, 6

	.type	.L.str.6.182,@object    # @.str.6.182
.L.str.6.182:
	.asciz	"free_poly"
	.size	.L.str.6.182, 10

	.type	.L.str.7.183,@object    # @.str.7.183
.L.str.7.183:
	.asciz	"arrayidx1"
	.size	.L.str.7.183, 10

	.type	.L.str.8.184,@object    # @.str.8.184
.L.str.8.184:
	.zero	1
	.size	.L.str.8.184, 1

	.type	.L.str.9.185,@object    # @.str.9.185
.L.str.9.185:
	.asciz	"2"
	.size	.L.str.9.185, 2

	.type	.L.str.10.186,@object   # @.str.10.186
.L.str.10.186:
	.asciz	"0:0-2"
	.size	.L.str.10.186, 6

	.type	.L.str.11.187,@object   # @.str.11.187
.L.str.11.187:
	.asciz	"3"
	.size	.L.str.11.187, 2

	.type	.L.str.12.188,@object   # @.str.12.188
.L.str.12.188:
	.asciz	"0:0-3"
	.size	.L.str.12.188, 6

	.type	.L.str.13.189,@object   # @.str.13.189
.L.str.13.189:
	.asciz	"free"
	.size	.L.str.13.189, 5

	.type	.L.str.14.190,@object   # @.str.14.190
.L.str.14.190:
	.asciz	"0:0-4"
	.size	.L.str.14.190, 6

	.type	.L.str.17.191,@object   # @.str.17.191
.L.str.17.191:
	.asciz	"size"
	.size	.L.str.17.191, 5

	.type	.L.str.15.192,@object   # @.str.15.192
.L.str.15.192:
	.asciz	"gen_binary_poly"
	.size	.L.str.15.192, 16

	.type	.L.str.16.193,@object   # @.str.16.193
.L.str.16.193:
	.asciz	"conv"
	.size	.L.str.16.193, 5

	.type	.L.str.18.194,@object   # @.str.18.194
.L.str.18.194:
	.asciz	"mul"
	.size	.L.str.18.194, 4

	.type	.L.str.19.195,@object   # @.str.19.195
.L.str.19.195:
	.asciz	"call"
	.size	.L.str.19.195, 5

	.type	.L.str.20.196,@object   # @.str.20.196
.L.str.20.196:
	.asciz	"malloc"
	.size	.L.str.20.196, 7

	.type	.L.str.21.197,@object   # @.str.21.197
.L.str.21.197:
	.asciz	"cmp9"
	.size	.L.str.21.197, 5

	.type	.L.str.22.198,@object   # @.str.22.198
.L.str.22.198:
	.asciz	"i"
	.size	.L.str.22.198, 2

	.type	.L.str.23.199,@object   # @.str.23.199
.L.str.23.199:
	.asciz	".lr.ph:0"
	.size	.L.str.23.199, 9

	.type	.L.str.24.200,@object   # @.str.24.200
.L.str.24.200:
	.asciz	"._crit_edge:0"
	.size	.L.str.24.200, 14

	.type	.L.str.25.201,@object   # @.str.25.201
.L.str.25.201:
	.asciz	"wide.trip.count"
	.size	.L.str.25.201, 16

	.type	.L.str.26.202,@object   # @.str.26.202
.L.str.26.202:
	.asciz	".lr.ph:0-0"
	.size	.L.str.26.202, 11

	.type	.L.str.27.203,@object   # @.str.27.203
.L.str.27.203:
	.asciz	"2:1"
	.size	.L.str.27.203, 4

	.type	.L.str.28.204,@object   # @.str.28.204
.L.str.28.204:
	.asciz	"._crit_edge:0-0"
	.size	.L.str.28.204, 16

	.type	.L.str.29.205,@object   # @.str.29.205
.L.str.29.205:
	.asciz	"indvars.iv"
	.size	.L.str.29.205, 11

	.type	.L.str.30.206,@object   # @.str.30.206
.L.str.30.206:
	.asciz	"indvars.iv.next"
	.size	.L.str.30.206, 16

	.type	.L.str.31.207,@object   # @.str.31.207
.L.str.31.207:
	.asciz	"call2"
	.size	.L.str.31.207, 6

	.type	.L.str.32.208,@object   # @.str.32.208
.L.str.32.208:
	.asciz	"rand"
	.size	.L.str.32.208, 5

	.type	.L.str.33.209,@object   # @.str.33.209
.L.str.33.209:
	.asciz	"rem"
	.size	.L.str.33.209, 4

	.type	.L.str.34.210,@object   # @.str.34.210
.L.str.34.210:
	.asciz	"arrayidx"
	.size	.L.str.34.210, 9

	.type	.L.str.35.211,@object   # @.str.35.211
.L.str.35.211:
	.asciz	"2:1-1"
	.size	.L.str.35.211, 6

	.type	.L.str.36.212,@object   # @.str.36.212
.L.str.36.212:
	.asciz	"exitcond"
	.size	.L.str.36.212, 9

	.type	.L.str.37.213,@object   # @.str.37.213
.L.str.37.213:
	.asciz	"2:1-2"
	.size	.L.str.37.213, 6

	.type	.L.str.39.214,@object   # @.str.39.214
.L.str.39.214:
	.asciz	"mod"
	.size	.L.str.39.214, 4

	.type	.L.str.38.215,@object   # @.str.38.215
	.p2align	4
.L.str.38.215:
	.asciz	"gen_uniform_poly"
	.size	.L.str.38.215, 17

	.type	.L.str.50.216,@object   # @.str.50.216
.L.str.50.216:
	.asciz	"mean"
	.size	.L.str.50.216, 5

	.type	.L.str.51.217,@object   # @.str.51.217
.L.str.51.217:
	.asciz	"std"
	.size	.L.str.51.217, 4

	.type	.L.str.40.218,@object   # @.str.40.218
.L.str.40.218:
	.asciz	"norm_rand"
	.size	.L.str.40.218, 10

	.type	.L.str.41.219,@object   # @.str.41.219
.L.str.41.219:
	.asciz	"1:0"
	.size	.L.str.41.219, 4

	.type	.L.str.42.220,@object   # @.str.42.220
.L.str.42.220:
	.asciz	"sub"
	.size	.L.str.42.220, 4

	.type	.L.str.43.221,@object   # @.str.43.221
.L.str.43.221:
	.asciz	"add"
	.size	.L.str.43.221, 4

	.type	.L.str.44.222,@object   # @.str.44.222
.L.str.44.222:
	.asciz	"1:0-0"
	.size	.L.str.44.222, 6

	.type	.L.str.45.223,@object   # @.str.45.223
.L.str.45.223:
	.asciz	"i.06"
	.size	.L.str.45.223, 5

	.type	.L.str.46.224,@object   # @.str.46.224
.L.str.46.224:
	.asciz	"inc"
	.size	.L.str.46.224, 4

	.type	.L.str.47.225,@object   # @.str.47.225
.L.str.47.225:
	.asciz	"ret"
	.size	.L.str.47.225, 4

	.type	.L.str.48.226,@object   # @.str.48.226
.L.str.48.226:
	.asciz	"ret.05"
	.size	.L.str.48.226, 7

	.type	.L.str.49.227,@object   # @.str.49.227
.L.str.49.227:
	.asciz	"2:1-4"
	.size	.L.str.49.227, 6

	.type	.L.str.52.228,@object   # @.str.52.228
.L.str.52.228:
	.asciz	"gen_normal_poly"
	.size	.L.str.52.228, 16

	.type	.L.str.54.229,@object   # @.str.54.229
.L.str.54.229:
	.asciz	"val"
	.size	.L.str.54.229, 4

	.type	.L.str.53.230,@object   # @.str.53.230
.L.str.53.230:
	.asciz	"gen_const_poly"
	.size	.L.str.53.230, 15

	.type	.L.str.55.231,@object   # @.str.55.231
.L.str.55.231:
	.asciz	"cmp10"
	.size	.L.str.55.231, 6

	.type	.L.str.56.232,@object   # @.str.56.232
.L.str.56.232:
	.asciz	"0:0-5"
	.size	.L.str.56.232, 6

	.type	.L.str.57.233,@object   # @.str.57.233
.L.str.57.233:
	.asciz	"arrayidx2"
	.size	.L.str.57.233, 10

	.type	.L.str.58.236,@object   # @.str.58.236
.L.str.58.236:
	.asciz	"keygen_secret"
	.size	.L.str.58.236, 14

	.type	.L.str.59.239,@object   # @.str.59.239
.L.str.59.239:
	.asciz	"keygen_pub1"
	.size	.L.str.59.239, 12

	.type	.L.str.63.242,@object   # @.str.63.242
.L.str.63.242:
	.asciz	"a"
	.size	.L.str.63.242, 2

	.type	.L.str.66.243,@object   # @.str.66.243
.L.str.66.243:
	.asciz	"secret"
	.size	.L.str.66.243, 7

	.type	.L.str.67.244,@object   # @.str.67.244
.L.str.67.244:
	.asciz	"polymod"
	.size	.L.str.67.244, 8

	.type	.L.str.60.245,@object   # @.str.60.245
.L.str.60.245:
	.asciz	"keygen_pub0"
	.size	.L.str.60.245, 12

	.type	.L.str.61.246,@object   # @.str.61.246
.L.str.61.246:
	.asciz	"0:0-6"
	.size	.L.str.61.246, 6

	.type	.L.str.62.247,@object   # @.str.62.247
.L.str.62.247:
	.asciz	"neg_poly"
	.size	.L.str.62.247, 9

	.type	.L.str.64.248,@object   # @.str.64.248
.L.str.64.248:
	.asciz	"call1"
	.size	.L.str.64.248, 6

	.type	.L.str.65.249,@object   # @.str.65.249
.L.str.65.249:
	.asciz	"polymul"
	.size	.L.str.65.249, 8

	.type	.L.str.68.250,@object   # @.str.68.250
.L.str.68.250:
	.asciz	"0:0-9"
	.size	.L.str.68.250, 6

	.type	.L.str.69.251,@object   # @.str.69.251
.L.str.69.251:
	.asciz	"polyadd"
	.size	.L.str.69.251, 8

	.type	.L.str.70.252,@object   # @.str.70.252
.L.str.70.252:
	.asciz	"0:0-11"
	.size	.L.str.70.252, 7

	.type	.L.str.78.255,@object   # @.str.78.255
.L.str.78.255:
	.asciz	"pub0"
	.size	.L.str.78.255, 5

	.type	.L.str.82.256,@object   # @.str.82.256
.L.str.82.256:
	.asciz	"pub1"
	.size	.L.str.82.256, 5

	.type	.L.str.74.257,@object   # @.str.74.257
.L.str.74.257:
	.asciz	"q"
	.size	.L.str.74.257, 2

	.type	.L.str.73.258,@object   # @.str.73.258
.L.str.73.258:
	.asciz	"t"
	.size	.L.str.73.258, 2

	.type	.L.str.71.259,@object   # @.str.71.259
.L.str.71.259:
	.asciz	"encrypt"
	.size	.L.str.71.259, 8

	.type	.L.str.72.260,@object   # @.str.72.260
.L.str.72.260:
	.asciz	"div"
	.size	.L.str.72.260, 4

	.type	.L.str.75.261,@object   # @.str.75.261
.L.str.75.261:
	.asciz	"scalar_mul"
	.size	.L.str.75.261, 11

	.type	.L.str.76.262,@object   # @.str.76.262
.L.str.76.262:
	.asciz	"call3"
	.size	.L.str.76.262, 6

	.type	.L.str.77.263,@object   # @.str.77.263
.L.str.77.263:
	.asciz	"call4"
	.size	.L.str.77.263, 6

	.type	.L.str.79.264,@object   # @.str.79.264
.L.str.79.264:
	.asciz	"call5"
	.size	.L.str.79.264, 6

	.type	.L.str.80.265,@object   # @.str.80.265
.L.str.80.265:
	.asciz	"call6"
	.size	.L.str.80.265, 6

	.type	.L.str.81.266,@object   # @.str.81.266
.L.str.81.266:
	.asciz	"call7"
	.size	.L.str.81.266, 6

	.type	.L.str.83.267,@object   # @.str.83.267
.L.str.83.267:
	.asciz	"call8"
	.size	.L.str.83.267, 6

	.type	.L.str.84.268,@object   # @.str.84.268
.L.str.84.268:
	.asciz	"call9"
	.size	.L.str.84.268, 6

	.type	.L.str.85.269,@object   # @.str.85.269
.L.str.85.269:
	.asciz	"0:0-20"
	.size	.L.str.85.269, 7

	.type	.L.str.86.270,@object   # @.str.86.270
.L.str.86.270:
	.asciz	"arrayidx10"
	.size	.L.str.86.270, 11

	.type	.L.str.87.271,@object   # @.str.87.271
.L.str.87.271:
	.asciz	"0:0-21"
	.size	.L.str.87.271, 7

	.type	.L.str.88.272,@object   # @.str.88.272
.L.str.88.272:
	.asciz	"0:0-22"
	.size	.L.str.88.272, 7

	.type	.L.str.91.275,@object   # @.str.91.275
.L.str.91.275:
	.asciz	"secretKey"
	.size	.L.str.91.275, 10

	.type	.L.str.92.276,@object   # @.str.92.276
.L.str.92.276:
	.asciz	"cipher0"
	.size	.L.str.92.276, 8

	.type	.L.str.90.277,@object   # @.str.90.277
.L.str.90.277:
	.asciz	"cipher1"
	.size	.L.str.90.277, 8

	.type	.L.str.89.278,@object   # @.str.89.278
.L.str.89.278:
	.asciz	"decrypt"
	.size	.L.str.89.278, 8

	.type	.L.str.93.279,@object   # @.str.93.279
.L.str.93.279:
	.asciz	"conv2"
	.size	.L.str.93.279, 6

	.type	.L.str.94.280,@object   # @.str.94.280
.L.str.94.280:
	.asciz	"conv3"
	.size	.L.str.94.280, 6

	.type	.L.str.95.281,@object   # @.str.95.281
.L.str.95.281:
	.asciz	"round"
	.size	.L.str.95.281, 6

	.type	.L.str.96.282,@object   # @.str.96.282
.L.str.96.282:
	.asciz	"conv5"
	.size	.L.str.96.282, 6

	.type	.L.str.97.283,@object   # @.str.97.283
.L.str.97.283:
	.asciz	"0:0-13"
	.size	.L.str.97.283, 7

	.type	.L.str.98.286,@object   # @.str.98.286
.L.str.98.286:
	.asciz	"plain_add"
	.size	.L.str.98.286, 10

	.type	.L.str.99.289,@object   # @.str.99.289
.L.str.99.289:
	.asciz	"plain_mul"
	.size	.L.str.99.289, 10

	.type	.L.str.100.290,@object  # @.str.100.290
.L.str.100.290:
	.asciz	"0:0-12"
	.size	.L.str.100.290, 7

	.type	.L.str.101.291,@object  # @.str.101.291
.L.str.101.291:
	.asciz	"arrayidx4"
	.size	.L.str.101.291, 10

	.type	.L.str.102.292,@object  # @.str.102.292
.L.str.102.292:
	.asciz	"0:0-14"
	.size	.L.str.102.292, 7

	.type	.L.str.103.293,@object  # @.str.103.293
.L.str.103.293:
	.asciz	"0:0-15"
	.size	.L.str.103.293, 7

	.type	.L.str.105.296,@object  # @.str.105.296
.L.str.105.296:
	.asciz	"cipher2"
	.size	.L.str.105.296, 8

	.type	.L.str.104.297,@object  # @.str.104.297
.L.str.104.297:
	.asciz	"crypto_add"
	.size	.L.str.104.297, 11

	.type	.L.str.106.298,@object  # @.str.106.298
.L.str.106.298:
	.asciz	"arrayidx3"
	.size	.L.str.106.298, 10

	.type	.L.str.107.299,@object  # @.str.107.299
.L.str.107.299:
	.asciz	"4"
	.size	.L.str.107.299, 2

	.type	.L.str.108.300,@object  # @.str.108.300
.L.str.108.300:
	.asciz	"5"
	.size	.L.str.108.300, 2

	.type	.L.str.109.301,@object  # @.str.109.301
.L.str.109.301:
	.asciz	"arrayidx7"
	.size	.L.str.109.301, 10

	.type	.L.str.110.302,@object  # @.str.110.302
.L.str.110.302:
	.asciz	"6"
	.size	.L.str.110.302, 2

	.type	.L.str.111.303,@object  # @.str.111.303
.L.str.111.303:
	.asciz	"0:0-10"
	.size	.L.str.111.303, 7

	.type	.L.str.130.304,@object  # @.str.130.304
.L.str.130.304:
	.asciz	"y"
	.size	.L.str.130.304, 2

	.type	.L.str.132.305,@object  # @.str.132.305
.L.str.132.305:
	.asciz	"poly_size"
	.size	.L.str.132.305, 10

	.type	.L.str.114.306,@object  # @.str.114.306
.L.str.114.306:
	.asciz	"ar_size"
	.size	.L.str.114.306, 8

	.type	.L.str.112.307,@object  # @.str.112.307
.L.str.112.307:
	.asciz	"vector_mult"
	.size	.L.str.112.307, 12

	.type	.L.str.113.308,@object  # @.str.113.308
.L.str.113.308:
	.asciz	"cmp38"
	.size	.L.str.113.308, 6

	.type	.L.str.115.309,@object  # @.str.115.309
.L.str.115.309:
	.asciz	"0:0-8"
	.size	.L.str.115.309, 6

	.type	.L.str.116.310,@object  # @.str.116.310
.L.str.116.310:
	.asciz	".lr.ph41:0"
	.size	.L.str.116.310, 11

	.type	.L.str.117.311,@object  # @.str.117.311
	.p2align	4
.L.str.117.311:
	.asciz	"._crit_edge42.thread:0"
	.size	.L.str.117.311, 23

	.type	.L.str.118.312,@object  # @.str.118.312
	.p2align	4
.L.str.118.312:
	.asciz	"._crit_edge42.thread:0-2"
	.size	.L.str.118.312, 25

	.type	.L.str.119.313,@object  # @.str.119.313
	.p2align	4
.L.str.119.313:
	.asciz	"wide.trip.count45"
	.size	.L.str.119.313, 18

	.type	.L.str.120.314,@object  # @.str.120.314
.L.str.120.314:
	.asciz	".lr.ph41:0-0"
	.size	.L.str.120.314, 13

	.type	.L.str.121.315,@object  # @.str.121.315
.L.str.121.315:
	.asciz	"3:1"
	.size	.L.str.121.315, 4

	.type	.L.str.122.316,@object  # @.str.122.316
.L.str.122.316:
	.asciz	"._crit_edge42:0"
	.size	.L.str.122.316, 16

	.type	.L.str.123.317,@object  # @.str.123.317
.L.str.123.317:
	.asciz	"reduce"
	.size	.L.str.123.317, 7

	.type	.L.str.124.318,@object  # @.str.124.318
.L.str.124.318:
	.asciz	"cmp1135"
	.size	.L.str.124.318, 8

	.type	.L.str.125.319,@object  # @.str.125.319
	.p2align	4
.L.str.125.319:
	.asciz	"._crit_edge42:0-2"
	.size	.L.str.125.319, 18

	.type	.L.str.126.320,@object  # @.str.126.320
.L.str.126.320:
	.asciz	"8:1"
	.size	.L.str.126.320, 4

	.type	.L.str.127.321,@object  # @.str.127.321
.L.str.127.321:
	.asciz	"indvars.iv43"
	.size	.L.str.127.321, 13

	.type	.L.str.128.322,@object  # @.str.128.322
	.p2align	4
.L.str.128.322:
	.asciz	"indvars.iv.next44"
	.size	.L.str.128.322, 18

	.type	.L.str.129.323,@object  # @.str.129.323
.L.str.129.323:
	.asciz	"arrayidx6"
	.size	.L.str.129.323, 10

	.type	.L.str.131.324,@object  # @.str.131.324
.L.str.131.324:
	.asciz	"7"
	.size	.L.str.131.324, 2

	.type	.L.str.133.325,@object  # @.str.133.325
.L.str.133.325:
	.asciz	"3:1-1"
	.size	.L.str.133.325, 6

	.type	.L.str.134.326,@object  # @.str.134.326
.L.str.134.326:
	.asciz	"exitcond46"
	.size	.L.str.134.326, 11

	.type	.L.str.135.327,@object  # @.str.135.327
.L.str.135.327:
	.asciz	"3:1-2"
	.size	.L.str.135.327, 6

	.type	.L.str.136.328,@object  # @.str.136.328
.L.str.136.328:
	.asciz	"reduce.0.lcssa"
	.size	.L.str.136.328, 15

	.type	.L.str.137.329,@object  # @.str.137.329
.L.str.137.329:
	.asciz	"call14"
	.size	.L.str.137.329, 7

	.type	.L.str.138.330,@object  # @.str.138.330
.L.str.138.330:
	.asciz	"reduce.036"
	.size	.L.str.138.330, 11

	.type	.L.str.139.331,@object  # @.str.139.331
.L.str.139.331:
	.asciz	"arrayidx13"
	.size	.L.str.139.331, 11

	.type	.L.str.140.332,@object  # @.str.140.332
.L.str.140.332:
	.asciz	"9"
	.size	.L.str.140.332, 2

	.type	.L.str.141.333,@object  # @.str.141.333
.L.str.141.333:
	.asciz	"8:1-3"
	.size	.L.str.141.333, 6

	.type	.L.str.11.336,@object   # @.str.11.336
.L.str.11.336:
	.asciz	"x"
	.size	.L.str.11.336, 2

	.type	.L.str.10.337,@object   # @.str.10.337
.L.str.10.337:
	.asciz	"phi"
	.size	.L.str.10.337, 4

	.type	.L.str.6.338,@object    # @.str.6.338
.L.str.6.338:
	.asciz	"free_poly"
	.size	.L.str.6.338, 10

	.type	.L.str.7.339,@object    # @.str.7.339
.L.str.7.339:
	.asciz	"0:0"
	.size	.L.str.7.339, 4

	.type	.L.str.8.340,@object    # @.str.8.340
.L.str.8.340:
	.asciz	"coeffs"
	.size	.L.str.8.340, 7

	.type	.L.str.9.341,@object    # @.str.9.341
.L.str.9.341:
	.zero	1
	.size	.L.str.9.341, 1

	.type	.L.str.12.342,@object   # @.str.12.342
.L.str.12.342:
	.asciz	"1"
	.size	.L.str.12.342, 2

	.type	.L.str.13.343,@object   # @.str.13.343
.L.str.13.343:
	.asciz	"2"
	.size	.L.str.13.343, 2

	.type	.L.str.14.344,@object   # @.str.14.344
.L.str.14.344:
	.asciz	"0:0-1"
	.size	.L.str.14.344, 6

	.type	.L.str.15.345,@object   # @.str.15.345
.L.str.15.345:
	.asciz	"free"
	.size	.L.str.15.345, 5

	.type	.L.str.16.346,@object   # @.str.16.346
.L.str.16.346:
	.asciz	"3"
	.size	.L.str.16.346, 2

	.type	.L.str.17.347,@object   # @.str.17.347
.L.str.17.347:
	.asciz	"0:0-2"
	.size	.L.str.17.347, 6

	.type	.L.str.18.348,@object   # @.str.18.348
.L.str.18.348:
	.asciz	"0:0-3"
	.size	.L.str.18.348, 6

	.type	.L.str.22.349,@object   # @.str.22.349
.L.str.22.349:
	.asciz	"size"
	.size	.L.str.22.349, 5

	.type	.L.str.19.350,@object   # @.str.19.350
.L.str.19.350:
	.asciz	"print_poly"
	.size	.L.str.19.350, 11

	.type	.L.str.20.351,@object   # @.str.20.351
.L.str.20.351:
	.asciz	"cmp28"
	.size	.L.str.20.351, 6

	.type	.L.str.21.352,@object   # @.str.21.352
.L.str.21.352:
	.asciz	"first"
	.size	.L.str.21.352, 6

	.type	.L.str.23.353,@object   # @.str.23.353
.L.str.23.353:
	.asciz	"0:0-5"
	.size	.L.str.23.353, 6

	.type	.L.str.24.354,@object   # @.str.24.354
.L.str.24.354:
	.asciz	".lr.ph:0"
	.size	.L.str.24.354, 9

	.type	.L.str.25.355,@object   # @.str.25.355
.L.str.25.355:
	.asciz	"._crit_edge:0"
	.size	.L.str.25.355, 14

	.type	.L.str.26.356,@object   # @.str.26.356
.L.str.26.356:
	.asciz	".lr.ph:0-0"
	.size	.L.str.26.356, 11

	.type	.L.str.27.357,@object   # @.str.27.357
.L.str.27.357:
	.asciz	"3:1"
	.size	.L.str.27.357, 4

	.type	.L.str.28.358,@object   # @.str.28.358
.L.str.28.358:
	.asciz	"cmp11"
	.size	.L.str.28.358, 6

	.type	.L.str.29.359,@object   # @.str.29.359
.L.str.29.359:
	.asciz	"._crit_edge:0-0"
	.size	.L.str.29.359, 16

	.type	.L.str.30.360,@object   # @.str.30.360
.L.str.30.360:
	.asciz	"12:0"
	.size	.L.str.30.360, 5

	.type	.L.str.31.361,@object   # @.str.31.361
.L.str.31.361:
	.asciz	"11:0"
	.size	.L.str.31.361, 5

	.type	.L.str.32.362,@object   # @.str.32.362
.L.str.32.362:
	.asciz	"indvars.iv"
	.size	.L.str.32.362, 11

	.type	.L.str.33.363,@object   # @.str.33.363
.L.str.33.363:
	.asciz	"indvars.iv.next"
	.size	.L.str.33.363, 16

	.type	.L.str.34.364,@object   # @.str.34.364
.L.str.34.364:
	.asciz	"10:1"
	.size	.L.str.34.364, 5

	.type	.L.str.35.365,@object   # @.str.35.365
.L.str.35.365:
	.asciz	"first.029"
	.size	.L.str.35.365, 10

	.type	.L.str.36.366,@object   # @.str.36.366
.L.str.36.366:
	.asciz	"first.1"
	.size	.L.str.36.366, 8

	.type	.L.str.37.367,@object   # @.str.37.367
.L.str.37.367:
	.asciz	"arrayidx"
	.size	.L.str.37.367, 9

	.type	.L.str.38.368,@object   # @.str.38.368
.L.str.38.368:
	.asciz	"4"
	.size	.L.str.38.368, 2

	.type	.L.str.39.369,@object   # @.str.39.369
.L.str.39.369:
	.asciz	"cmp1"
	.size	.L.str.39.369, 5

	.type	.L.str.40.370,@object   # @.str.40.370
.L.str.40.370:
	.asciz	"tobool"
	.size	.L.str.40.370, 7

	.type	.L.str.41.371,@object   # @.str.41.371
.L.str.41.371:
	.asciz	"or.cond"
	.size	.L.str.41.371, 8

	.type	.L.str.42.372,@object   # @.str.42.372
.L.str.42.372:
	.asciz	"3:1-1"
	.size	.L.str.42.372, 6

	.type	.L.str.43.373,@object   # @.str.43.373
.L.str.43.373:
	.asciz	"7:1"
	.size	.L.str.43.373, 4

	.type	.L.str.44.374,@object   # @.str.44.374
.L.str.44.374:
	.asciz	"5:1"
	.size	.L.str.44.374, 4

	.type	.L.str.45.375,@object   # @.str.45.375
.L.str.45.375:
	.asciz	"6"
	.size	.L.str.45.375, 2

	.type	.L.str.46.376,@object   # @.str.46.376
.L.str.46.376:
	.asciz	"call"
	.size	.L.str.46.376, 5

	.type	.L.str.47.377,@object   # @.str.47.377
.L.str.47.377:
	.asciz	"printf"
	.size	.L.str.47.377, 7

	.type	.L.str.48.378,@object   # @.str.48.378
.L.str.48.378:
	.asciz	"%dx^%d"
	.size	.L.str.48.378, 7

	.type	.L.str.379,@object      # @.str.379
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.379:
	.asciz	"%dx^%d"
	.size	.L.str.379, 7

	.type	.L.str.49.380,@object   # @.str.49.380
	.section	.rodata,"a",@progbits
.L.str.49.380:
	.asciz	"5:1-1"
	.size	.L.str.49.380, 6

	.type	.L.str.50.381,@object   # @.str.50.381
.L.str.50.381:
	.asciz	"7:1-0"
	.size	.L.str.50.381, 6

	.type	.L.str.51.382,@object   # @.str.51.382
.L.str.51.382:
	.asciz	"8:1"
	.size	.L.str.51.382, 4

	.type	.L.str.52.383,@object   # @.str.52.383
.L.str.52.383:
	.asciz	"9"
	.size	.L.str.52.383, 2

	.type	.L.str.53.384,@object   # @.str.53.384
.L.str.53.384:
	.asciz	"call9"
	.size	.L.str.53.384, 6

	.type	.L.str.54.385,@object   # @.str.54.385
.L.str.54.385:
	.asciz	" + %dx^%d"
	.size	.L.str.54.385, 10

	.type	.L.str.1.386,@object    # @.str.1.386
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.386:
	.asciz	" + %dx^%d"
	.size	.L.str.1.386, 10

	.type	.L.str.55.387,@object   # @.str.55.387
	.section	.rodata,"a",@progbits
.L.str.55.387:
	.asciz	"8:1-0"
	.size	.L.str.55.387, 6

	.type	.L.str.56.388,@object   # @.str.56.388
.L.str.56.388:
	.asciz	"cmp"
	.size	.L.str.56.388, 4

	.type	.L.str.57.389,@object   # @.str.57.389
.L.str.57.389:
	.asciz	"10:1-1"
	.size	.L.str.57.389, 7

	.type	.L.str.58.390,@object   # @.str.58.390
.L.str.58.390:
	.asciz	"call13"
	.size	.L.str.58.390, 7

	.type	.L.str.59.391,@object   # @.str.59.391
.L.str.59.391:
	.asciz	" + %d"
	.size	.L.str.59.391, 6

	.type	.L.str.2.392,@object    # @.str.2.392
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2.392:
	.asciz	" + %d"
	.size	.L.str.2.392, 6

	.type	.L.str.60.393,@object   # @.str.60.393
	.section	.rodata,"a",@progbits
.L.str.60.393:
	.asciz	"11:0-0"
	.size	.L.str.60.393, 7

	.type	.L.str.61.394,@object   # @.str.61.394
.L.str.61.394:
	.asciz	"call14"
	.size	.L.str.61.394, 7

	.type	.L.str.62.395,@object   # @.str.62.395
.L.str.62.395:
	.asciz	"\n"
	.size	.L.str.62.395, 2

	.type	.L.str.3.396,@object    # @.str.3.396
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3.396:
	.asciz	"\n"
	.size	.L.str.3.396, 2

	.type	.L.str.63.397,@object   # @.str.63.397
	.section	.rodata,"a",@progbits
.L.str.63.397:
	.asciz	"12:0-0"
	.size	.L.str.63.397, 7

	.type	.L.str.67.398,@object   # @.str.67.398
.L.str.67.398:
	.asciz	"degree"
	.size	.L.str.67.398, 7

	.type	.L.str.64.399,@object   # @.str.64.399
.L.str.64.399:
	.asciz	"new_poly"
	.size	.L.str.64.399, 9

	.type	.L.str.65.400,@object   # @.str.65.400
.L.str.65.400:
	.asciz	"malloc"
	.size	.L.str.65.400, 7

	.type	.L.str.66.401,@object   # @.str.66.401
.L.str.66.401:
	.asciz	"degree1"
	.size	.L.str.66.401, 8

	.type	.L.str.68.402,@object   # @.str.68.402
.L.str.68.402:
	.asciz	"add"
	.size	.L.str.68.402, 4

	.type	.L.str.69.403,@object   # @.str.69.403
.L.str.69.403:
	.asciz	"conv"
	.size	.L.str.69.403, 5

	.type	.L.str.70.404,@object   # @.str.70.404
.L.str.70.404:
	.asciz	"mul"
	.size	.L.str.70.404, 4

	.type	.L.str.71.405,@object   # @.str.71.405
.L.str.71.405:
	.asciz	"call2"
	.size	.L.str.71.405, 6

	.type	.L.str.72.406,@object   # @.str.72.406
.L.str.72.406:
	.asciz	"coeffs3"
	.size	.L.str.72.406, 8

	.type	.L.str.73.407,@object   # @.str.73.407
.L.str.73.407:
	.asciz	"cmp18"
	.size	.L.str.73.407, 6

	.type	.L.str.74.408,@object   # @.str.74.408
.L.str.74.408:
	.asciz	"i"
	.size	.L.str.74.408, 2

	.type	.L.str.75.409,@object   # @.str.75.409
.L.str.75.409:
	.asciz	"5"
	.size	.L.str.75.409, 2

	.type	.L.str.76.410,@object   # @.str.76.410
.L.str.76.410:
	.asciz	"wide.trip.count"
	.size	.L.str.76.410, 16

	.type	.L.str.77.411,@object   # @.str.77.411
.L.str.77.411:
	.asciz	"6:1"
	.size	.L.str.77.411, 4

	.type	.L.str.78.412,@object   # @.str.78.412
.L.str.78.412:
	.asciz	"7"
	.size	.L.str.78.412, 2

	.type	.L.str.79.413,@object   # @.str.79.413
.L.str.79.413:
	.asciz	"arrayidx7"
	.size	.L.str.79.413, 10

	.type	.L.str.80.414,@object   # @.str.80.414
.L.str.80.414:
	.asciz	"exitcond"
	.size	.L.str.80.414, 9

	.type	.L.str.87.417,@object   # @.str.87.417
.L.str.87.417:
	.asciz	"mod"
	.size	.L.str.87.417, 4

	.type	.L.str.81.418,@object   # @.str.81.418
.L.str.81.418:
	.asciz	"neg_poly"
	.size	.L.str.81.418, 9

	.type	.L.str.82.419,@object   # @.str.82.419
.L.str.82.419:
	.asciz	"cmp8"
	.size	.L.str.82.419, 5

	.type	.L.str.83.420,@object   # @.str.83.420
.L.str.83.420:
	.asciz	"0:0-4"
	.size	.L.str.83.420, 6

	.type	.L.str.84.421,@object   # @.str.84.421
.L.str.84.421:
	.asciz	"2:1"
	.size	.L.str.84.421, 4

	.type	.L.str.85.422,@object   # @.str.85.422
.L.str.85.422:
	.asciz	"sub"
	.size	.L.str.85.422, 4

	.type	.L.str.86.423,@object   # @.str.86.423
.L.str.86.423:
	.asciz	"rem"
	.size	.L.str.86.423, 4

	.type	.L.str.88.424,@object   # @.str.88.424
.L.str.88.424:
	.asciz	"2:1-1"
	.size	.L.str.88.424, 6

	.type	.L.str.89.425,@object   # @.str.89.425
.L.str.89.425:
	.asciz	"2:1-2"
	.size	.L.str.89.425, 6

	.type	.L.str.91.428,@object   # @.str.91.428
.L.str.91.428:
	.asciz	"y"
	.size	.L.str.91.428, 2

	.type	.L.str.90.429,@object   # @.str.90.429
.L.str.90.429:
	.asciz	"scalar_mul"
	.size	.L.str.90.429, 11

	.type	.L.str.92.430,@object   # @.str.92.430
.L.str.92.430:
	.asciz	"poly_divide"
	.size	.L.str.92.430, 12

	.type	.L.str.93.431,@object   # @.str.93.431
.L.str.93.431:
	.asciz	"cmp31"
	.size	.L.str.93.431, 6

	.type	.L.str.94.432,@object   # @.str.94.432
.L.str.94.432:
	.asciz	"div1"
	.size	.L.str.94.432, 5

	.type	.L.str.95.433,@object   # @.str.95.433
.L.str.95.433:
	.asciz	"conv6"
	.size	.L.str.95.433, 6

	.type	.L.str.96.434,@object   # @.str.96.434
.L.str.96.434:
	.asciz	"conv7"
	.size	.L.str.96.434, 6

	.type	.L.str.97.435,@object   # @.str.97.435
.L.str.97.435:
	.asciz	"cond"
	.size	.L.str.97.435, 5

	.type	.L.str.98.436,@object   # @.str.98.436
.L.str.98.436:
	.asciz	"2:1-3"
	.size	.L.str.98.436, 6

	.type	.L.str.99.437,@object   # @.str.99.437
.L.str.99.437:
	.asciz	"2:1-4"
	.size	.L.str.99.437, 6

	.type	.L.str.100.440,@object  # @.str.100.440
.L.str.100.440:
	.asciz	"copy_poly"
	.size	.L.str.100.440, 10

	.type	.L.str.101.441,@object  # @.str.101.441
.L.str.101.441:
	.asciz	"arrayidx3"
	.size	.L.str.101.441, 10

	.type	.L.str.104.444,@object  # @.str.104.444
.L.str.104.444:
	.asciz	"x_size"
	.size	.L.str.104.444, 7

	.type	.L.str.105.445,@object  # @.str.105.445
.L.str.105.445:
	.asciz	"y_size"
	.size	.L.str.105.445, 7

	.type	.L.str.125.446,@object  # @.str.125.446
.L.str.125.446:
	.asciz	"polymod"
	.size	.L.str.125.446, 8

	.type	.L.str.103.447,@object  # @.str.103.447
.L.str.103.447:
	.asciz	"mod_size"
	.size	.L.str.103.447, 9

	.type	.L.str.102.448,@object  # @.str.102.448
.L.str.102.448:
	.asciz	"polyadd"
	.size	.L.str.102.448, 8

	.type	.L.str.106.449,@object  # @.str.106.449
.L.str.106.449:
	.asciz	"0:0-7"
	.size	.L.str.106.449, 6

	.type	.L.str.107.450,@object  # @.str.107.450
.L.str.107.450:
	.asciz	"2:0"
	.size	.L.str.107.450, 4

	.type	.L.str.108.451,@object  # @.str.108.451
.L.str.108.451:
	.asciz	"1:0"
	.size	.L.str.108.451, 4

	.type	.L.str.109.452,@object  # @.str.109.452
.L.str.109.452:
	.asciz	"1:0-0"
	.size	.L.str.109.452, 6

	.type	.L.str.110.453,@object  # @.str.110.453
.L.str.110.453:
	.asciz	"__assert_fail"
	.size	.L.str.110.453, 14

	.type	.L.str.111.454,@object  # @.str.111.454
	.p2align	4
.L.str.111.454:
	.asciz	"x_size < mod_size && y_size < mod_size"
	.size	.L.str.111.454, 39

	.type	.L.str.112.455,@object  # @.str.112.455
.L.str.112.455:
	.asciz	"poly.c"
	.size	.L.str.112.455, 7

	.type	.L.str.113.456,@object  # @.str.113.456
	.p2align	4
.L.str.113.456:
	.asciz	"int *polyadd(int *, int, int *, int, int, int *, int)"
	.size	.L.str.113.456, 54

	.type	.L.str.4.457,@object    # @.str.4.457
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4.457:
	.asciz	"x_size < mod_size && y_size < mod_size"
	.size	.L.str.4.457, 39

	.type	.L.str.5.458,@object    # @.str.5.458
.L.str.5.458:
	.asciz	"poly.c"
	.size	.L.str.5.458, 7

	.type	.L__PRETTY_FUNCTION__.polyadd,@object # @__PRETTY_FUNCTION__.polyadd
.L__PRETTY_FUNCTION__.polyadd:
	.asciz	"int *polyadd(int *, int, int *, int, int, int *, int)"
	.size	.L__PRETTY_FUNCTION__.polyadd, 54

	.type	.L.str.114.459,@object  # @.str.114.459
	.section	.rodata,"a",@progbits
.L.str.114.459:
	.asciz	"1:0-1"
	.size	.L.str.114.459, 6

	.type	.L.str.115.460,@object  # @.str.115.460
.L.str.115.460:
	.asciz	"cmp2"
	.size	.L.str.115.460, 5

	.type	.L.str.116.461,@object  # @.str.116.461
.L.str.116.461:
	.asciz	"cond6"
	.size	.L.str.116.461, 6

	.type	.L.str.117.462,@object  # @.str.117.462
.L.str.117.462:
	.asciz	"cmp734"
	.size	.L.str.117.462, 7

	.type	.L.str.118.463,@object  # @.str.118.463
.L.str.118.463:
	.asciz	"2:0-3"
	.size	.L.str.118.463, 6

	.type	.L.str.119.464,@object  # @.str.119.464
.L.str.119.464:
	.asciz	"4:1"
	.size	.L.str.119.464, 4

	.type	.L.str.120.465,@object  # @.str.120.465
.L.str.120.465:
	.asciz	"arrayidx9"
	.size	.L.str.120.465, 10

	.type	.L.str.121.466,@object  # @.str.121.466
.L.str.121.466:
	.asciz	"arrayidx11"
	.size	.L.str.121.466, 11

	.type	.L.str.122.467,@object  # @.str.122.467
.L.str.122.467:
	.asciz	"4:1-1"
	.size	.L.str.122.467, 6

	.type	.L.str.123.468,@object  # @.str.123.468
.L.str.123.468:
	.asciz	"cmp7"
	.size	.L.str.123.468, 5

	.type	.L.str.124.469,@object  # @.str.124.469
.L.str.124.469:
	.asciz	"4:1-2"
	.size	.L.str.124.469, 6

	.type	.L.str.126.470,@object  # @.str.126.470
.L.str.126.470:
	.asciz	"polymodulo"
	.size	.L.str.126.470, 11

	.type	.L.str.127.471,@object  # @.str.127.471
.L.str.127.471:
	.asciz	"0:0-9"
	.size	.L.str.127.471, 6

	.type	.L.str.128.472,@object  # @.str.128.472
.L.str.128.472:
	.asciz	".lr.ph84:0"
	.size	.L.str.128.472, 11

	.type	.L.str.129.473,@object  # @.str.129.473
.L.str.129.473:
	.asciz	".critedge:0"
	.size	.L.str.129.473, 12

	.type	.L.str.130.474,@object  # @.str.130.474
.L.str.130.474:
	.asciz	".lr.ph84:0-0"
	.size	.L.str.130.474, 13

	.type	.L.str.131.475,@object  # @.str.131.475
	.p2align	4
.L.str.131.475:
	.asciz	"indvars.iv.next90"
	.size	.L.str.131.475, 18

	.type	.L.str.132.476,@object  # @.str.132.476
.L.str.132.476:
	.asciz	"4:1-0"
	.size	.L.str.132.476, 6

	.type	.L.str.133.477,@object  # @.str.133.477
.L.str.133.477:
	.asciz	"indvars.iv89"
	.size	.L.str.133.477, 13

	.type	.L.str.134.478,@object  # @.str.134.478
.L.str.134.478:
	.asciz	"5:1-0"
	.size	.L.str.134.478, 6

	.type	.L.str.135.479,@object  # @.str.135.479
.L.str.135.479:
	.asciz	"7:0"
	.size	.L.str.135.479, 4

	.type	.L.str.136.480,@object  # @.str.136.480
.L.str.136.480:
	.asciz	"cmp477"
	.size	.L.str.136.480, 7

	.type	.L.str.137.481,@object  # @.str.137.481
.L.str.137.481:
	.asciz	"7:0-1"
	.size	.L.str.137.481, 6

	.type	.L.str.138.482,@object  # @.str.138.482
.L.str.138.482:
	.asciz	".lr.ph79:0"
	.size	.L.str.138.482, 11

	.type	.L.str.139.483,@object  # @.str.139.483
.L.str.139.483:
	.asciz	"8"
	.size	.L.str.139.483, 2

	.type	.L.str.140.484,@object  # @.str.140.484
.L.str.140.484:
	.asciz	"10"
	.size	.L.str.140.484, 3

	.type	.L.str.141.485,@object  # @.str.141.485
.L.str.141.485:
	.asciz	".lr.ph79:0-0"
	.size	.L.str.141.485, 13

	.type	.L.str.142.486,@object  # @.str.142.486
.L.str.142.486:
	.asciz	"12:1"
	.size	.L.str.142.486, 5

	.type	.L.str.143.487,@object  # @.str.143.487
.L.str.143.487:
	.asciz	"cmp1575"
	.size	.L.str.143.487, 8

	.type	.L.str.144.488,@object  # @.str.144.488
.L.str.144.488:
	.asciz	"._crit_edge:0-1"
	.size	.L.str.144.488, 16

	.type	.L.str.145.489,@object  # @.str.145.489
.L.str.145.489:
	.asciz	"11"
	.size	.L.str.145.489, 3

	.type	.L.str.146.490,@object  # @.str.146.490
.L.str.146.490:
	.asciz	"padded_zeros"
	.size	.L.str.146.490, 13

	.type	.L.str.147.491,@object  # @.str.147.491
.L.str.147.491:
	.asciz	"16:1"
	.size	.L.str.147.491, 5

	.type	.L.str.148.492,@object  # @.str.148.492
.L.str.148.492:
	.asciz	"indvars.iv86"
	.size	.L.str.148.492, 13

	.type	.L.str.149.493,@object  # @.str.149.493
	.p2align	4
.L.str.149.493:
	.asciz	"indvars.iv.next87"
	.size	.L.str.149.493, 18

	.type	.L.str.150.494,@object  # @.str.150.494
.L.str.150.494:
	.asciz	"13"
	.size	.L.str.150.494, 3

	.type	.L.str.151.495,@object  # @.str.151.495
.L.str.151.495:
	.asciz	"arrayidx6"
	.size	.L.str.151.495, 10

	.type	.L.str.152.496,@object  # @.str.152.496
.L.str.152.496:
	.asciz	"14"
	.size	.L.str.152.496, 3

	.type	.L.str.153.497,@object  # @.str.153.497
.L.str.153.497:
	.asciz	"arrayidx8"
	.size	.L.str.153.497, 10

	.type	.L.str.154.498,@object  # @.str.154.498
.L.str.154.498:
	.asciz	"15"
	.size	.L.str.154.498, 3

	.type	.L.str.155.499,@object  # @.str.155.499
.L.str.155.499:
	.asciz	"sub9"
	.size	.L.str.155.499, 5

	.type	.L.str.156.500,@object  # @.str.156.500
.L.str.156.500:
	.asciz	"12:1-1"
	.size	.L.str.156.500, 7

	.type	.L.str.157.501,@object  # @.str.157.501
.L.str.157.501:
	.asciz	"12:1-2"
	.size	.L.str.157.501, 7

	.type	.L.str.158.502,@object  # @.str.158.502
.L.str.158.502:
	.asciz	"cmp4"
	.size	.L.str.158.502, 5

	.type	.L.str.159.503,@object  # @.str.159.503
.L.str.159.503:
	.asciz	"12:1-3"
	.size	.L.str.159.503, 7

	.type	.L.str.160.504,@object  # @.str.160.504
.L.str.160.504:
	.asciz	"arrayidx17"
	.size	.L.str.160.504, 11

	.type	.L.str.161.505,@object  # @.str.161.505
.L.str.161.505:
	.asciz	"17"
	.size	.L.str.161.505, 3

	.type	.L.str.162.506,@object  # @.str.162.506
.L.str.162.506:
	.asciz	"sub18"
	.size	.L.str.162.506, 6

	.type	.L.str.163.507,@object  # @.str.163.507
.L.str.163.507:
	.asciz	"cmp23"
	.size	.L.str.163.507, 6

	.type	.L.str.164.508,@object  # @.str.164.508
.L.str.164.508:
	.asciz	"add29"
	.size	.L.str.164.508, 6

	.type	.L.str.165.509,@object  # @.str.165.509
.L.str.165.509:
	.asciz	"16:1-1"
	.size	.L.str.165.509, 7

	.type	.L.str.166.510,@object  # @.str.166.510
.L.str.166.510:
	.asciz	"16:1-2"
	.size	.L.str.166.510, 7

	.type	.L.str.167.511,@object  # @.str.167.511
.L.str.167.511:
	.asciz	".critedge:0-0"
	.size	.L.str.167.511, 14

	.type	.L.str.168.514,@object  # @.str.168.514
.L.str.168.514:
	.asciz	"polymul"
	.size	.L.str.168.514, 8

	.type	.L.str.169.515,@object  # @.str.169.515
	.p2align	4
.L.str.169.515:
	.asciz	"int *polymul(int *, int, int *, int, int, int *, int)"
	.size	.L.str.169.515, 54

	.type	.L__PRETTY_FUNCTION__.polymul,@object # @__PRETTY_FUNCTION__.polymul
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__.polymul:
	.asciz	"int *polymul(int *, int, int *, int, int, int *, int)"
	.size	.L__PRETTY_FUNCTION__.polymul, 54

	.type	.L.str.170.516,@object  # @.str.170.516
	.section	.rodata,"a",@progbits
.L.str.170.516:
	.asciz	"add2"
	.size	.L.str.170.516, 5

	.type	.L.str.171.517,@object  # @.str.171.517
.L.str.171.517:
	.asciz	"cmp366"
	.size	.L.str.171.517, 7

	.type	.L.str.172.518,@object  # @.str.172.518
.L.str.172.518:
	.asciz	"._crit_edge70:0"
	.size	.L.str.172.518, 16

	.type	.L.str.173.519,@object  # @.str.173.519
.L.str.173.519:
	.asciz	".lr.ph69:0"
	.size	.L.str.173.519, 11

	.type	.L.str.174.520,@object  # @.str.174.520
	.p2align	4
.L.str.174.520:
	.asciz	"wide.trip.count78"
	.size	.L.str.174.520, 18

	.type	.L.str.175.521,@object  # @.str.175.521
.L.str.175.521:
	.asciz	".lr.ph69:0-0"
	.size	.L.str.175.521, 13

	.type	.L.str.176.522,@object  # @.str.176.522
.L.str.176.522:
	.asciz	"cmp660"
	.size	.L.str.176.522, 7

	.type	.L.str.177.523,@object  # @.str.177.523
	.p2align	4
.L.str.177.523:
	.asciz	"._crit_edge70:0-1"
	.size	.L.str.177.523, 18

	.type	.L.str.178.524,@object  # @.str.178.524
.L.str.178.524:
	.asciz	"._crit_edge65:0"
	.size	.L.str.178.524, 16

	.type	.L.str.179,@object      # @.str.179
.L.str.179:
	.asciz	".lr.ph64:0"
	.size	.L.str.179, 11

	.type	.L.str.180,@object      # @.str.180
.L.str.180:
	.asciz	"cmp858"
	.size	.L.str.180, 7

	.type	.L.str.181,@object      # @.str.181
	.p2align	4
.L.str.181:
	.asciz	"wide.trip.count74"
	.size	.L.str.181, 18

	.type	.L.str.182,@object      # @.str.182
.L.str.182:
	.asciz	".lr.ph64:0-0"
	.size	.L.str.182, 13

	.type	.L.str.183,@object      # @.str.183
.L.str.183:
	.asciz	"9:1"
	.size	.L.str.183, 4

	.type	.L.str.184,@object      # @.str.184
.L.str.184:
	.asciz	"indvars.iv76"
	.size	.L.str.184, 13

	.type	.L.str.185,@object      # @.str.185
	.p2align	4
.L.str.185:
	.asciz	"indvars.iv.next77"
	.size	.L.str.185, 18

	.type	.L.str.186,@object      # @.str.186
.L.str.186:
	.asciz	"8:1-1"
	.size	.L.str.186, 6

	.type	.L.str.187,@object      # @.str.187
.L.str.187:
	.asciz	"exitcond79"
	.size	.L.str.187, 11

	.type	.L.str.188,@object      # @.str.188
.L.str.188:
	.asciz	"8:1-2"
	.size	.L.str.188, 6

	.type	.L.str.189,@object      # @.str.189
.L.str.189:
	.asciz	"call27"
	.size	.L.str.189, 7

	.type	.L.str.190,@object      # @.str.190
	.p2align	4
.L.str.190:
	.asciz	"._crit_edge65:0-1"
	.size	.L.str.190, 18

	.type	.L.str.191,@object      # @.str.191
.L.str.191:
	.asciz	"indvars.iv72"
	.size	.L.str.191, 13

	.type	.L.str.192,@object      # @.str.192
	.p2align	4
.L.str.192:
	.asciz	"indvars.iv.next73"
	.size	.L.str.192, 18

	.type	.L.str.193,@object      # @.str.193
.L.str.193:
	.asciz	"._crit_edge:1"
	.size	.L.str.193, 14

	.type	.L.str.194,@object      # @.str.194
.L.str.194:
	.asciz	"9:1-2"
	.size	.L.str.194, 6

	.type	.L.str.195,@object      # @.str.195
.L.str.195:
	.asciz	".lr.ph:1"
	.size	.L.str.195, 9

	.type	.L.str.196,@object      # @.str.196
.L.str.196:
	.asciz	".lr.ph:1-0"
	.size	.L.str.196, 11

	.type	.L.str.197,@object      # @.str.197
.L.str.197:
	.asciz	"11:2"
	.size	.L.str.197, 5

	.type	.L.str.198,@object      # @.str.198
.L.str.198:
	.asciz	"exitcond75"
	.size	.L.str.198, 11

	.type	.L.str.199,@object      # @.str.199
.L.str.199:
	.asciz	"._crit_edge:1-0"
	.size	.L.str.199, 16

	.type	.L.str.200,@object      # @.str.200
.L.str.200:
	.asciz	"arrayidx13"
	.size	.L.str.200, 11

	.type	.L.str.201,@object      # @.str.201
.L.str.201:
	.asciz	"12"
	.size	.L.str.201, 3

	.type	.L.str.202,@object      # @.str.202
.L.str.202:
	.asciz	"mul14"
	.size	.L.str.202, 6

	.type	.L.str.203,@object      # @.str.203
.L.str.203:
	.asciz	"add18"
	.size	.L.str.203, 6

	.type	.L.str.204,@object      # @.str.204
.L.str.204:
	.asciz	"11:2-1"
	.size	.L.str.204, 7

	.type	.L.str.205,@object      # @.str.205
.L.str.205:
	.asciz	"11:2-2"
	.size	.L.str.205, 7

	.type	trace,@object           # @trace
	.section	.tbss,"awT",@nobits
	.globl	trace
	.p2align	3
trace:
	.quad	0
	.size	trace, 8

	.type	_Z8gz_filesB5cxx11,@object # @_Z8gz_filesB5cxx11
	.bss
	.globl	_Z8gz_filesB5cxx11
	.p2align	3
_Z8gz_filesB5cxx11:
	.zero	48
	.size	_Z8gz_filesB5cxx11, 48

	.type	lock,@object            # @lock
	.globl	lock
	.p2align	3
lock:
	.zero	40
	.size	lock, 40

	.type	_Z12labelmap_strB5cxx11,@object # @_Z12labelmap_strB5cxx11
	.globl	_Z12labelmap_strB5cxx11
	.p2align	3
_Z12labelmap_strB5cxx11:
	.zero	32
	.size	_Z12labelmap_strB5cxx11, 32

	.type	default_trace_name,@object # @default_trace_name
	.data
	.globl	default_trace_name
	.p2align	3
default_trace_name:
	.quad	.L.str.525
	.size	default_trace_name, 8

	.type	.L.str.525,@object      # @.str.525
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.525:
	.asciz	"dynamic_trace.gz"
	.size	.L.str.525, 17

	.section	.init_array,"aw",@init_array
	.p2align	3
	.quad	_GLOBAL__sub_I_trace_logger.cpp
	.type	.L.str.3.526,@object    # @.str.3.526
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3.526:
	.asciz	"!trace && \"Trace has already been created!\""
	.size	.L.str.3.526, 44

	.type	.L.str.4.527,@object    # @.str.4.527
.L.str.4.527:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.cpp"
	.size	.L.str.4.527, 53

	.type	.L__PRETTY_FUNCTION__._Z12create_tracePKc,@object # @__PRETTY_FUNCTION__._Z12create_tracePKc
.L__PRETTY_FUNCTION__._Z12create_tracePKc:
	.asciz	"void create_trace(const char *)"
	.size	.L__PRETTY_FUNCTION__._Z12create_tracePKc, 32

	.type	.L.str.5.528,@object    # @.str.5.528
.L.str.5.528:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str.5.528, 27

	.type	.L.str.6.529,@object    # @.str.6.529
.L.str.6.529:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str.6.529, 26

	.type	.L.str.7.530,@object    # @.str.7.530
.L.str.7.530:
	.asciz	"w"
	.size	.L.str.7.530, 2

	.type	.L.str.8.531,@object    # @.str.8.531
.L.str.8.531:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str.8.531, 39

	.type	_ZStL19piecewise_construct,@object # @_ZStL19piecewise_construct
	.section	.rodata,"a",@progbits
_ZStL19piecewise_construct:
	.zero	1
	.size	_ZStL19piecewise_construct, 1

	.type	.L.str.36.532,@object   # @.str.36.532
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.36.532:
	.asciz	"map::at"
	.size	.L.str.36.532, 8

	.type	.L.str.9.537,@object    # @.str.9.537
.L.str.9.537:
	.asciz	"Failed to initialize the mutex\n"
	.size	.L.str.9.537, 32

	.type	.L.str.10.538,@object   # @.str.10.538
.L.str.10.538:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str.10.538, 75

	.type	.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc,@object # @__PRETTY_FUNCTION__._Z10log_or_notbbiPc
.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc:
	.asciz	"logging_status log_or_not(bool, bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc, 51

	.type	.L.str.11.539,@object   # @.str.11.539
.L.str.11.539:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str.11.539, 69

	.type	.L.str.12.540,@object   # @.str.12.540
.L.str.12.540:
	.asciz	"0x"
	.size	.L.str.12.540, 3

	.type	.L.str.13.541,@object   # @.str.13.541
.L.str.13.541:
	.asciz	"%02x"
	.size	.L.str.13.541, 5

	.type	.L.str.14.544,@object   # @.str.14.544
.L.str.14.544:
	.asciz	"%s: Stopping logging at inst %ld.\n"
	.size	.L.str.14.544, 35

	.type	.L.str.15.545,@object   # @.str.15.545
.L.str.15.545:
	.asciz	"%s: Starting to log at inst = %ld.\n"
	.size	.L.str.15.545, 36

	.type	.L.str.16.546,@object   # @.str.16.546
.L.str.16.546:
	.zero	1
	.size	.L.str.16.546, 1

	.type	.L.str.17.549,@object   # @.str.17.549
.L.str.17.549:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str.17.549, 15

	.type	.L.str.18.552,@object   # @.str.18.552
.L.str.18.552:
	.asciz	"\n0,%d,%s,%s,%s,%d,%ld\n"
	.size	.L.str.18.552, 23

	.type	.L.str.19.555,@object   # @.str.19.555
.L.str.19.555:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str.19.555, 12

	.type	.L.str.20.556,@object   # @.str.20.556
.L.str.20.556:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str.20.556, 12

	.type	.L.str.21.557,@object   # @.str.21.557
.L.str.21.557:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str.21.557, 13

	.type	.L.str.22.558,@object   # @.str.22.558
.L.str.22.558:
	.asciz	",%s"
	.size	.L.str.22.558, 4

	.type	.L.str.23.559,@object   # @.str.23.559
.L.str.23.559:
	.asciz	", "
	.size	.L.str.23.559, 3

	.type	.L.str.24.560,@object   # @.str.24.560
.L.str.24.560:
	.asciz	",%s,\n"
	.size	.L.str.24.560, 6

	.type	.L.str.25.561,@object   # @.str.25.561
.L.str.25.561:
	.asciz	",\n"
	.size	.L.str.25.561, 3

	.type	.L.str.26.564,@object   # @.str.26.564
.L.str.26.564:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str.26.564, 14

	.type	.L.str.27.565,@object   # @.str.27.565
.L.str.27.565:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str.27.565, 14

	.type	.L.str.28.566,@object   # @.str.28.566
.L.str.28.566:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str.28.566, 15

	.type	.L.str.29.569,@object   # @.str.29.569
.L.str.29.569:
	.asciz	"r,%d,%s,%d"
	.size	.L.str.29.569, 11

	.type	.L.str.30.570,@object   # @.str.30.570
.L.str.30.570:
	.asciz	"f,%d,%s,%d"
	.size	.L.str.30.570, 11

	.type	.L.str.31.571,@object   # @.str.31.571
.L.str.31.571:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str.31.571, 12

	.type	.L.str.32.574,@object   # @.str.32.574
.L.str.32.574:
	.asciz	"r,%d,%f,%d"
	.size	.L.str.32.574, 11

	.type	.L.str.33.575,@object   # @.str.33.575
.L.str.33.575:
	.asciz	"f,%d,%f,%d"
	.size	.L.str.33.575, 11

	.type	.L.str.34.576,@object   # @.str.34.576
.L.str.34.576:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str.34.576, 12

	.file	5 "/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt/./crypto.h"
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 6.0.0 (tags/RELEASE_600/final)" # string offset=0
.Linfo_string1:
	.asciz	"test_crypto.c"         # string offset=45
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/SHOC/encrypt" # string offset=59
.Linfo_string3:
	.asciz	"int"                   # string offset=108
.Linfo_string4:
	.asciz	"crypto.c"              # string offset=112
.Linfo_string5:
	.asciz	"double"                # string offset=121
.Linfo_string6:
	.asciz	"poly.c"                # string offset=128
.Linfo_string7:
	.asciz	"degree"                # string offset=135
.Linfo_string8:
	.asciz	"coeffs"                # string offset=142
.Linfo_string9:
	.asciz	"poly"                  # string offset=149
.Linfo_string10:
	.asciz	"main"                  # string offset=154
.Linfo_string11:
	.asciz	"free_tuple"            # string offset=159
.Linfo_string12:
	.asciz	"gen_binary_poly"       # string offset=170
.Linfo_string13:
	.asciz	"gen_uniform_poly"      # string offset=186
.Linfo_string14:
	.asciz	"norm_rand"             # string offset=203
.Linfo_string15:
	.asciz	"gen_normal_poly"       # string offset=213
.Linfo_string16:
	.asciz	"gen_const_poly"        # string offset=229
.Linfo_string17:
	.asciz	"keygen_secret"         # string offset=244
.Linfo_string18:
	.asciz	"keygen_pub1"           # string offset=258
.Linfo_string19:
	.asciz	"keygen_pub0"           # string offset=270
.Linfo_string20:
	.asciz	"encrypt"               # string offset=282
.Linfo_string21:
	.asciz	"decrypt"               # string offset=290
.Linfo_string22:
	.asciz	"plain_add"             # string offset=298
.Linfo_string23:
	.asciz	"plain_mul"             # string offset=308
.Linfo_string24:
	.asciz	"crypto_add"            # string offset=318
.Linfo_string25:
	.asciz	"vector_mult"           # string offset=329
.Linfo_string26:
	.asciz	"free_poly"             # string offset=341
.Linfo_string27:
	.asciz	"print_poly"            # string offset=351
.Linfo_string28:
	.asciz	"new_poly"              # string offset=362
.Linfo_string29:
	.asciz	"neg_poly"              # string offset=371
.Linfo_string30:
	.asciz	"scalar_mul"            # string offset=380
.Linfo_string31:
	.asciz	"poly_divide"           # string offset=391
.Linfo_string32:
	.asciz	"copy_poly"             # string offset=403
.Linfo_string33:
	.asciz	"polyadd"               # string offset=413
.Linfo_string34:
	.asciz	"polymodulo"            # string offset=421
.Linfo_string35:
	.asciz	"polymul"               # string offset=432
.Linfo_string36:
	.asciz	"argc"                  # string offset=440
.Linfo_string37:
	.asciz	"argv"                  # string offset=445
.Linfo_string38:
	.asciz	"char"                  # string offset=450
.Linfo_string39:
	.asciz	"n"                     # string offset=455
.Linfo_string40:
	.asciz	"q"                     # string offset=457
.Linfo_string41:
	.asciz	"t"                     # string offset=459
.Linfo_string42:
	.asciz	"polymod"               # string offset=461
.Linfo_string43:
	.asciz	"i"                     # string offset=469
.Linfo_string44:
	.asciz	"secretKey"             # string offset=471
.Linfo_string45:
	.asciz	"pub1"                  # string offset=481
.Linfo_string46:
	.asciz	"tmp"                   # string offset=486
.Linfo_string47:
	.asciz	"pub0"                  # string offset=490
.Linfo_string48:
	.asciz	"value"                 # string offset=495
.Linfo_string49:
	.asciz	"ciphertext"            # string offset=501
.Linfo_string50:
	.asciz	"cipher0"               # string offset=512
.Linfo_string51:
	.asciz	"cipher1"               # string offset=520
.Linfo_string52:
	.asciz	"result"                # string offset=528
.Linfo_string53:
	.asciz	"add_val"               # string offset=535
.Linfo_string54:
	.asciz	"add_c0"                # string offset=543
.Linfo_string55:
	.asciz	"add_result"            # string offset=550
.Linfo_string56:
	.asciz	"mul_val"               # string offset=561
.Linfo_string57:
	.asciz	"mul_ciphertext"        # string offset=569
.Linfo_string58:
	.asciz	"mul_result"            # string offset=584
.Linfo_string59:
	.asciz	"ct2"                   # string offset=595
.Linfo_string60:
	.asciz	"add_ct"                # string offset=599
.Linfo_string61:
	.asciz	"enc_add_result"        # string offset=606
.Linfo_string62:
	.asciz	"x"                     # string offset=621
.Linfo_string63:
	.asciz	"tuple"                 # string offset=623
.Linfo_string64:
	.asciz	"size"                  # string offset=629
.Linfo_string65:
	.asciz	"mod"                   # string offset=634
.Linfo_string66:
	.asciz	"mean"                  # string offset=638
.Linfo_string67:
	.asciz	"std"                   # string offset=643
.Linfo_string68:
	.asciz	"ret"                   # string offset=647
.Linfo_string69:
	.asciz	"val"                   # string offset=651
.Linfo_string70:
	.asciz	"a"                     # string offset=655
.Linfo_string71:
	.asciz	"secret"                # string offset=657
.Linfo_string72:
	.asciz	"e"                     # string offset=664
.Linfo_string73:
	.asciz	"deg"                   # string offset=666
.Linfo_string74:
	.asciz	"b"                     # string offset=670
.Linfo_string75:
	.asciz	"val_poly"              # string offset=672
.Linfo_string76:
	.asciz	"delta"                 # string offset=681
.Linfo_string77:
	.asciz	"e1"                    # string offset=687
.Linfo_string78:
	.asciz	"e2"                    # string offset=690
.Linfo_string79:
	.asciz	"u"                     # string offset=693
.Linfo_string80:
	.asciz	"mul1"                  # string offset=695
.Linfo_string81:
	.asciz	"add1"                  # string offset=700
.Linfo_string82:
	.asciz	"ct0"                   # string offset=705
.Linfo_string83:
	.asciz	"mul2"                  # string offset=709
.Linfo_string84:
	.asciz	"ct1"                   # string offset=714
.Linfo_string85:
	.asciz	"cipher"                # string offset=718
.Linfo_string86:
	.asciz	"scaled_pt"             # string offset=725
.Linfo_string87:
	.asciz	"delta_inv"             # string offset=735
.Linfo_string88:
	.asciz	"enc_val"               # string offset=745
.Linfo_string89:
	.asciz	"plain_poly"            # string offset=753
.Linfo_string90:
	.asciz	"new_ct0"               # string offset=764
.Linfo_string91:
	.asciz	"new_ct1"               # string offset=772
.Linfo_string92:
	.asciz	"cipher2"               # string offset=780
.Linfo_string93:
	.asciz	"y"                     # string offset=788
.Linfo_string94:
	.asciz	"poly_size"             # string offset=790
.Linfo_string95:
	.asciz	"ar_size"               # string offset=800
.Linfo_string96:
	.asciz	"reduce"                # string offset=808
.Linfo_string97:
	.asciz	"first"                 # string offset=815
.Linfo_string98:
	.asciz	"div"                   # string offset=821
.Linfo_string99:
	.asciz	"floor"                 # string offset=825
.Linfo_string100:
	.asciz	"x_size"                # string offset=831
.Linfo_string101:
	.asciz	"y_size"                # string offset=838
.Linfo_string102:
	.asciz	"mod_size"              # string offset=845
.Linfo_string103:
	.asciz	"min"                   # string offset=854
.Linfo_string104:
	.asciz	"max"                   # string offset=858
.Linfo_string105:
	.asciz	"exp"                   # string offset=862
.Linfo_string106:
	.asciz	"padded_zeros"          # string offset=866
.Linfo_string107:
	.asciz	"j"                     # string offset=879
.Linfo_string108:
	.asciz	"new_degree"            # string offset=881
.Linfo_string109:
	.asciz	"result_coeffs"         # string offset=892
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc1:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Ltmp1-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	16                      # 16
	.byte	159                     # DW_OP_stack_value
	.quad	0
	.quad	0
.Ldebug_loc3:
	.quad	.Ltmp1-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	5                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	128                     # 32768
	.byte	128                     # DW_OP_stack_value
	.byte	2                       # 
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Ltmp1-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	128                     # 256
	.byte	2                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc5:
	.quad	.Ltmp2-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -216
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Ltmp3-.Lfunc_begin0
	.quad	.Ltmp10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp10-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -544
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc7:
	.quad	.Ltmp5-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -376
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Ltmp6-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -408
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Ltmp7-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -440
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc10:
	.quad	.Ltmp8-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -464
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Ltmp13-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -828
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Ltmp14-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	216                     # -936
	.byte	120                     # 
	.quad	0
	.quad	0
.Ldebug_loc13:
	.quad	.Ltmp15-.Lfunc_begin0
	.quad	.Ltmp24-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -992
	.byte	120                     # 
	.quad	.Ltmp24-.Lfunc_begin0
	.quad	.Ltmp29-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -1736
	.byte	114                     # 
	.quad	.Ltmp29-.Lfunc_begin0
	.quad	.Ltmp34-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -992
	.byte	120                     # 
	.quad	.Ltmp34-.Lfunc_begin0
	.quad	.Ltmp38-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -2464
	.byte	108                     # 
	.quad	.Ltmp38-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -992
	.byte	120                     # 
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Ltmp16-.Lfunc_begin0
	.quad	.Ltmp25-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -1080
	.byte	119                     # 
	.quad	.Ltmp25-.Lfunc_begin0
	.quad	.Ltmp29-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -1792
	.byte	114                     # 
	.quad	.Ltmp29-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -1080
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc15:
	.quad	.Ltmp17-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	180                     # -1100
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc16:
	.quad	.Ltmp23-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	180                     # -1612
	.byte	115                     # 
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Ltmp26-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -1816
	.byte	113                     # 
	.quad	0
	.quad	0
.Ldebug_loc18:
	.quad	.Ltmp27-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	212                     # -1836
	.byte	113                     # 
	.quad	0
	.quad	0
.Ldebug_loc19:
	.quad	.Ltmp33-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -2372
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Ltmp35-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -2528
	.byte	108                     # 
	.quad	0
	.quad	0
.Ldebug_loc21:
	.quad	.Ltmp36-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -2628
	.byte	107                     # 
	.quad	0
	.quad	0
.Ldebug_loc22:
	.quad	.Ltmp42-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -3000
	.byte	104                     # 
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Ltmp43-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -3024
	.byte	104                     # 
	.quad	0
	.quad	0
.Ldebug_loc24:
	.quad	.Ltmp44-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -3124
	.byte	103                     # 
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Lfunc_begin1-.Lfunc_begin1
	.quad	.Lfunc_end1-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	112                     # -16
	.quad	0
	.quad	0
.Ldebug_loc26:
	.quad	.Lfunc_begin2-.Lfunc_begin1
	.quad	.Lfunc_end2-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc27:
	.quad	.Ltmp53-.Lfunc_begin1
	.quad	.Lfunc_end2-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -200
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp53-.Lfunc_begin1
	.quad	.Ltmp57-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp57-.Lfunc_begin1
	.quad	.Lfunc_end2-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -360
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc29:
	.quad	.Lfunc_begin3-.Lfunc_begin1
	.quad	.Lfunc_end3-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc30:
	.quad	.Lfunc_begin3-.Lfunc_begin1
	.quad	.Lfunc_end3-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Ltmp62-.Lfunc_begin1
	.quad	.Lfunc_end3-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -200
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc32:
	.quad	.Ltmp62-.Lfunc_begin1
	.quad	.Ltmp66-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp66-.Lfunc_begin1
	.quad	.Lfunc_end3-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -360
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Lfunc_begin4-.Lfunc_begin1
	.quad	.Lfunc_end4-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc34:
	.quad	.Ltmp71-.Lfunc_begin1
	.quad	.Ltmp72-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp72-.Lfunc_begin1
	.quad	.Ltmp76-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	216                     # -168
	.byte	126                     # 
	.quad	.Ltmp76-.Lfunc_begin1
	.quad	.Lfunc_end4-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -108
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc35:
	.quad	.Ltmp71-.Lfunc_begin1
	.quad	.Ltmp73-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp73-.Lfunc_begin1
	.quad	.Ltmp76-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -164
	.byte	126                     # 
	.quad	.Ltmp76-.Lfunc_begin1
	.quad	.Lfunc_end4-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	228                     # -412
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Lfunc_begin5-.Lfunc_begin1
	.quad	.Lfunc_end5-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	92                      # -36
	.quad	0
	.quad	0
.Ldebug_loc37:
	.quad	.Ltmp80-.Lfunc_begin1
	.quad	.Lfunc_end5-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	192                     # -192
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc38:
	.quad	.Ltmp80-.Lfunc_begin1
	.quad	.Ltmp84-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp84-.Lfunc_begin1
	.quad	.Lfunc_end5-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -352
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc40:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc41:
	.quad	.Ltmp89-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -200
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Ltmp90-.Lfunc_begin1
	.quad	.Ltmp94-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp94-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -376
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc43:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Lfunc_end7-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	116                     # -12
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Lfunc_begin8-.Lfunc_begin1
	.quad	.Lfunc_end8-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	108                     # -20
	.quad	0
	.quad	0
.Ldebug_loc45:
	.quad	.Lfunc_begin8-.Lfunc_begin1
	.quad	.Lfunc_end8-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	104                     # -24
	.quad	0
	.quad	0
.Ldebug_loc46:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc48:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc49:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc51:
	.quad	.Ltmp103-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc52:
	.quad	.Ltmp104-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -188
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc53:
	.quad	.Ltmp105-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -216
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc54:
	.quad	.Ltmp106-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -264
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc56:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc58:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc59:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc61:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -84
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc62:
	.quad	.Ltmp109-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -184
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Ltmp110-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -212
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc64:
	.quad	.Ltmp111-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -288
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Ltmp112-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	192                     # -320
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Ltmp113-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -352
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc67:
	.quad	.Ltmp114-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -380
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc68:
	.quad	.Ltmp115-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -408
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Ltmp116-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -440
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc70:
	.quad	.Ltmp117-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -472
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp118-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -504
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc72:
	.quad	.Ltmp119-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -536
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc73:
	.quad	.Ltmp120-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -592
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc76:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc78:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc80:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -88
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Ltmp123-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -116
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc82:
	.quad	.Ltmp124-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc83:
	.quad	.Ltmp125-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -176
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Ltmp126-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -240
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc85:
	.quad	.Ltmp127-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -280
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Ltmp128-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -396
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc87:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc88:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc90:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc91:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc92:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc93:
	.quad	.Ltmp131-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	228                     # -156
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc94:
	.quad	.Ltmp132-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -196
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Ltmp133-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -280
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc96:
	.quad	.Ltmp134-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -328
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc97:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	96                      # -32
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	88                      # -40
	.quad	0
	.quad	0
.Ldebug_loc99:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc100:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc101:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc102:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc104:
	.quad	.Ltmp137-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -92
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Ltmp138-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc106:
	.quad	.Ltmp139-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -184
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Ltmp140-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -208
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc108:
	.quad	.Ltmp141-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -248
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc110:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc112:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc114:
	.quad	.Ltmp144-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -148
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc115:
	.quad	.Ltmp145-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -288
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Ltmp146-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc117:
	.quad	.Ltmp147-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -488
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc120:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc121:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc123:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc125:
	.quad	.Ltmp150-.Lfunc_begin1
	.quad	.Ltmp162-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp162-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc126:
	.quad	.Ltmp157-.Lfunc_begin1
	.quad	.Ltmp166-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	192                     # -320
	.byte	125                     # 
	.quad	.Ltmp166-.Lfunc_begin1
	.quad	.Ltmp169-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -920
	.byte	120                     # 
	.quad	.Ltmp169-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -1040
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc127:
	.quad	.Ltmp153-.Lfunc_begin1
	.quad	.Ltmp166-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp166-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -912
	.byte	120                     # 
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Lfunc_begin16-.Lfunc_begin16
	.quad	.Lfunc_end16-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	112                     # -16
	.quad	0
	.quad	0
.Ldebug_loc129:
	.quad	.Lfunc_begin17-.Lfunc_begin16
	.quad	.Lfunc_end17-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc130:
	.quad	.Lfunc_begin17-.Lfunc_begin16
	.quad	.Lfunc_end17-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc131:
	.quad	.Ltmp175-.Lfunc_begin16
	.quad	.Ltmp180-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp180-.Lfunc_begin16
	.quad	.Ltmp183-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -420
	.byte	124                     # 
	.quad	.Ltmp183-.Lfunc_begin16
	.quad	.Ltmp184-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp184-.Lfunc_begin16
	.quad	.Ltmp187-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -420
	.byte	124                     # 
	.quad	.Ltmp187-.Lfunc_begin16
	.quad	.Lfunc_end17-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -1060
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc132:
	.quad	.Lfunc_begin18-.Lfunc_begin16
	.quad	.Lfunc_end18-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Lfunc_begin18-.Lfunc_begin16
	.quad	.Lfunc_end18-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc134:
	.quad	.Ltmp194-.Lfunc_begin16
	.quad	.Lfunc_end18-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Ltmp195-.Lfunc_begin16
	.quad	.Ltmp201-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp201-.Lfunc_begin16
	.quad	.Lfunc_end18-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -624
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc136:
	.quad	.Lfunc_begin19-.Lfunc_begin16
	.quad	.Lfunc_end19-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc137:
	.quad	.Lfunc_begin19-.Lfunc_begin16
	.quad	.Lfunc_end19-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc138:
	.quad	.Lfunc_begin19-.Lfunc_begin16
	.quad	.Lfunc_end19-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc139:
	.quad	.Ltmp206-.Lfunc_begin16
	.quad	.Ltmp210-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp210-.Lfunc_begin16
	.quad	.Lfunc_end19-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -328
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Lfunc_begin20-.Lfunc_begin16
	.quad	.Lfunc_end20-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc141:
	.quad	.Lfunc_begin20-.Lfunc_begin16
	.quad	.Lfunc_end20-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc142:
	.quad	.Lfunc_begin20-.Lfunc_begin16
	.quad	.Lfunc_end20-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc143:
	.quad	.Lfunc_begin20-.Lfunc_begin16
	.quad	.Lfunc_end20-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	68                      # -60
	.quad	0
	.quad	0
.Ldebug_loc144:
	.quad	.Ltmp215-.Lfunc_begin16
	.quad	.Ltmp219-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp219-.Lfunc_begin16
	.quad	.Lfunc_end20-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -344
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc145:
	.quad	.Lfunc_begin21-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc146:
	.quad	.Lfunc_begin21-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc147:
	.quad	.Lfunc_begin21-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc148:
	.quad	.Lfunc_begin21-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc149:
	.quad	.Ltmp224-.Lfunc_begin16
	.quad	.Ltmp228-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp228-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -336
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Ltmp229-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -440
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc151:
	.quad	.Ltmp230-.Lfunc_begin16
	.quad	.Lfunc_end21-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	192                     # -448
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc152:
	.quad	.Lfunc_begin22-.Lfunc_begin16
	.quad	.Lfunc_end22-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	88                      # -40
	.quad	0
	.quad	0
.Ldebug_loc153:
	.quad	.Lfunc_begin22-.Lfunc_begin16
	.quad	.Lfunc_end22-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
	.quad	0
	.quad	0
.Ldebug_loc154:
	.quad	.Ltmp235-.Lfunc_begin16
	.quad	.Lfunc_end22-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -200
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc155:
	.quad	.Ltmp235-.Lfunc_begin16
	.quad	.Ltmp239-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp239-.Lfunc_begin16
	.quad	.Lfunc_end22-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -360
	.byte	125                     # 
	.quad	0
	.quad	0
.Ldebug_loc156:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc157:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc158:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc160:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc161:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc162:
	.quad	.Lfunc_begin23-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -84
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc163:
	.quad	.Ltmp245-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -508
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc164:
	.quad	.Ltmp246-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -560
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc165:
	.quad	.Ltmp246-.Lfunc_begin16
	.quad	.Ltmp249-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp249-.Lfunc_begin16
	.quad	.Lfunc_end23-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -768
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc166:
	.quad	.Lfunc_begin24-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc167:
	.quad	.Lfunc_begin24-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc168:
	.quad	.Lfunc_begin24-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc169:
	.quad	.Lfunc_begin24-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc170:
	.quad	.Lfunc_begin24-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc171:
	.quad	.Ltmp255-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc172:
	.quad	.Ltmp255-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	0
	.quad	0
.Ldebug_loc173:
	.quad	.Ltmp255-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	6                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # DW_OP_plus_uconst
	.byte	35                      # 1
	.byte	1                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc174:
	.quad	.Ltmp262-.Lfunc_begin16
	.quad	.Ltmp269-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	.Ltmp269-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -1128
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc175:
	.quad	.Ltmp265-.Lfunc_begin16
	.quad	.Ltmp274-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp274-.Lfunc_begin16
	.quad	.Lfunc_end24-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -1408
	.byte	117                     # 
	.quad	0
	.quad	0
.Ldebug_loc176:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc177:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	76                      # -52
	.quad	0
	.quad	0
.Ldebug_loc178:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
	.quad	0
	.quad	0
.Ldebug_loc179:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -68
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc180:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc181:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc182:
	.quad	.Lfunc_begin25-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -84
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc183:
	.quad	.Ltmp282-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -452
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc184:
	.quad	.Ltmp283-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -632
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc185:
	.quad	.Ltmp283-.Lfunc_begin16
	.quad	.Ltmp290-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp290-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -1232
	.byte	118                     # 
	.quad	0
	.quad	0
.Ldebug_loc186:
	.quad	.Ltmp286-.Lfunc_begin16
	.quad	.Ltmp296-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp296-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -1488
	.byte	116                     # 
	.quad	0
	.quad	0
.Ldebug_loc187:
	.quad	.Ltmp294-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	200                     # -1464
	.byte	116                     # 
	.quad	0
	.quad	0
.Ldebug_loc188:
	.quad	.Ltmp296-.Lfunc_begin16
	.quad	.Ltmp300-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp300-.Lfunc_begin16
	.quad	.Lfunc_end25-.Lfunc_begin16
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -1792
	.byte	114                     # 
	.quad	0
	.quad	0
	.section	.debug_abbrev,"",@progbits
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\264B"                 # DW_AT_GNU_pubnames
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	85                      # DW_AT_ranges
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
	.section	.debug_info,"",@progbits
.Lcu_begin0:
	.long	475                     # Length of Unit
	.short	4                       # DWARF version number
	.long	.debug_abbrev           # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x1d4 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.long	.Lline_table_start0     # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_GNU_pubnames
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.long	.Lfunc_end0-.Lfunc_begin0 # DW_AT_high_pc
	.byte	2                       # Abbrev [2] 0x2a:0x5 DW_TAG_pointer_type
	.long	47                      # DW_AT_type
	.byte	3                       # Abbrev [3] 0x2f:0x7 DW_TAG_base_type
	.long	.Linfo_string3          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	4                       # Abbrev [4] 0x36:0x197 DW_TAG_subprogram
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.long	.Lfunc_end0-.Lfunc_begin0 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string10         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	6                       # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	47                      # DW_AT_type
                                        # DW_AT_external
	.byte	5                       # Abbrev [5] 0x4f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc0            # DW_AT_location
	.long	.Linfo_string36         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	6                       # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	5                       # Abbrev [5] 0x5e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc1            # DW_AT_location
	.long	.Linfo_string37         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	6                       # DW_AT_decl_line
	.long	461                     # DW_AT_type
	.byte	6                       # Abbrev [6] 0x6d:0xf DW_TAG_variable
	.long	.Ldebug_loc2            # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x7c:0xf DW_TAG_variable
	.long	.Ldebug_loc3            # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	12                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x8b:0xf DW_TAG_variable
	.long	.Ldebug_loc4            # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	13                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x9a:0xf DW_TAG_variable
	.long	.Ldebug_loc5            # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	14                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0xa9:0xf DW_TAG_variable
	.long	.Ldebug_loc7            # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0xb8:0xf DW_TAG_variable
	.long	.Ldebug_loc8            # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	18                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0xc7:0xf DW_TAG_variable
	.long	.Ldebug_loc9            # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	19                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0xd6:0xf DW_TAG_variable
	.long	.Ldebug_loc10           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	20                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0xe5:0xf DW_TAG_variable
	.long	.Ldebug_loc11           # DW_AT_location
	.long	.Linfo_string48         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	21                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0xf4:0xf DW_TAG_variable
	.long	.Ldebug_loc12           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	.debug_info+521         # DW_AT_type
	.byte	6                       # Abbrev [6] 0x103:0xf DW_TAG_variable
	.long	.Ldebug_loc13           # DW_AT_location
	.long	.Linfo_string50         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	25                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x112:0xf DW_TAG_variable
	.long	.Ldebug_loc14           # DW_AT_location
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x121:0xf DW_TAG_variable
	.long	.Ldebug_loc15           # DW_AT_location
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	27                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x130:0xf DW_TAG_variable
	.long	.Ldebug_loc16           # DW_AT_location
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x13f:0xf DW_TAG_variable
	.long	.Ldebug_loc17           # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	39                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x14e:0xf DW_TAG_variable
	.long	.Ldebug_loc18           # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x15d:0xf DW_TAG_variable
	.long	.Ldebug_loc19           # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x16c:0xf DW_TAG_variable
	.long	.Ldebug_loc20           # DW_AT_location
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	.debug_info+521         # DW_AT_type
	.byte	6                       # Abbrev [6] 0x17b:0xf DW_TAG_variable
	.long	.Ldebug_loc21           # DW_AT_location
	.long	.Linfo_string58         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x18a:0xf DW_TAG_variable
	.long	.Ldebug_loc22           # DW_AT_location
	.long	.Linfo_string59         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	62                      # DW_AT_decl_line
	.long	.debug_info+521         # DW_AT_type
	.byte	7                       # Abbrev [7] 0x199:0xf DW_TAG_variable
	.long	.Ldebug_loc23           # DW_AT_location
	.long	.Linfo_string60         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	63                      # DW_AT_decl_line
	.long	.debug_info+521         # DW_AT_type
	.byte	6                       # Abbrev [6] 0x1a8:0xf DW_TAG_variable
	.long	.Ldebug_loc24           # DW_AT_location
	.long	.Linfo_string61         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x1b7:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges0         # DW_AT_ranges
	.byte	6                       # Abbrev [6] 0x1bc:0xf DW_TAG_variable
	.long	.Ldebug_loc6            # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x1cd:0x5 DW_TAG_pointer_type
	.long	466                     # DW_AT_type
	.byte	2                       # Abbrev [2] 0x1d2:0x5 DW_TAG_pointer_type
	.long	471                     # DW_AT_type
	.byte	3                       # Abbrev [3] 0x1d7:0x7 DW_TAG_base_type
	.long	.Linfo_string38         # DW_AT_name
	.byte	6                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	0                       # End Of Children Mark
.Lcu_begin1:
	.long	2105                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.debug_abbrev           # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x832 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string4          # DW_AT_name
	.long	.Lline_table_start0     # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_GNU_pubnames
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.long	.Lfunc_end15-.Lfunc_begin1 # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0x2a:0x5 DW_TAG_pointer_type
	.long	.debug_info+42          # DW_AT_type
	.byte	3                       # Abbrev [3] 0x2f:0x7 DW_TAG_base_type
	.long	.Linfo_string5          # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	10                      # Abbrev [10] 0x36:0x25 DW_TAG_subprogram
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.long	.Lfunc_end1-.Lfunc_begin1 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string11         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	3                       # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	5                       # Abbrev [5] 0x4b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc25           # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	3                       # DW_AT_decl_line
	.long	2038                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x5b:0x4d DW_TAG_subprogram
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.long	.Lfunc_end2-.Lfunc_begin2 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string12         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x74:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc26           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x83:0xf DW_TAG_variable
	.long	.Ldebug_loc27           # DW_AT_location
	.long	.Linfo_string8          # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x92:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges1         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x97:0xf DW_TAG_variable
	.long	.Ldebug_loc28           # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xa8:0x5c DW_TAG_subprogram
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.long	.Lfunc_end3-.Lfunc_begin3 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string13         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0xc1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc29           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd0:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc30           # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0xdf:0xf DW_TAG_variable
	.long	.Ldebug_loc31           # DW_AT_location
	.long	.Linfo_string8          # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	8                       # Abbrev [8] 0xee:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges2         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0xf3:0xf DW_TAG_variable
	.long	.Ldebug_loc32           # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	18                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x104:0x58 DW_TAG_subprogram
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.long	.Lfunc_end4-.Lfunc_begin4 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string14         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+47          # DW_AT_type
                                        # DW_AT_external
	.byte	13                      # Abbrev [13] 0x11d:0xb DW_TAG_formal_parameter
	.long	.Linfo_string66         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x128:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc33           # DW_AT_location
	.long	.Linfo_string67         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x137:0xf DW_TAG_variable
	.long	.Ldebug_loc34           # DW_AT_location
	.long	.Linfo_string68         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x146:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges3         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x14b:0xf DW_TAG_variable
	.long	.Ldebug_loc35           # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x15c:0x4d DW_TAG_subprogram
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.long	.Lfunc_end5-.Lfunc_begin5 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string15         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	38                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x175:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc36           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	38                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x184:0xf DW_TAG_variable
	.long	.Ldebug_loc37           # DW_AT_location
	.long	.Linfo_string8          # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	39                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x193:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges4         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x198:0xf DW_TAG_variable
	.long	.Ldebug_loc38           # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x1a9:0x5c DW_TAG_subprogram
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.long	.Lfunc_end6-.Lfunc_begin6 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string16         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x1c2:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc39           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1d1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc40           # DW_AT_location
	.long	.Linfo_string69         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x1e0:0xf DW_TAG_variable
	.long	.Ldebug_loc41           # DW_AT_location
	.long	.Linfo_string8          # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x1ef:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges5         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x1f4:0xf DW_TAG_variable
	.long	.Ldebug_loc42           # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	49                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x205:0x29 DW_TAG_subprogram
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.long	.Lfunc_end7-.Lfunc_begin7 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string17         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x21e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc43           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x22e:0x38 DW_TAG_subprogram
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.long	.Lfunc_end8-.Lfunc_begin8 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string18         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	59                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x247:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc44           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	59                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x256:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc45           # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	59                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x266:0xa1 DW_TAG_subprogram
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.long	.Lfunc_end9-.Lfunc_begin9 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string19         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x27f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc46           # DW_AT_location
	.long	.Linfo_string70         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x28e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc47           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x29d:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc48           # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x2ac:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc49           # DW_AT_location
	.long	.Linfo_string71         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x2bb:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc50           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2ca:0xf DW_TAG_variable
	.long	.Ldebug_loc51           # DW_AT_location
	.long	.Linfo_string72         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	65                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2d9:0xf DW_TAG_variable
	.long	.Ldebug_loc52           # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	67                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2e8:0xf DW_TAG_variable
	.long	.Ldebug_loc53           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	68                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2f7:0xf DW_TAG_variable
	.long	.Ldebug_loc54           # DW_AT_location
	.long	.Linfo_string74         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	70                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x307:0x137 DW_TAG_subprogram
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.long	.Lfunc_end10-.Lfunc_begin10 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string20         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	42                      # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x320:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc55           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x32f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc56           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x33e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc57           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x34d:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc58           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x35c:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc59           # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x36b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc60           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x37a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc61           # DW_AT_location
	.long	.Linfo_string69         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x389:0xf DW_TAG_variable
	.long	.Ldebug_loc62           # DW_AT_location
	.long	.Linfo_string75         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	76                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x398:0xf DW_TAG_variable
	.long	.Ldebug_loc63           # DW_AT_location
	.long	.Linfo_string76         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x3a7:0xf DW_TAG_variable
	.long	.Ldebug_loc64           # DW_AT_location
	.long	.Linfo_string77         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	79                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x3b6:0xf DW_TAG_variable
	.long	.Ldebug_loc65           # DW_AT_location
	.long	.Linfo_string78         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	80                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x3c5:0xf DW_TAG_variable
	.long	.Ldebug_loc66           # DW_AT_location
	.long	.Linfo_string79         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	81                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x3d4:0xf DW_TAG_variable
	.long	.Ldebug_loc67           # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x3e3:0xf DW_TAG_variable
	.long	.Ldebug_loc68           # DW_AT_location
	.long	.Linfo_string80         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	83                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x3f2:0xf DW_TAG_variable
	.long	.Ldebug_loc69           # DW_AT_location
	.long	.Linfo_string81         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	84                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x401:0xf DW_TAG_variable
	.long	.Ldebug_loc70           # DW_AT_location
	.long	.Linfo_string82         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	85                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x410:0xf DW_TAG_variable
	.long	.Ldebug_loc71           # DW_AT_location
	.long	.Linfo_string83         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	86                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x41f:0xf DW_TAG_variable
	.long	.Ldebug_loc72           # DW_AT_location
	.long	.Linfo_string84         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	87                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	6                       # Abbrev [6] 0x42e:0xf DW_TAG_variable
	.long	.Ldebug_loc73           # DW_AT_location
	.long	.Linfo_string85         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	88                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x43e:0xdd DW_TAG_subprogram
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.long	.Lfunc_end11-.Lfunc_begin11 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string21         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+47          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x457:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc74           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x466:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc75           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x475:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc76           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x484:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc77           # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x493:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc78           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4a2:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc79           # DW_AT_location
	.long	.Linfo_string50         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4b1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc80           # DW_AT_location
	.long	.Linfo_string51         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x4c0:0xf DW_TAG_variable
	.long	.Ldebug_loc81           # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	95                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x4cf:0xf DW_TAG_variable
	.long	.Ldebug_loc82           # DW_AT_location
	.long	.Linfo_string80         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x4de:0xf DW_TAG_variable
	.long	.Ldebug_loc83           # DW_AT_location
	.long	.Linfo_string86         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	97                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	6                       # Abbrev [6] 0x4ed:0xf DW_TAG_variable
	.long	.Ldebug_loc84           # DW_AT_location
	.long	.Linfo_string87         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	98                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x4fc:0xf DW_TAG_variable
	.long	.Ldebug_loc85           # DW_AT_location
	.long	.Linfo_string88         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	99                      # DW_AT_decl_line
	.long	47                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x50b:0xf DW_TAG_variable
	.long	.Ldebug_loc86           # DW_AT_location
	.long	.Linfo_string68         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	100                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x51b:0xb0 DW_TAG_subprogram
	.quad	.Lfunc_begin12          # DW_AT_low_pc
	.long	.Lfunc_end12-.Lfunc_begin12 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string22         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x534:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc87           # DW_AT_location
	.long	.Linfo_string50         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x543:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc88           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x552:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc89           # DW_AT_location
	.long	.Linfo_string69         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x561:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc90           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x570:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc91           # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x57f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc92           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x58e:0xf DW_TAG_variable
	.long	.Ldebug_loc93           # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x59d:0xf DW_TAG_variable
	.long	.Ldebug_loc94           # DW_AT_location
	.long	.Linfo_string76         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x5ac:0xf DW_TAG_variable
	.long	.Ldebug_loc95           # DW_AT_location
	.long	.Linfo_string89         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	107                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x5bb:0xf DW_TAG_variable
	.long	.Ldebug_loc96           # DW_AT_location
	.long	.Linfo_string90         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	109                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x5cb:0xce DW_TAG_subprogram
	.quad	.Lfunc_begin13          # DW_AT_low_pc
	.long	.Lfunc_end13-.Lfunc_begin13 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string23         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	113                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	42                      # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x5e4:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc97           # DW_AT_location
	.long	.Linfo_string50         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	113                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x5f3:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc98           # DW_AT_location
	.long	.Linfo_string51         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	113                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x602:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc99           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	113                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x611:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc100          # DW_AT_location
	.long	.Linfo_string69         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x620:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc101          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x62f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc102          # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x63e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc103          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x64d:0xf DW_TAG_variable
	.long	.Ldebug_loc104          # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x65c:0xf DW_TAG_variable
	.long	.Ldebug_loc105          # DW_AT_location
	.long	.Linfo_string89         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	116                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x66b:0xf DW_TAG_variable
	.long	.Ldebug_loc106          # DW_AT_location
	.long	.Linfo_string90         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	117                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x67a:0xf DW_TAG_variable
	.long	.Ldebug_loc107          # DW_AT_location
	.long	.Linfo_string91         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	118                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	6                       # Abbrev [6] 0x689:0xf DW_TAG_variable
	.long	.Ldebug_loc108          # DW_AT_location
	.long	.Linfo_string68         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	119                     # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x699:0xa1 DW_TAG_subprogram
	.quad	.Lfunc_begin14          # DW_AT_low_pc
	.long	.Lfunc_end14-.Lfunc_begin14 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string24         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	42                      # DW_AT_type
                                        # DW_AT_external
	.byte	5                       # Abbrev [5] 0x6b2:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc109          # DW_AT_location
	.long	.Linfo_string51         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	5                       # Abbrev [5] 0x6c1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc110          # DW_AT_location
	.long	.Linfo_string92         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x6d0:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc111          # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x6df:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc112          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x6ee:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc113          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x6fd:0xf DW_TAG_variable
	.long	.Ldebug_loc114          # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	126                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x70c:0xf DW_TAG_variable
	.long	.Ldebug_loc115          # DW_AT_location
	.long	.Linfo_string90         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	127                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x71b:0xf DW_TAG_variable
	.long	.Ldebug_loc116          # DW_AT_location
	.long	.Linfo_string91         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	128                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	6                       # Abbrev [6] 0x72a:0xf DW_TAG_variable
	.long	.Ldebug_loc117          # DW_AT_location
	.long	.Linfo_string68         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	129                     # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x73a:0xbc DW_TAG_subprogram
	.quad	.Lfunc_begin15          # DW_AT_low_pc
	.long	.Lfunc_end15-.Lfunc_begin15 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string25         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	134                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	42                      # DW_AT_type
                                        # DW_AT_external
	.byte	5                       # Abbrev [5] 0x753:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc118          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	134                     # DW_AT_decl_line
	.long	2103                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x762:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc119          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	134                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x771:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc120          # DW_AT_location
	.long	.Linfo_string94         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	134                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x780:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc121          # DW_AT_location
	.long	.Linfo_string95         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	134                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x78f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc122          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	135                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x79e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc123          # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	135                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x7ad:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc124          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	135                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	6                       # Abbrev [6] 0x7bc:0xf DW_TAG_variable
	.long	.Ldebug_loc126          # DW_AT_location
	.long	.Linfo_string96         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	139                     # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x7cb:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges6         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x7d0:0xf DW_TAG_variable
	.long	.Ldebug_loc125          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x7e0:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges7         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x7e5:0xf DW_TAG_variable
	.long	.Ldebug_loc127          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	140                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	14                      # Abbrev [14] 0x7f6:0xb DW_TAG_typedef
	.long	2049                    # DW_AT_type
	.long	.Linfo_string63         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.byte	2                       # Abbrev [2] 0x801:0x5 DW_TAG_pointer_type
	.long	2054                    # DW_AT_type
	.byte	2                       # Abbrev [2] 0x806:0x5 DW_TAG_pointer_type
	.long	2059                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x80b:0xb DW_TAG_typedef
	.long	2070                    # DW_AT_type
	.long	.Linfo_string9          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.byte	15                      # Abbrev [15] 0x816:0x21 DW_TAG_structure_type
	.long	.Linfo_string9          # DW_AT_name
	.byte	16                      # DW_AT_byte_size
	.byte	1                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
	.byte	16                      # Abbrev [16] 0x81e:0xc DW_TAG_member
	.long	.Linfo_string7          # DW_AT_name
	.long	.debug_info+47          # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	16                      # Abbrev [16] 0x82a:0xc DW_TAG_member
	.long	.Linfo_string8          # DW_AT_name
	.long	.debug_info+42          # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x837:0x5 DW_TAG_pointer_type
	.long	42                      # DW_AT_type
	.byte	0                       # End Of Children Mark
.Lcu_begin2:
	.long	1391                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.debug_abbrev           # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x568 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string6          # DW_AT_name
	.long	.Lline_table_start0     # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_GNU_pubnames
	.quad	.Lfunc_begin16          # DW_AT_low_pc
	.long	.Lfunc_end25-.Lfunc_begin16 # DW_AT_high_pc
	.byte	2                       # Abbrev [2] 0x2a:0x5 DW_TAG_pointer_type
	.long	47                      # DW_AT_type
	.byte	14                      # Abbrev [14] 0x2f:0xb DW_TAG_typedef
	.long	58                      # DW_AT_type
	.long	.Linfo_string9          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.byte	15                      # Abbrev [15] 0x3a:0x21 DW_TAG_structure_type
	.long	.Linfo_string9          # DW_AT_name
	.byte	16                      # DW_AT_byte_size
	.byte	1                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
	.byte	16                      # Abbrev [16] 0x42:0xc DW_TAG_member
	.long	.Linfo_string7          # DW_AT_name
	.long	.debug_info+47          # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	16                      # Abbrev [16] 0x4e:0xc DW_TAG_member
	.long	.Linfo_string8          # DW_AT_name
	.long	.debug_info+42          # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	0                       # End Of Children Mark
	.byte	10                      # Abbrev [10] 0x5b:0x25 DW_TAG_subprogram
	.quad	.Lfunc_begin16          # DW_AT_low_pc
	.long	.Lfunc_end16-.Lfunc_begin16 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string26         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	3                       # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	5                       # Abbrev [5] 0x70:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc128          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	3                       # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	10                      # Abbrev [10] 0x80:0x5b DW_TAG_subprogram
	.quad	.Lfunc_begin17          # DW_AT_low_pc
	.long	.Lfunc_end17-.Lfunc_begin17 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string27         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x95:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc129          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0xa4:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc130          # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0xb3:0xf DW_TAG_variable
	.long	.Ldebug_loc131          # DW_AT_location
	.long	.Linfo_string97         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	8                       # Abbrev [8] 0xc2:0x18 DW_TAG_lexical_block
	.long	.Ldebug_ranges8         # DW_AT_ranges
	.byte	17                      # Abbrev [17] 0xc7:0x12 DW_TAG_variable
	.byte	6                       # DW_AT_location
	.byte	145
	.byte	76
	.byte	16
	.byte	1
	.byte	28
	.byte	159
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	12                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0xdb:0x5c DW_TAG_subprogram
	.quad	.Lfunc_begin18          # DW_AT_low_pc
	.long	.Lfunc_end18-.Lfunc_begin18 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string28         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	42                      # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0xf4:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc132          # DW_AT_location
	.long	.Linfo_string7          # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x103:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc133          # DW_AT_location
	.long	.Linfo_string8          # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	6                       # Abbrev [6] 0x112:0xf DW_TAG_variable
	.long	.Ldebug_loc134          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	25                      # DW_AT_decl_line
	.long	42                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x121:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges9         # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x126:0xf DW_TAG_variable
	.long	.Ldebug_loc135          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	10                      # Abbrev [10] 0x137:0x58 DW_TAG_subprogram
	.quad	.Lfunc_begin19          # DW_AT_low_pc
	.long	.Lfunc_end19-.Lfunc_begin19 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string29         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x14c:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc136          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x15b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc137          # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x16a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc138          # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x179:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges10        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x17e:0xf DW_TAG_variable
	.long	.Ldebug_loc139          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	35                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	10                      # Abbrev [10] 0x18f:0x67 DW_TAG_subprogram
	.quad	.Lfunc_begin20          # DW_AT_low_pc
	.long	.Lfunc_end20-.Lfunc_begin20 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string30         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x1a4:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc140          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1b3:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc141          # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1c2:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc142          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1d1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc143          # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x1e0:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges11        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x1e5:0xf DW_TAG_variable
	.long	.Ldebug_loc144          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	41                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	10                      # Abbrev [10] 0x1f6:0x93 DW_TAG_subprogram
	.quad	.Lfunc_begin21          # DW_AT_low_pc
	.long	.Lfunc_end21-.Lfunc_begin21 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string31         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x20b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc145          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x21a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc146          # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x229:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc147          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	.debug_info+526         # DW_AT_type
	.byte	12                      # Abbrev [12] 0x238:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc148          # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x247:0x41 DW_TAG_lexical_block
	.long	.Ldebug_ranges12        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x24c:0xf DW_TAG_variable
	.long	.Ldebug_loc149          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	18                      # Abbrev [18] 0x25b:0x2c DW_TAG_lexical_block
	.quad	.Ltmp228                # DW_AT_low_pc
	.long	.Ltmp231-.Ltmp228       # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x268:0xf DW_TAG_variable
	.long	.Ldebug_loc150          # DW_AT_location
	.long	.Linfo_string98         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	.debug_info+526         # DW_AT_type
	.byte	7                       # Abbrev [7] 0x277:0xf DW_TAG_variable
	.long	.Ldebug_loc151          # DW_AT_location
	.long	.Linfo_string99         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	49                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x289:0x5c DW_TAG_subprogram
	.quad	.Lfunc_begin22          # DW_AT_low_pc
	.long	.Lfunc_end22-.Lfunc_begin22 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string32         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x2a2:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc152          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x2b1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc153          # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2c0:0xf DW_TAG_variable
	.long	.Ldebug_loc154          # DW_AT_location
	.long	.Linfo_string8          # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x2cf:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges13        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x2d4:0xf DW_TAG_variable
	.long	.Ldebug_loc155          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x2e5:0xbb DW_TAG_subprogram
	.quad	.Lfunc_begin23          # DW_AT_low_pc
	.long	.Lfunc_end23-.Lfunc_begin23 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string33         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x2fe:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc156          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x30d:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc157          # DW_AT_location
	.long	.Linfo_string100        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x31c:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc158          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x32b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc159          # DW_AT_location
	.long	.Linfo_string101        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x33a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc160          # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	62                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x349:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc161          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	62                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x358:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc162          # DW_AT_location
	.long	.Linfo_string102        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	62                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x367:0xf DW_TAG_variable
	.long	.Ldebug_loc163          # DW_AT_location
	.long	.Linfo_string103        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	67                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x376:0xf DW_TAG_variable
	.long	.Ldebug_loc164          # DW_AT_location
	.long	.Linfo_string52         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x385:0xf DW_TAG_variable
	.long	.Ldebug_loc165          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	70                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	19                      # Abbrev [19] 0x394:0xb DW_TAG_variable
	.long	.Linfo_string104        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	68                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x3a0:0xe3 DW_TAG_subprogram
	.quad	.Lfunc_begin24          # DW_AT_low_pc
	.long	.Lfunc_end24-.Lfunc_begin24 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string34         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x3b9:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc166          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x3c8:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc167          # DW_AT_location
	.long	.Linfo_string100        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x3d7:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc168          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x3e6:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc169          # DW_AT_location
	.long	.Linfo_string102        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	78                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x3f5:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc170          # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	78                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x404:0xf DW_TAG_variable
	.long	.Ldebug_loc171          # DW_AT_location
	.long	.Linfo_string105        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x413:0xf DW_TAG_variable
	.long	.Ldebug_loc172          # DW_AT_location
	.long	.Linfo_string106        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	83                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	18                      # Abbrev [18] 0x422:0x1d DW_TAG_lexical_block
	.quad	.Ltmp256                # DW_AT_low_pc
	.long	.Ltmp261-.Ltmp256       # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x42f:0xf DW_TAG_variable
	.long	.Ldebug_loc173          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	84                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x43f:0x2e DW_TAG_lexical_block
	.long	.Ldebug_ranges14        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x444:0xf DW_TAG_variable
	.long	.Ldebug_loc174          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	18                      # Abbrev [18] 0x453:0x19 DW_TAG_lexical_block
	.quad	.Ltmp269                # DW_AT_low_pc
	.long	.Ltmp270-.Ltmp269       # DW_AT_high_pc
	.byte	19                      # Abbrev [19] 0x460:0xb DW_TAG_variable
	.long	.Linfo_string107        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x46d:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges15        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x472:0xf DW_TAG_variable
	.long	.Ldebug_loc175          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	98                      # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x483:0xef DW_TAG_subprogram
	.quad	.Lfunc_begin25          # DW_AT_low_pc
	.long	.Lfunc_end25-.Lfunc_begin25 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string35         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.debug_info+42          # DW_AT_type
                                        # DW_AT_external
	.byte	12                      # Abbrev [12] 0x49c:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc176          # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4ab:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc177          # DW_AT_location
	.long	.Linfo_string100        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4ba:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc178          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4c9:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc179          # DW_AT_location
	.long	.Linfo_string101        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4d8:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc180          # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4e7:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc181          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	12                      # Abbrev [12] 0x4f6:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc182          # DW_AT_location
	.long	.Linfo_string102        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x505:0xf DW_TAG_variable
	.long	.Ldebug_loc183          # DW_AT_location
	.long	.Linfo_string108        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	109                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x514:0xf DW_TAG_variable
	.long	.Ldebug_loc184          # DW_AT_location
	.long	.Linfo_string109        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	111                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	7                       # Abbrev [7] 0x523:0xf DW_TAG_variable
	.long	.Ldebug_loc187          # DW_AT_location
	.long	.Linfo_string52         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	121                     # DW_AT_decl_line
	.long	.debug_info+42          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x532:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges16        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x537:0xf DW_TAG_variable
	.long	.Ldebug_loc185          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	112                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x547:0x2a DW_TAG_lexical_block
	.long	.Ldebug_ranges18        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x54c:0xf DW_TAG_variable
	.long	.Ldebug_loc186          # DW_AT_location
	.long	.Linfo_string43         # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	8                       # Abbrev [8] 0x55b:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges17        # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x560:0xf DW_TAG_variable
	.long	.Ldebug_loc188          # DW_AT_location
	.long	.Linfo_string107        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.byte	116                     # DW_AT_decl_line
	.long	.debug_info+47          # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.Ltmp3-.Lfunc_begin0
	.quad	.Ltmp4-.Lfunc_begin0
	.quad	.Ltmp9-.Lfunc_begin0
	.quad	.Ltmp12-.Lfunc_begin0
	.quad	0
	.quad	0
.Ldebug_ranges1:
	.quad	.Ltmp53-.Lfunc_begin1
	.quad	.Ltmp55-.Lfunc_begin1
	.quad	.Ltmp56-.Lfunc_begin1
	.quad	.Ltmp60-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges2:
	.quad	.Ltmp62-.Lfunc_begin1
	.quad	.Ltmp64-.Lfunc_begin1
	.quad	.Ltmp65-.Lfunc_begin1
	.quad	.Ltmp69-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges3:
	.quad	.Ltmp71-.Lfunc_begin1
	.quad	.Ltmp72-.Lfunc_begin1
	.quad	.Ltmp73-.Lfunc_begin1
	.quad	.Ltmp78-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges4:
	.quad	.Ltmp80-.Lfunc_begin1
	.quad	.Ltmp82-.Lfunc_begin1
	.quad	.Ltmp83-.Lfunc_begin1
	.quad	.Ltmp87-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges5:
	.quad	.Ltmp90-.Lfunc_begin1
	.quad	.Ltmp92-.Lfunc_begin1
	.quad	.Ltmp93-.Lfunc_begin1
	.quad	.Ltmp97-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges6:
	.quad	.Ltmp150-.Lfunc_begin1
	.quad	.Ltmp152-.Lfunc_begin1
	.quad	.Ltmp155-.Lfunc_begin1
	.quad	.Ltmp156-.Lfunc_begin1
	.quad	.Ltmp161-.Lfunc_begin1
	.quad	.Ltmp165-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges7:
	.quad	.Ltmp153-.Lfunc_begin1
	.quad	.Ltmp154-.Lfunc_begin1
	.quad	.Ltmp158-.Lfunc_begin1
	.quad	.Ltmp160-.Lfunc_begin1
	.quad	.Ltmp166-.Lfunc_begin1
	.quad	.Ltmp168-.Lfunc_begin1
	.quad	.Ltmp169-.Lfunc_begin1
	.quad	.Ltmp171-.Lfunc_begin1
	.quad	0
	.quad	0
.Ldebug_ranges8:
	.quad	.Ltmp175-.Lfunc_begin16
	.quad	.Ltmp177-.Lfunc_begin16
	.quad	.Ltmp180-.Lfunc_begin16
	.quad	.Ltmp182-.Lfunc_begin16
	.quad	.Ltmp183-.Lfunc_begin16
	.quad	.Ltmp186-.Lfunc_begin16
	.quad	.Ltmp187-.Lfunc_begin16
	.quad	.Ltmp189-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges9:
	.quad	.Ltmp195-.Lfunc_begin16
	.quad	.Ltmp197-.Lfunc_begin16
	.quad	.Ltmp198-.Lfunc_begin16
	.quad	.Ltmp199-.Lfunc_begin16
	.quad	.Ltmp200-.Lfunc_begin16
	.quad	.Ltmp204-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges10:
	.quad	.Ltmp206-.Lfunc_begin16
	.quad	.Ltmp208-.Lfunc_begin16
	.quad	.Ltmp209-.Lfunc_begin16
	.quad	.Ltmp213-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges11:
	.quad	.Ltmp215-.Lfunc_begin16
	.quad	.Ltmp217-.Lfunc_begin16
	.quad	.Ltmp218-.Lfunc_begin16
	.quad	.Ltmp222-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges12:
	.quad	.Ltmp224-.Lfunc_begin16
	.quad	.Ltmp226-.Lfunc_begin16
	.quad	.Ltmp227-.Lfunc_begin16
	.quad	.Ltmp233-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges13:
	.quad	.Ltmp235-.Lfunc_begin16
	.quad	.Ltmp237-.Lfunc_begin16
	.quad	.Ltmp238-.Lfunc_begin16
	.quad	.Ltmp241-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges14:
	.quad	.Ltmp262-.Lfunc_begin16
	.quad	.Ltmp264-.Lfunc_begin16
	.quad	.Ltmp268-.Lfunc_begin16
	.quad	.Ltmp272-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges15:
	.quad	.Ltmp265-.Lfunc_begin16
	.quad	.Ltmp267-.Lfunc_begin16
	.quad	.Ltmp273-.Lfunc_begin16
	.quad	.Ltmp277-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges16:
	.quad	.Ltmp283-.Lfunc_begin16
	.quad	.Ltmp285-.Lfunc_begin16
	.quad	.Ltmp289-.Lfunc_begin16
	.quad	.Ltmp293-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges17:
	.quad	.Ltmp295-.Lfunc_begin16
	.quad	.Ltmp297-.Lfunc_begin16
	.quad	.Ltmp299-.Lfunc_begin16
	.quad	.Ltmp303-.Lfunc_begin16
	.quad	0
	.quad	0
.Ldebug_ranges18:
	.quad	.Ltmp286-.Lfunc_begin16
	.quad	.Ltmp288-.Lfunc_begin16
	.quad	.Ltmp295-.Lfunc_begin16
	.quad	.Ltmp303-.Lfunc_begin16
	.quad	0
	.quad	0
	.section	.debug_macinfo,"",@progbits
.Lcu_macro_begin0:
.Lcu_macro_begin1:
.Lcu_macro_begin2:
	.byte	0                       # End Of Macro List Mark
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end0-.LpubNames_begin0 # Length of Public Names Info
.LpubNames_begin0:
	.short	2                       # DWARF Version
	.long	.Lcu_begin0             # Offset of Compilation Unit Info
	.long	479                     # Compilation Unit Length
	.long	54                      # DIE offset
	.asciz	"main"                  # External Name
	.long	0                       # End Mark
.LpubNames_end0:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end0-.LpubTypes_begin0 # Length of Public Types Info
.LpubTypes_begin0:
	.short	2                       # DWARF Version
	.long	.Lcu_begin0             # Offset of Compilation Unit Info
	.long	479                     # Compilation Unit Length
	.long	47                      # DIE offset
	.asciz	"int"                   # External Name
	.long	471                     # DIE offset
	.asciz	"char"                  # External Name
	.long	0                       # End Mark
.LpubTypes_end0:
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end1-.LpubNames_begin1 # Length of Public Names Info
.LpubNames_begin1:
	.short	2                       # DWARF Version
	.long	.Lcu_begin1             # Offset of Compilation Unit Info
	.long	2109                    # Compilation Unit Length
	.long	260                     # DIE offset
	.asciz	"norm_rand"             # External Name
	.long	91                      # DIE offset
	.asciz	"gen_binary_poly"       # External Name
	.long	1483                    # DIE offset
	.asciz	"plain_mul"             # External Name
	.long	425                     # DIE offset
	.asciz	"gen_const_poly"        # External Name
	.long	348                     # DIE offset
	.asciz	"gen_normal_poly"       # External Name
	.long	775                     # DIE offset
	.asciz	"encrypt"               # External Name
	.long	517                     # DIE offset
	.asciz	"keygen_secret"         # External Name
	.long	1689                    # DIE offset
	.asciz	"crypto_add"            # External Name
	.long	54                      # DIE offset
	.asciz	"free_tuple"            # External Name
	.long	1850                    # DIE offset
	.asciz	"vector_mult"           # External Name
	.long	614                     # DIE offset
	.asciz	"keygen_pub0"           # External Name
	.long	558                     # DIE offset
	.asciz	"keygen_pub1"           # External Name
	.long	1086                    # DIE offset
	.asciz	"decrypt"               # External Name
	.long	168                     # DIE offset
	.asciz	"gen_uniform_poly"      # External Name
	.long	1307                    # DIE offset
	.asciz	"plain_add"             # External Name
	.long	0                       # End Mark
.LpubNames_end1:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end1-.LpubTypes_begin1 # Length of Public Types Info
.LpubTypes_begin1:
	.short	2                       # DWARF Version
	.long	.Lcu_begin1             # Offset of Compilation Unit Info
	.long	2109                    # Compilation Unit Length
	.long	2070                    # DIE offset
	.asciz	"poly"                  # External Name
	.long	2038                    # DIE offset
	.asciz	"tuple"                 # External Name
	.long	47                      # DIE offset
	.asciz	"double"                # External Name
	.long	0                       # End Mark
.LpubTypes_end1:
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end2-.LpubNames_begin2 # Length of Public Names Info
.LpubNames_begin2:
	.short	2                       # DWARF Version
	.long	.Lcu_begin2             # Offset of Compilation Unit Info
	.long	1395                    # Compilation Unit Length
	.long	128                     # DIE offset
	.asciz	"print_poly"            # External Name
	.long	1155                    # DIE offset
	.asciz	"polymul"               # External Name
	.long	399                     # DIE offset
	.asciz	"scalar_mul"            # External Name
	.long	928                     # DIE offset
	.asciz	"polymodulo"            # External Name
	.long	91                      # DIE offset
	.asciz	"free_poly"             # External Name
	.long	741                     # DIE offset
	.asciz	"polyadd"               # External Name
	.long	502                     # DIE offset
	.asciz	"poly_divide"           # External Name
	.long	219                     # DIE offset
	.asciz	"new_poly"              # External Name
	.long	311                     # DIE offset
	.asciz	"neg_poly"              # External Name
	.long	649                     # DIE offset
	.asciz	"copy_poly"             # External Name
	.long	0                       # End Mark
.LpubNames_end2:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end2-.LpubTypes_begin2 # Length of Public Types Info
.LpubTypes_begin2:
	.short	2                       # DWARF Version
	.long	.Lcu_begin2             # Offset of Compilation Unit Info
	.long	1395                    # Compilation Unit Length
	.long	58                      # DIE offset
	.asciz	"poly"                  # External Name
	.long	0                       # End Mark
.LpubTypes_end2:

	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
