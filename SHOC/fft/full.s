	.text
	.file	"llvm-link"
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function step1
.LCPI0_0:
	.long	1060439283              # float 0.707106769
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI0_1:
	.quad	4604544271108800512     # double 0.70710676908493042
	.text
	.globl	step1
	.p2align	4, 0x90
	.type	step1,@function
step1:                                  # @step1
.Lfunc_begin0:
	.file	1 "fft.c"
	.loc	1 16 0                  # fft.c:16:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$8552, %rsp             # imm = 0x2168
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp0:
	.loc	1 8 17 prologue_end     # fft.c:8:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp1:
	#DEBUG_VALUE: step1:stride <- 64
	#DEBUG_VALUE: step1:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.9, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -228(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.13, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	-376(%rbp), %r9         # 8-byte Reload
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.14, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.17, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp2:
	.loc	1 20 9 is_stmt 1        # fft.c:20:9
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$20, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -628(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -656(%rbp)        # 8-byte Spill
.Ltmp3:
.LBB0_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_2 Depth 2
                                        #     Child Loop BB0_4 Depth 2
                                        #     Child Loop BB0_6 Depth 2
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.23, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 17 19 is_stmt 1       # fft.c:17:19
	movl	$1, (%rsp)
	movq	%rax, -664(%rbp)        # 8-byte Spill
	movl	%r10d, -668(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.24, %r8
	movabsq	$.L.str.25, %rcx
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.23, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$22, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp4:
	#DEBUG_VALUE: step1:i <- 0
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	.loc	1 22 10                 # fft.c:22:10
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.27, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -704(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %r9         # 8-byte Reload
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -720(%rbp)        # 8-byte Spill
.Ltmp5:
.LBB0_2:                                #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 17 19 is_stmt 1       # fft.c:17:19
	movl	$1, (%rsp)
	movq	%rax, -728(%rbp)        # 8-byte Spill
	movl	%r10d, -732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.27, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -752(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$23, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.30, %rcx
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp6:
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 728, DW_OP_minus] [%rbp+0]
	.loc	1 23 24                 # fft.c:23:24
	movq	%rax, %rdi
	movq	%rax, %r8
	movl	$1, (%rsp)
	movl	%r10d, -756(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -768(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-768(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-728(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.30, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	shlq	$6, %rdx
	.loc	1 23 31 is_stmt 0       # fft.c:23:31
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$23, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.23, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.30, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-784(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-784(%rbp), %rdx        # 8-byte Reload
	movq	-664(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 23 16                 # fft.c:23:16
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$23, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -812(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -832(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$23, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-832(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 23 4                  # fft.c:23:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$23, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -864(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 23 14                 # fft.c:23:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -872(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$23, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.36, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-872(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-852(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$24, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.37, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-728(%rbp), %r11        # 8-byte Reload
	movl	-852(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 24 16 is_stmt 1       # fft.c:24:16
	movl	$1, (%rsp)
	movl	%r10d, -892(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.38, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -912(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.39, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-912(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.39, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 24 4 is_stmt 0        # fft.c:24:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -932(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$24, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.40, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -936(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -944(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 24 14                 # fft.c:24:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -952(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.41, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -956(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.39, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-932(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -968(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$22, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-728(%rbp), %r11        # 8-byte Reload
	movl	-932(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp7:
	.loc	1 22 26 is_stmt 1       # fft.c:22:26
	movl	$1, (%rsp)
	movl	%r10d, -972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-728(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -992(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-992(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-728(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 22 22 is_stmt 0       # fft.c:22:22
	movq	%rdx, -1000(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$22, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1004(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1024(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp8:
	.loc	1 22 10                 # fft.c:22:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -1032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -1033(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$22, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.27, %rdx
	movabsq	$.L.str.43, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1040(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.44, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1048(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.27, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1056(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-1033(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1033(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-1000(%rbp), %rax       # 8-byte Reload
	movq	%rax, -720(%rbp)        # 8-byte Spill
	jne	.LBB0_3
	jmp	.LBB0_2
.Ltmp9:
.LBB0_3:                                #   in Loop: Header=BB0_1 Depth=1
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 728, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp10:
	#DEBUG_VALUE: exp_1_8_x <- 1
	#DEBUG_VALUE: exp_1_8_y <- 4294967295
	#DEBUG_VALUE: exp_1_4_x <- 0
	#DEBUG_VALUE: exp_1_4_y <- 4294967295
	#DEBUG_VALUE: exp_3_8_x <- 4294967295
	#DEBUG_VALUE: exp_3_8_y <- 4294967295
	.loc	1 26 3 is_stmt 1        # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp11:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1092, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp12:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1116, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.48, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.48, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	-1092(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.49, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.48, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1200(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-1180(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1212(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.51, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movl	-1116(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.52, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1280(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1276(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1296(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-1276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.54, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	-1332(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.55, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.54, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.57, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.57, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	-1428(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1468(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.58, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.57, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-1468(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp13:
	.loc	1 26 3 is_stmt 0        # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp14:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1524, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1544(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp15:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1548, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.60, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-1524(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.61, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1632(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1632(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-1612(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.63, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	-1548(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.64, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-1708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.66, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.66, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	-1764(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.67, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.66, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-1804(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1860(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.69, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1864(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1860(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1880(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	-1860(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.70, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-1900(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp16:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -1932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1956(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp17:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1956, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1960(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1976(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1980(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp18:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1980, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1984(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2004(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.72, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2016(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2004(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.72, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2004(%rbp), %eax       # 4-byte Reload
	movl	-1956(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.73, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.72, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2044(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2100(%rbp), %eax       # 4-byte Reload
	movl	-1980(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.76, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-2140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.78, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.78, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	-2196(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.79, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.78, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-2236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.81, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.81, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	-2292(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.82, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.81, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-2332(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp19:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -2364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp20:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 2388, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2408(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp21:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 2412, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2436(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.84, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2436(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.84, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2436(%rbp), %eax       # 4-byte Reload
	movl	-2388(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.85, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.84, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-2476(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.87, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	-2412(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.88, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.87, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.89, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-2572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2624(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.90, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.90, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	-2628(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.91, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2680(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.90, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.92, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-2668(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2700(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2724(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.93, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2724(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.93, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	-2724(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.94, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.93, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp22:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -2796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2816(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2820(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.96, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp23:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 2820, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2824(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2840(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2844(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.97, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2848(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2820(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2844(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2864(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.97, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2844(%rbp), %eax       # 4-byte Reload
	movl	-2820(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2880(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2884(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.98, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2888(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.97, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2884(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2896(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2896(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.98, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-2884(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -2908(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.99, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2912(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI0_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -2920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2920(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2928(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2928(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.98, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-2908(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -2936(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2936(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.99, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI0_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-2908(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -2940(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.100, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.99, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-2940(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2952(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.100, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-2940(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.101, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2968(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.100, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2964(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2984(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.102, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-2964(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2996(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3016(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3020(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.103, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3024(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2820(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3020(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3020(%rbp), %eax       # 4-byte Reload
	movl	-2820(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3056(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.104, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.104, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3060(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3084(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.105, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3088(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI0_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3096(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3096(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3104(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3104(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3084(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3112(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.105, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI0_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-3084(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3116(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.106, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3116(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3128(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3128(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.106, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3116(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.107, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.106, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-3140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.108, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp24:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 3196, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.108, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3216(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3220(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.109, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.108, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3240(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.110, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-3220(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3252(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -3272(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -3280(%rbp)       # 8-byte Spill
	movq	-3280(%rbp), %r9        # 8-byte Reload
	movq	-3272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-3196(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.112, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-3292(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3344(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3348(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.113, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp25:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 3348, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3352(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.113, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.114, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.113, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.114, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3372(%rbp), %eax       # 4-byte Reload
	movl	-3348(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3408(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.115, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.114, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.115, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3412(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3436(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.116, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI0_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3456(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3456(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.115, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3436(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.116, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI0_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-3436(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3468(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.117, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.116, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3468(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3480(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3480(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.117, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3468(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3492(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.118, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3496(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.117, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3492(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3512(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3512(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.119, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-3492(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3544(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.120, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3568(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.120, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	-3548(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.121, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.120, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -3608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -3616(%rbp)       # 8-byte Spill
	movq	-3616(%rbp), %r9        # 8-byte Reload
	movq	-3608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.121, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-3588(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3624(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.122, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.121, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3640(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3640(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.122, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3628(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3652(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.123, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3656(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI0_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3664(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3664(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3672(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3672(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.122, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3652(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3680(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.123, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI0_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-3652(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3684(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.124, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3688(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.123, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3684(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3696(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3696(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.124, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3684(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.125, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.124, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-3708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp26:
	#DEBUG_VALUE: exp_1_44_x <- 0
	#DEBUG_VALUE: exp_1_44_y <- 4294967295
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -3740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp27:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 3764, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3784(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3788(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.126, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp28:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 3788, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3792(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3808(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3812(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.127, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3816(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3812(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3812(%rbp), %eax       # 4-byte Reload
	movl	-3764(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.128, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.129, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-3852(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3884(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.129, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3908(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.130, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3912(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.129, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3908(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3928(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3928(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3908(%rbp), %eax       # 4-byte Reload
	movl	-3788(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3948(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.131, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3952(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3960(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3948(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3968(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.132, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-3948(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3980(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4004(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.133, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4004(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4016(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.133, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	-4004(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.134, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.133, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.135, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-4044(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.135, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.136, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.135, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	-4100(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.137, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-4140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp29:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -4172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp30:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 4196, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4216(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4220(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.138, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp31:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 4220, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.138, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4240(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4244(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.139, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4248(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4256(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.138, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4244(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.139, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4244(%rbp), %eax       # 4-byte Reload
	movl	-4196(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.140, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.139, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.141, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-4284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4340(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.142, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4344(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4340(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4360(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4360(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4340(%rbp), %eax       # 4-byte Reload
	movl	-4220(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.143, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4380(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.144, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-4380(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4412(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.144, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4432(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4436(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.145, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.144, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4436(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.145, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	-4436(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.146, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.145, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.147, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-4476(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4528(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.148, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	-4532(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.149, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-4572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp32:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -4604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4624(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.151, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp33:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 4628, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.152, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-4572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -4680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -4688(%rbp)       # 8-byte Spill
	movq	-4688(%rbp), %r9        # 8-byte Reload
	movq	-4680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.152, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-4628(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4696(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4700(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.153, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4704(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.152, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4700(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-4700(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp34:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -4732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4756(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp35:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 4756, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4760(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4780(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.154, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp36:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 4780, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4784(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.154, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4800(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.155, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.154, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.155, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4804(%rbp), %eax       # 4-byte Reload
	movl	-4756(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4840(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4844(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.156, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4848(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.155, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4844(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4864(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.157, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-4844(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.157, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4896(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.158, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4912(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.157, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.158, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4900(%rbp), %eax       # 4-byte Reload
	movl	-4780(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.159, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.158, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.160, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-4940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4992(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4996(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.161, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5000(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4996(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5016(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5016(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.161, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	-4996(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5036(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.162, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5040(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.161, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5036(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5056(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5056(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.163, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-5036(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.164, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5112(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.164, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	-5092(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.165, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.164, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-5132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp37:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -5164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5184(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp38:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 5188, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5208(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.166, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp39:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 5212, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.166, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.167, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.166, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.167, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movl	-5188(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5276(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.168, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5280(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.167, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5276(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5296(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.169, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-5276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.169, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5328(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.170, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.169, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.170, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	-5212(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.171, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.170, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.172, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-5372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.172, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.173, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.172, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.173, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	-5428(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5468(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.174, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.173, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.175, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-5468(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.175, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.176, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.175, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5544(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5544(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5552(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.176, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	-5524(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5564(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.177, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5568(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.176, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5564(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5584(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-5564(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp40:
	#DEBUG_VALUE: exp_1_44_x <- 0
	#DEBUG_VALUE: exp_1_44_y <- 4294967295
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -5596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5616(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp41:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 5620, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.178, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp42:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 5644, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.178, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.179, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.178, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.179, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	-5620(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.180, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.179, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.181, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-5708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.182, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5764(%rbp), %eax       # 4-byte Reload
	movl	-5644(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.183, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.184, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-5804(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5856(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5860(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.185, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5864(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5860(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5880(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	-5860(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5896(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.186, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.187, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-5900(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.187, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5956(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.188, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5960(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.187, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5976(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5976(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.188, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	-5956(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5992(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5996(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.189, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6000(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.188, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5996(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6016(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6016(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-5996(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp43:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -6028(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6048(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp44:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 6052, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6072(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6076(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.190, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp45:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 6076, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6080(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.190, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.191, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.190, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	-6052(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.192, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.193, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-6140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.194, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6196(%rbp), %eax       # 4-byte Reload
	movl	-6076(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.195, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.196, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-6236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6288(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.197, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6304(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.197, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	-6292(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.198, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.197, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.199, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-6332(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.199, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.200, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.199, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6400(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	-6388(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6424(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.201, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6440(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-6428(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp46:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -6460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6480(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.202, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp47:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 6484, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.203, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-6428(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6528(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -6536(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -6544(%rbp)       # 8-byte Spill
	movq	-6544(%rbp), %r9        # 8-byte Reload
	movq	-6536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.203, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-6484(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6556(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.204, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6560(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.203, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6556(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6576(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-6556(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp48:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -6588(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp49:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 6612, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6632(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6636(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.205, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp50:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 6636, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6640(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6656(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6660(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.206, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6664(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6660(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6688(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6688(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6660(%rbp), %eax       # 4-byte Reload
	movl	-6612(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6696(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6700(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.207, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6704(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6700(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.208, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-6700(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6756(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.209, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6760(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6768(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6776(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6776(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6756(%rbp), %eax       # 4-byte Reload
	movl	-6636(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6796(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.210, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6800(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6796(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.211, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-6796(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6828(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.211, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6848(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.212, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.211, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6864(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	-6852(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.213, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.214, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-6892(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6944(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6948(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.215, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6952(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6948(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6968(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	-6948(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6988(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.216, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6992(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6988(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7008(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7008(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-6988(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp51:
	.loc	1 26 3                  # fft.c:26:3
	movl	$1, (%rsp)
	movl	%eax, -7020(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp52:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 7044, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -7048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7064(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.217, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp53:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 7068, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -7072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.218, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7112(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.218, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7092(%rbp), %eax       # 4-byte Reload
	movl	-7044(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.219, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.218, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.220, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-7132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7184(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.221, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7200(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7188(%rbp), %eax       # 4-byte Reload
	movl	-7068(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.222, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.223, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-7228(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7280(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.224, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.224, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	-7284(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7324(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.225, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7328(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.224, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7324(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7344(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.226, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-7324(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7376(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.227, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7380(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.227, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	-7380(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7420(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$26, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.228, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7424(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.227, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7420(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7440(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.229, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-7420(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp54:
	#DEBUG_VALUE: step1:j <- 1
	.loc	1 0 3                   # fft.c:0:3
	movl	$1, (%rsp)
	movl	%eax, -7452(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -7464(%rbp)       # 8-byte Spill
	movq	-7464(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.23, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	imulq	$7, %r10, %r11
	movq	%rdx, -7480(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7480(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movq	%r11, -7488(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.230, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movq	$-1, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -7504(%rbp)       # 8-byte Spill
	movq	-7504(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-7488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.230, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-7488(%rbp), %r10       # 8-byte Reload
	addq	$-1, %r10
.Ltmp55:
	.loc	1 30 14 is_stmt 1       # fft.c:30:14
	movq	%rdx, -7520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -7528(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$30, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.231, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.232, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -7544(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -7552(%rbp)       # 8-byte Spill
	movq	-7552(%rbp), %r9        # 8-byte Reload
	movq	-7544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, -7560(%rbp)       # 8-byte Spill
.Ltmp56:
.LBB0_4:                                #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 728, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 14 is_stmt 0        # fft.c:0:14
	movq	-7560(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.233, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 17 22 is_stmt 1       # fft.c:17:22
	movl	$1, (%rsp)
	movq	%rax, -7568(%rbp)       # 8-byte Spill
	movl	%r10d, -7572(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.234, %r8
	movabsq	$.L.str.232, %rcx
	movq	%rcx, -7584(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7584(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.44, %rdx
	movq	%rax, %rdi
	movq	%rdx, -7592(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-7592(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.44, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$32, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.235, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp57:
	#DEBUG_VALUE: step1:j <- [DW_OP_constu 7568, DW_OP_minus] [%rbp+0]
	.loc	1 32 34                 # fft.c:32:34
	movl	$1, (%rsp)
	movl	%r10d, -7596(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.230, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7528(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7608(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7608(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.235, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7528(%rbp), %rdx       # 8-byte Reload
	movq	-7568(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 32 19 is_stmt 0       # fft.c:32:19
	movq	%rdx, -7616(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$32, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.236, %rcx
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	%rax, %rdi
	movq	%rax, %r8
	movl	$1, (%rsp)
	movl	%r10d, -7620(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.235, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.237, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -7632(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7632(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.236, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-56(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7640(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$32, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.238, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7644(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.236, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7640(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7656(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.238, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.5, %r9
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-7616(%rbp), %r11       # 8-byte Reload
	movss	(%rax,%r11,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -7660(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$32, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.239, %rcx
	movl	$40, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7664(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.238, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.5, %r9
	movss	-7660(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rax, %rdi
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.239, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movss	-7660(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %r10d
	.loc	1 31 18 is_stmt 1       # fft.c:31:18
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7668(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$33, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.240, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp58:
	#DEBUG_VALUE: A_x <- [DW_OP_constu 7668, DW_OP_minus] [%rbp+0]
	.loc	1 33 19                 # fft.c:33:19
	movl	$1, (%rsp)
	movl	%r10d, -7672(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.235, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.241, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7680(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7680(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.240, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-160(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$33, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.242, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7692(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.240, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7688(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7704(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7704(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.242, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.5, %r9
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	-7616(%rbp), %r11       # 8-byte Reload
	movss	(%rax,%r11,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -7708(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$33, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.243, %rcx
	movl	$40, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7712(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.242, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.5, %r9
	movss	-7708(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rax, %rdi
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.243, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movss	-7708(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %r10d
	.loc	1 31 23                 # fft.c:31:23
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7716(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$34, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.244, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp59:
	#DEBUG_VALUE: A_y <- [DW_OP_constu 7716, DW_OP_minus] [%rbp+0]
	.loc	1 34 19                 # fft.c:34:19
	movl	$1, (%rsp)
	movl	%r10d, -7720(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7728(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7728(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7736(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$34, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7740(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.244, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7736(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7752(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7752(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-7568(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 31 28                 # fft.c:31:28
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7756(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.245, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp60:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 7756, DW_OP_minus] [%rbp+0]
	.loc	1 35 25                 # fft.c:35:25
	movl	$1, (%rsp)
	movl	%r10d, -7760(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.239, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7668(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.150, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7756(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7768(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7768(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.245, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7756(%rbp), %r10d      # 4-byte Reload
	movl	-7668(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7772(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.246, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7776(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7784(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7784(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.246, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7792(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.247, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7796(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.246, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7808(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7808(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.247, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-7568(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7812(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.248, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7816(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.243, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7716(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.247, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7812(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7824(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.248, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7812(%rbp), %r10d      # 4-byte Reload
	movl	-7716(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7828(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.249, %rcx
	movl	$13, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7832(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.248, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7828(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.245, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7772(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7840(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7840(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.249, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7772(%rbp), %r10d      # 4-byte Reload
	movl	-7828(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %r10d
	.loc	1 35 23 is_stmt 0       # fft.c:35:23
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7844(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$35, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.250, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7848(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.244, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7736(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.249, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7844(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7856(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.251, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-7568(%rbp), %r11       # 8-byte Reload
	movl	-7844(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 36 25 is_stmt 1       # fft.c:36:25
	movl	$1, (%rsp)
	movl	%r10d, -7860(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.243, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7716(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.150, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7756(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7872(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7872(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.251, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7756(%rbp), %r10d      # 4-byte Reload
	movl	-7716(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7876(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.252, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7880(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.246, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.252, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-7568(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7892(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.253, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7896(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.239, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7668(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.252, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7892(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7904(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7904(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.253, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7892(%rbp), %r10d      # 4-byte Reload
	movl	-7668(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7908(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.254, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7912(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7876(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.253, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7908(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7920(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.254, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7908(%rbp), %r10d      # 4-byte Reload
	movl	-7876(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %r10d
	.loc	1 36 23 is_stmt 0       # fft.c:36:23
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7924(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$36, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.255, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7928(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.246, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.254, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7924(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7936(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7936(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$30, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.234, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-7568(%rbp), %r11       # 8-byte Reload
	movl	-7924(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp61:
	.loc	1 30 33 is_stmt 1       # fft.c:30:33
	movl	$1, (%rsp)
	movl	%r10d, -7940(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -7952(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7952(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.233, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7960(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7960(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.234, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 30 27 is_stmt 0       # fft.c:30:27
	movq	%rdx, -7968(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$30, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.256, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7972(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -7984(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.234, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7968(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7992(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7992(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.256, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-7968(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r15b
.Ltmp62:
	.loc	1 30 14                 # fft.c:30:14
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -8000(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -8001(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$30, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.232, %rdx
	movabsq	$.L.str.257, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8008(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.258, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8016(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.232, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8024(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.256, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-8001(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -8032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8032(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-8001(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-7968(%rbp), %rax       # 8-byte Reload
	movq	%rax, -7560(%rbp)       # 8-byte Spill
	jne	.LBB0_5
	jmp	.LBB0_4
.Ltmp63:
.LBB0_5:                                #   in Loop: Header=BB0_1 Depth=1
	#DEBUG_VALUE: step1:j <- [DW_OP_constu 7568, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 728, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 14                  # fft.c:0:14
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.258, %rdx
	movabsq	$.L.str.259, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp64:
	#DEBUG_VALUE: step1:i <- 0
	movl	$1, (%rsp)
	movl	%eax, -8036(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -8048(%rbp)       # 8-byte Spill
	movq	-8048(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.23, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -8056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.259, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	shlq	$3, %r10
.Ltmp65:
	.loc	1 40 11 is_stmt 1       # fft.c:40:11
	movq	%rdx, -8064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -8072(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$40, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.258, %rdx
	movabsq	$.L.str.260, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.261, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -8088(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -8096(%rbp)       # 8-byte Spill
	movq	-8096(%rbp), %r9        # 8-byte Reload
	movq	-8088(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -8104(%rbp)       # 8-byte Spill
.Ltmp66:
.LBB0_6:                                #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step1:j <- [DW_OP_constu 7568, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movq	-8104(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.262, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 17 19 is_stmt 1       # fft.c:17:19
	movl	$1, (%rsp)
	movq	%rax, -8112(%rbp)       # 8-byte Spill
	movl	%r10d, -8116(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.263, %r8
	movabsq	$.L.str.261, %rcx
	movq	%rcx, -8128(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8128(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.258, %rdx
	movq	%rax, %rdi
	movq	%rdx, -8136(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-8136(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.258, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.264, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp67:
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 8112, DW_OP_minus] [%rbp+0]
	.loc	1 41 24                 # fft.c:41:24
	movl	$1, (%rsp)
	movl	%r10d, -8140(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -8152(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.264, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8160(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.265, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8164(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.264, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8160(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8176(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8176(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.265, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-8112(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 41 17 is_stmt 0       # fft.c:41:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -8180(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.266, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8184(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.259, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8072(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8192(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8192(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.266, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	-8072(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 41 4                  # fft.c:41:4
	movq	%rdx, -8200(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.267, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8204(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.266, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8200(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -8216(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8216(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.267, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8200(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 41 22                 # fft.c:41:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8224(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$41, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.269, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8228(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.267, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.265, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-8180(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8240(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8240(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.270, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-8200(%rbp), %r11       # 8-byte Reload
	movl	-8180(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 42 24 is_stmt 1       # fft.c:42:24
	movl	$1, (%rsp)
	movl	%r10d, -8244(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -8256(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8256(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.270, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8264(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.271, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8268(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.270, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8264(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8280(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8280(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.271, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-8112(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 42 4 is_stmt 0        # fft.c:42:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -8284(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.272, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8288(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.266, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8200(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -8296(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8296(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.272, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8200(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 42 22                 # fft.c:42:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8304(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$42, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.274, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8308(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.272, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8304(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.271, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-8284(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8320(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$40, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.263, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-8200(%rbp), %r11       # 8-byte Reload
	movl	-8284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp68:
	.loc	1 40 31 is_stmt 1       # fft.c:40:31
	movl	$1, (%rsp)
	movl	%r10d, -8324(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -8336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8336(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8344(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.263, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 40 24 is_stmt 0       # fft.c:40:24
	movq	%rdx, -8352(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$40, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.275, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8356(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -8368(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8368(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.263, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8352(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8376(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8376(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.275, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-8352(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp69:
	.loc	1 40 11                 # fft.c:40:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -8384(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8384(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -8385(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$40, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.261, %rdx
	movabsq	$.L.str.276, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8392(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.25, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8400(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8400(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.261, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8408(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8408(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.275, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-8385(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -8416(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-8385(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-8352(%rbp), %rax       # 8-byte Reload
	movq	%rax, -8104(%rbp)       # 8-byte Spill
	jne	.LBB0_7
	jmp	.LBB0_6
.Ltmp70:
.LBB0_7:                                #   in Loop: Header=BB0_1 Depth=1
	#DEBUG_VALUE: step1:j <- [DW_OP_constu 7568, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 728, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11                  # fft.c:0:11
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.25, %rdx
	movabsq	$.L.str.24, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 20 40 is_stmt 1       # fft.c:20:40
	movl	$1, (%rsp)
	movl	%eax, -8420(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -8432(%rbp)       # 8-byte Spill
	movq	-8432(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.23, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -8440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8440(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.24, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 20 26 is_stmt 0       # fft.c:20:26
	movq	%rdx, -8448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -8456(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.25, %rdx
	movabsq	$.L.str.277, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8472(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8480(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8480(%rbp), %rcx       # 8-byte Reload
	movq	-8480(%rbp), %r9        # 8-byte Reload
	movq	-8472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.24, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-8456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -8488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.277, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-8456(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp71:
	.loc	1 20 9                  # fft.c:20:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -8496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -8497(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$20, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.25, %rdx
	movabsq	$.L.str.278, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.279, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8512(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8520(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8520(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -8528(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-8528(%rbp), %r9        # 8-byte Reload
	movq	-8512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8536(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8544(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -8552(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-8552(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.277, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-8497(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -8560(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-8560(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -8568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-8497(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-8456(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	jne	.LBB0_8
	jmp	.LBB0_1
.Ltmp72:
.LBB0_8:
	#DEBUG_VALUE: step1:j <- [DW_OP_constu 7568, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:i <- [DW_OP_constu 728, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step1:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$45, %eax
	movl	%eax, %edi
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.279, %rdx
	movabsq	$.L.str.280, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 45 1 is_stmt 1        # fft.c:45:1
	movl	$1, (%rsp)
	movl	%eax, -8572(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.1, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$8552, %rsp             # imm = 0x2168
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp73:
.Lfunc_end0:
	.size	step1, .Lfunc_end0-step1
	.cfi_endproc
                                        # -- End function
	.globl	step2                   # -- Begin function step2
	.p2align	4, 0x90
	.type	step2,@function
step2:                                  # @step2
.Lfunc_begin1:
	.loc	1 54 0                  # fft.c:54:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2888, %rsp             # imm = 0xB48
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp74:
	.loc	1 46 17 prologue_end    # fft.c:46:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step2:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp75:
	#DEBUG_VALUE: step2:stride <- 64
	#DEBUG_VALUE: step2:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.287, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.287, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.288, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.288, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.290, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.290, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.291, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.291, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp76:
	.loc	1 57 9 is_stmt 1        # fft.c:57:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$57, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp77:
.LBB1_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_2 Depth 2
	#DEBUG_VALUE: step2:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.292, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 55 19 is_stmt 1       # fft.c:55:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.293, %r8
	movabsq	$.L.str.294, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp78:
	#DEBUG_VALUE: step2:i <- 0
	#DEBUG_VALUE: step2:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp79:
	.loc	1 58 10 is_stmt 1       # fft.c:58:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$58, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp80:
.LBB1_2:                                #   Parent Loop BB1_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step2:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 55 19 is_stmt 1       # fft.c:55:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$59, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp81:
	#DEBUG_VALUE: step2:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 59 29                 # fft.c:59:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 59 16 is_stmt 0       # fft.c:59:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$59, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$59, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 59 4                  # fft.c:59:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$59, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 59 14                 # fft.c:59:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$59, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$58, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp82:
	.loc	1 58 30 is_stmt 1       # fft.c:58:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 58 23 is_stmt 0       # fft.c:58:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$58, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp83:
	.loc	1 58 10                 # fft.c:58:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$58, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB1_3
	jmp	.LBB1_2
.Ltmp84:
.LBB1_3:                                #   in Loop: Header=BB1_1 Depth=1
	#DEBUG_VALUE: step2:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp85:
	.loc	1 64 3 is_stmt 1        # fft.c:64:3
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$2147483640, %eax       # imm = 0x7FFFFFF8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -768(%rbp)        # 8-byte Spill
	movq	-768(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	andq	$2147483640, %r10       # imm = 0x7FFFFFF8
.Ltmp86:
	.loc	1 63 11                 # fft.c:63:11
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-784(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -792(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$63, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -796(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	-808(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	andq	$7, %r10
.Ltmp87:
	.loc	1 64 3                  # fft.c:64:3
	movq	%rdx, -824(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-824(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -832(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.301, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -836(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -848(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-848(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -856(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-856(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -860(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.302, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -864(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-860(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -872(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-872(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-860(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -888(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-888(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -896(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.303, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -900(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-896(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-896(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-928(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -936(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -940(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-896(%rbp), %r11        # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	-960(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -964(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.305, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -968(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-976(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-992(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.306, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-964(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1036(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.307, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1060(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1096(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1096(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1096(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1136(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1160(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1160(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1164(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1168(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$66, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1176(%rbp)       # 8-byte Spill
	movq	-1176(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$66, %r10
	movq	%rdx, -1192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.309, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1200(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1240(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.310, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1244(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1164(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1164(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 264(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1300(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.311, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1304(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1300(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1300(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1336(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.312, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1340(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1336(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1376(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1336(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1400(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$132, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1416(%rbp)       # 8-byte Spill
	movq	-1416(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$132, %r10
	movq	%rdx, -1432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1440(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1472(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1480(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1480(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1404(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1404(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 528(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.287, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1536(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1540(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.316, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1544(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1540(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1540(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1576(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1576(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1616(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1616(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1576(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1640(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$198, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1656(%rbp)       # 8-byte Spill
	movq	-1656(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$198, %r10
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1680(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.317, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1712(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1720(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1644(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 792(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1756(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.288, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1780(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.319, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1784(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1792(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1792(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1780(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1816(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1820(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1816(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1856(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1860(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1856(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1816(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1880(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1880(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1884(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.322, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1888(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$264, %eax              # imm = 0x108
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1896(%rbp)       # 8-byte Spill
	movq	-1896(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-792(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-792(%rbp), %r10        # 8-byte Reload
	addq	$264, %r10              # imm = 0x108
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1920(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-832(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	-832(%rbp), %r11        # 8-byte Reload
	orq	%r11, %r10
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movq	%r10, -1960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1960(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1992(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1884(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1960(%rbp), %r11       # 8-byte Reload
	movl	-1884(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2036(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.326, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2060(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2096(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2096(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2096(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2140(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2160(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2160(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2164(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2168(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$330, %eax              # imm = 0x14A
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2176(%rbp)       # 8-byte Spill
	movq	-2176(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$330, %r10              # imm = 0x14A
	movq	%rdx, -2192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2240(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2244(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2164(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-2164(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 1320(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2276(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.290, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2296(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2300(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.329, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2304(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2300(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2300(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2336(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2340(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2376(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-2336(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2400(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$396, %eax              # imm = 0x18C
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2416(%rbp)       # 8-byte Spill
	movq	-2416(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$396, %r10              # imm = 0x18C
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2440(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2480(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2480(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2404(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.333, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-2404(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 1584(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.291, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2536(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2540(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.334, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2544(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2540(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2540(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2576(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2576(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2616(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2616(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-2576(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2640(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$462, %eax              # imm = 0x1CE
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2656(%rbp)       # 8-byte Spill
	movq	-2656(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$462, %r10              # imm = 0x1CE
	movq	%rdx, -2672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2680(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.335, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2680(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2712(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2712(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2720(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$64, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$57, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.293, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-2644(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 1848(%r10,%r11,4)
.Ltmp88:
	.loc	1 57 35                 # fft.c:57:35
	movl	$1, (%rsp)
	movl	%eax, -2756(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2768(%rbp)       # 8-byte Spill
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 57 26 is_stmt 0       # fft.c:57:26
	movq	%rdx, -2784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2792(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$57, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.337, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2808(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2816(%rbp), %rcx       # 8-byte Reload
	movq	-2816(%rbp), %r9        # 8-byte Reload
	movq	-2808(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2792(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.337, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2792(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%r15b
.Ltmp89:
	.loc	1 57 9                  # fft.c:57:9
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -2832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%r15b, -2833(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$57, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.339, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2848(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2856(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -2864(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-2864(%rbp), %r9        # 8-byte Reload
	movq	-2848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2872(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2880(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-2888(%rbp), %r9        # 8-byte Reload
	movq	-2872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.337, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-2833(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -2896(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2896(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-2833(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-2792(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB1_4
	jmp	.LBB1_1
.Ltmp90:
.LBB1_4:
	#DEBUG_VALUE: step2:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step2:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$67, %eax
	movl	%eax, %edi
	movabsq	$.L.str.285, %rsi
	movabsq	$.L.str.339, %rdx
	movabsq	$.L.str.340, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 67 1 is_stmt 1        # fft.c:67:1
	movl	$1, (%rsp)
	movl	%eax, -2908(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.285, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$2888, %rsp             # imm = 0xB48
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp91:
.Lfunc_end1:
	.size	step2, .Lfunc_end1-step2
	.cfi_endproc
                                        # -- End function
	.globl	step3                   # -- Begin function step3
	.p2align	4, 0x90
	.type	step3,@function
step3:                                  # @step3
.Lfunc_begin2:
	.loc	1 76 0                  # fft.c:76:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3048, %rsp             # imm = 0xBE8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp92:
	.loc	1 68 17 prologue_end    # fft.c:68:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp93:
	#DEBUG_VALUE: step3:stride <- 64
	#DEBUG_VALUE: step3:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.342, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.343, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.344, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.345, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp94:
	.loc	1 79 9 is_stmt 1        # fft.c:79:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$79, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp95:
.LBB2_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
                                        #     Child Loop BB2_4 Depth 2
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.346, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 77 19 is_stmt 1       # fft.c:77:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.347, %r8
	movabsq	$.L.str.348, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp96:
	#DEBUG_VALUE: step3:i <- 0
	#DEBUG_VALUE: step3:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp97:
	.loc	1 80 10 is_stmt 1       # fft.c:80:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$80, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp98:
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step3:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 77 19 is_stmt 1       # fft.c:77:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$81, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp99:
	#DEBUG_VALUE: step3:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 81 29                 # fft.c:81:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 81 16 is_stmt 0       # fft.c:81:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$81, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$81, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 81 4                  # fft.c:81:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$81, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 81 14                 # fft.c:81:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$81, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$80, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp100:
	.loc	1 80 30 is_stmt 1       # fft.c:80:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 80 23 is_stmt 0       # fft.c:80:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$80, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp101:
	.loc	1 80 10                 # fft.c:80:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$80, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB2_3
	jmp	.LBB2_2
.Ltmp102:
.LBB2_3:                                #   in Loop: Header=BB2_1 Depth=1
	#DEBUG_VALUE: step3:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 84 11 is_stmt 1       # fft.c:84:11
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$84, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.349, %rcx
	movl	$24, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -800(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-808(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	shrl	$3, %eax
.Ltmp103:
	.loc	1 77 11                 # fft.c:77:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$85, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp104:
	#DEBUG_VALUE: step3:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	.loc	1 85 11                 # fft.c:85:11
	movl	$1, (%rsp)
	movl	%eax, -824(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$85, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -848(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-864(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	andl	$7, %eax
.Ltmp105:
	.loc	1 77 15                 # fft.c:77:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.350, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp106:
	#DEBUG_VALUE: step3:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	.loc	1 86 3                  # fft.c:86:3
	movl	$1, (%rsp)
	movl	%eax, -888(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$66, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -896(%rbp)        # 8-byte Spill
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -904(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-904(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	imull	$66, %eax, %ebx
	movl	%ebx, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -924(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.351, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -928(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -944(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-960(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -964(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -968(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-992(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.352, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1040(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1044(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1064(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1088(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.353, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-1068(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.354, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$8, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1152(%rbp)       # 8-byte Spill
	movq	-1152(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	addl	$8, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1216(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1256(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1280(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1280(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.355, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1336(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1356(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.356, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1360(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1368(%rbp)       # 8-byte Spill
	movq	-1368(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1376(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	addl	$16, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1432(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1472(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1496(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1500(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1520(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.357, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	-1500(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.358, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$24, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1584(%rbp)       # 8-byte Spill
	movq	-1584(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	addl	$24, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1648(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1712(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1716(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1720(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1736(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1736(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.359, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	-1716(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1768(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1768(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1788(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.360, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1792(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -1800(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1808(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r9        # 8-byte Reload
	movq	-1800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1788(%rbp), %eax       # 4-byte Reload
	addl	$32, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1848(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1848(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1872(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.361, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1912(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1936(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.362, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	-1940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1992(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.363, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$40, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2024(%rbp)       # 8-byte Spill
	movq	-2024(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	addl	$40, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2088(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2092(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2128(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2128(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2152(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2156(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2160(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2156(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2176(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2176(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	-2156(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.364, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$48, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2240(%rbp)       # 8-byte Spill
	movq	-2240(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	addl	$48, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2272(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2280(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2280(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2304(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2344(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2368(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	-2372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2444(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.365, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2448(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$56, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2456(%rbp)       # 8-byte Spill
	movq	-2456(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	addl	$56, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2480(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2520(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.366, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2552(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2560(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2584(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$86, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.367, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2588(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp107:
	#DEBUG_VALUE: step3:i <- 0
	.loc	1 0 3 is_stmt 0         # fft.c:0:3
	movl	$1, (%rsp)
	movl	%eax, -2620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2632(%rbp)       # 8-byte Spill
	movq	-2632(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$3, %r10
.Ltmp108:
	.loc	1 87 11 is_stmt 1       # fft.c:87:11
	movq	%rdx, -2648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2656(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$87, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.368, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2672(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2688(%rbp)       # 8-byte Spill
.Ltmp109:
.LBB2_4:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step3:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movq	-2688(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.370, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 77 19 is_stmt 1       # fft.c:77:19
	movl	$1, (%rsp)
	movq	%rax, -2696(%rbp)       # 8-byte Spill
	movl	%r10d, -2700(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.371, %r8
	movabsq	$.L.str.369, %rcx
	movq	%rcx, -2712(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.294, %rdx
	movq	%rax, %rdi
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-2720(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.294, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp110:
	#DEBUG_VALUE: step3:i <- [DW_OP_constu 2696, DW_OP_minus] [%rbp+0]
	.loc	1 88 24                 # fft.c:88:24
	movl	$1, (%rsp)
	movl	%r10d, -2724(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2736(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2736(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2748(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.330, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2760(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2760(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 88 17 is_stmt 0       # fft.c:88:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -2764(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2768(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2656(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2776(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2776(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	-2656(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 88 4                  # fft.c:88:4
	movq	%rdx, -2784(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2788(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -2800(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2800(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 88 22                 # fft.c:88:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2808(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$88, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.372, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2812(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2808(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-2764(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -2824(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$87, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.371, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-2784(%rbp), %r11       # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp111:
	.loc	1 87 31 is_stmt 1       # fft.c:87:31
	movl	$1, (%rsp)
	movl	%r10d, -2828(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2840(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2840(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2848(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 87 24 is_stmt 0       # fft.c:87:24
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$87, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.373, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2860(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2872(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2872(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2880(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp112:
	.loc	1 87 11                 # fft.c:87:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -2889(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$87, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.374, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2896(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.348, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2904(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2912(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -2920(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-2856(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2688(%rbp)       # 8-byte Spill
	jne	.LBB2_5
	jmp	.LBB2_4
.Ltmp113:
.LBB2_5:                                #   in Loop: Header=BB2_1 Depth=1
	#DEBUG_VALUE: step3:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11                  # fft.c:0:11
	movl	$79, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.347, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 79 35 is_stmt 1       # fft.c:79:35
	movl	$1, (%rsp)
	movl	%eax, -2924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2936(%rbp)       # 8-byte Spill
	movq	-2936(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 79 26 is_stmt 0       # fft.c:79:26
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$79, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.375, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2976(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2984(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	movq	-2976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2960(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp114:
	.loc	1 79 9                  # fft.c:79:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -3000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -3001(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$79, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.376, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.377, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3016(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3024(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3032(%rbp), %r9        # 8-byte Reload
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3048(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3056(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3056(%rbp), %r9        # 8-byte Reload
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-3001(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3064(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3001(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-2960(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB2_6
	jmp	.LBB2_1
.Ltmp115:
.LBB2_6:
	#DEBUG_VALUE: step3:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step3:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$92, %eax
	movl	%eax, %edi
	movabsq	$.L.str.341, %rsi
	movabsq	$.L.str.377, %rdx
	movabsq	$.L.str.378, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 92 1 is_stmt 1        # fft.c:92:1
	movl	$1, (%rsp)
	movl	%eax, -3076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.341, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$3048, %rsp             # imm = 0xBE8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp116:
.Lfunc_end2:
	.size	step3, .Lfunc_end2-step3
	.cfi_endproc
                                        # -- End function
	.globl	step4                   # -- Begin function step4
	.p2align	4, 0x90
	.type	step4,@function
step4:                                  # @step4
.Lfunc_begin3:
	.loc	1 101 0                 # fft.c:101:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2888, %rsp             # imm = 0xB48
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp117:
	.loc	1 93 17 prologue_end    # fft.c:93:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step4:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp118:
	#DEBUG_VALUE: step4:stride <- 64
	#DEBUG_VALUE: step4:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.287, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.287, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.288, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.288, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.290, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.290, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.291, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.291, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp119:
	.loc	1 104 9 is_stmt 1       # fft.c:104:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$104, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp120:
.LBB3_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_2 Depth 2
	#DEBUG_VALUE: step4:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.292, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 102 19 is_stmt 1      # fft.c:102:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.293, %r8
	movabsq	$.L.str.294, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp121:
	#DEBUG_VALUE: step4:i <- 0
	#DEBUG_VALUE: step4:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp122:
	.loc	1 105 10 is_stmt 1      # fft.c:105:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$105, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp123:
.LBB3_2:                                #   Parent Loop BB3_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step4:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 102 19 is_stmt 1      # fft.c:102:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$107, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp124:
	#DEBUG_VALUE: step4:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 107 29                # fft.c:107:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 107 16 is_stmt 0      # fft.c:107:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$107, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$107, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 107 4                 # fft.c:107:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$107, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 107 14                # fft.c:107:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$107, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$105, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp125:
	.loc	1 105 30 is_stmt 1      # fft.c:105:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 105 23 is_stmt 0      # fft.c:105:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$105, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp126:
	.loc	1 105 10                # fft.c:105:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$105, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB3_3
	jmp	.LBB3_2
.Ltmp127:
.LBB3_3:                                #   in Loop: Header=BB3_1 Depth=1
	#DEBUG_VALUE: step4:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp128:
	.loc	1 111 3 is_stmt 1       # fft.c:111:3
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$2147483640, %eax       # imm = 0x7FFFFFF8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -768(%rbp)        # 8-byte Spill
	movq	-768(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	andq	$2147483640, %r10       # imm = 0x7FFFFFF8
.Ltmp129:
	.loc	1 110 11                # fft.c:110:11
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-784(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -792(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$110, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -796(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	-808(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	andq	$7, %r10
.Ltmp130:
	.loc	1 111 3                 # fft.c:111:3
	movq	%rdx, -824(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-824(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -832(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.301, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -836(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -848(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-848(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -856(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-856(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -860(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.302, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -864(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-860(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -872(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-872(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-860(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -888(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-888(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -896(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.303, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -900(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-896(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-896(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-928(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -936(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -940(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-896(%rbp), %r11        # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	-960(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -964(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.305, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -968(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-976(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-992(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.306, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-964(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1036(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.307, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1060(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1096(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1096(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1096(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1136(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1160(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1160(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1164(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1168(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$66, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1176(%rbp)       # 8-byte Spill
	movq	-1176(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$66, %r10
	movq	%rdx, -1192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.309, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1200(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1240(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.310, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1244(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1164(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1164(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 264(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1300(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.311, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1304(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1300(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1300(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1336(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.312, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1340(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1336(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1376(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1336(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1400(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$132, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1416(%rbp)       # 8-byte Spill
	movq	-1416(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$132, %r10
	movq	%rdx, -1432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1440(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1472(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1480(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1480(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1404(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1404(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 528(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.287, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1536(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1540(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.316, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1544(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1540(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1540(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1576(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1576(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1616(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1616(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1576(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1640(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$198, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1656(%rbp)       # 8-byte Spill
	movq	-1656(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$198, %r10
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1680(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.317, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1712(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1720(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1644(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 792(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1756(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.288, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1780(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.319, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1784(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1792(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1792(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1780(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1816(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1820(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1816(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1856(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1860(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1856(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1816(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1880(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1880(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1884(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.322, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1888(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$264, %eax              # imm = 0x108
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1896(%rbp)       # 8-byte Spill
	movq	-1896(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-792(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-792(%rbp), %r10        # 8-byte Reload
	addq	$264, %r10              # imm = 0x108
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1920(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-832(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	-832(%rbp), %r11        # 8-byte Reload
	orq	%r11, %r10
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movq	%r10, -1960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1960(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1992(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1884(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1960(%rbp), %r11       # 8-byte Reload
	movl	-1884(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2036(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.326, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2060(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2096(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2096(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2096(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2140(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2160(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2160(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2164(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2168(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$330, %eax              # imm = 0x14A
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2176(%rbp)       # 8-byte Spill
	movq	-2176(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$330, %r10              # imm = 0x14A
	movq	%rdx, -2192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2204(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2240(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2244(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2164(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-2164(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 1320(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2276(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.290, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2296(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2300(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.329, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2304(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2300(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2300(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2336(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2340(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2376(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2380(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-2336(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2400(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$396, %eax              # imm = 0x18C
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2416(%rbp)       # 8-byte Spill
	movq	-2416(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$396, %r10              # imm = 0x18C
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2440(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2444(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2480(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2480(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2404(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.333, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-2404(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 1584(%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.291, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2536(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2540(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.334, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2544(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2540(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2540(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2576(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2576(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2616(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2616(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-2576(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2640(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$462, %eax              # imm = 0x1CE
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2656(%rbp)       # 8-byte Spill
	movq	-2656(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$462, %r10              # imm = 0x1CE
	movq	%rdx, -2672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2680(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.335, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2680(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2712(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2712(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2720(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$111, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$104, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.293, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-2644(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, 1848(%r10,%r11,4)
.Ltmp131:
	.loc	1 104 35                # fft.c:104:35
	movl	$1, (%rsp)
	movl	%eax, -2756(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2768(%rbp)       # 8-byte Spill
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 104 26 is_stmt 0      # fft.c:104:26
	movq	%rdx, -2784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2792(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$104, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.337, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2808(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2816(%rbp), %rcx       # 8-byte Reload
	movq	-2816(%rbp), %r9        # 8-byte Reload
	movq	-2808(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2792(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.337, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2792(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%r15b
.Ltmp132:
	.loc	1 104 9                 # fft.c:104:9
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -2832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%r15b, -2833(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$104, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.339, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2848(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2856(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -2864(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-2864(%rbp), %r9        # 8-byte Reload
	movq	-2848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2872(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2880(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-2888(%rbp), %r9        # 8-byte Reload
	movq	-2872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.337, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-2833(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -2896(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2896(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-2833(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-2792(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB3_4
	jmp	.LBB3_1
.Ltmp133:
.LBB3_4:
	#DEBUG_VALUE: step4:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step4:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$113, %eax
	movl	%eax, %edi
	movabsq	$.L.str.379, %rsi
	movabsq	$.L.str.339, %rdx
	movabsq	$.L.str.340, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 113 1 is_stmt 1       # fft.c:113:1
	movl	$1, (%rsp)
	movl	%eax, -2908(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.379, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$2888, %rsp             # imm = 0xB48
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp134:
.Lfunc_end3:
	.size	step4, .Lfunc_end3-step4
	.cfi_endproc
                                        # -- End function
	.globl	step5                   # -- Begin function step5
	.p2align	4, 0x90
	.type	step5,@function
step5:                                  # @step5
.Lfunc_begin4:
	.loc	1 122 0                 # fft.c:122:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3048, %rsp             # imm = 0xBE8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp135:
	.loc	1 114 17 prologue_end   # fft.c:114:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp136:
	#DEBUG_VALUE: step5:stride <- 64
	#DEBUG_VALUE: step5:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.342, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.343, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.344, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.345, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp137:
	.loc	1 126 9 is_stmt 1       # fft.c:126:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$126, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp138:
.LBB4_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_2 Depth 2
                                        #     Child Loop BB4_4 Depth 2
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.346, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 124 19 is_stmt 1      # fft.c:124:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.347, %r8
	movabsq	$.L.str.348, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp139:
	#DEBUG_VALUE: step5:i <- 0
	#DEBUG_VALUE: step5:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp140:
	.loc	1 127 10 is_stmt 1      # fft.c:127:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$127, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp141:
.LBB4_2:                                #   Parent Loop BB4_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step5:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 124 19 is_stmt 1      # fft.c:124:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$129, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp142:
	#DEBUG_VALUE: step5:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 129 29                # fft.c:129:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 129 16 is_stmt 0      # fft.c:129:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$129, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$129, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 129 4                 # fft.c:129:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$129, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 129 14                # fft.c:129:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$129, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$127, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp143:
	.loc	1 127 30 is_stmt 1      # fft.c:127:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 127 23 is_stmt 0      # fft.c:127:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$127, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp144:
	.loc	1 127 10                # fft.c:127:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$127, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB4_3
	jmp	.LBB4_2
.Ltmp145:
.LBB4_3:                                #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: step5:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$131, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 131 11 is_stmt 1      # fft.c:131:11
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$131, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.349, %rcx
	movl	$24, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -800(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-808(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	shrl	$3, %eax
.Ltmp146:
	.loc	1 124 11                # fft.c:124:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$132, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp147:
	#DEBUG_VALUE: step5:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	.loc	1 132 11                # fft.c:132:11
	movl	$1, (%rsp)
	movl	%eax, -824(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$132, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -848(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-864(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	andl	$7, %eax
.Ltmp148:
	.loc	1 124 15                # fft.c:124:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.350, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp149:
	#DEBUG_VALUE: step5:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	.loc	1 133 3                 # fft.c:133:3
	movl	$1, (%rsp)
	movl	%eax, -888(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$66, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -896(%rbp)        # 8-byte Spill
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -904(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-904(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	imull	$66, %eax, %ebx
	movl	%ebx, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -924(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.351, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -928(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -944(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-960(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -964(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -968(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-992(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.352, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1040(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1044(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1064(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1088(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.353, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-1068(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.354, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$8, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1152(%rbp)       # 8-byte Spill
	movq	-1152(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	addl	$8, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1216(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1256(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1280(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1280(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.355, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1336(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1356(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.356, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1360(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1368(%rbp)       # 8-byte Spill
	movq	-1368(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1376(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	addl	$16, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1432(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1472(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1496(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1500(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1520(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.357, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	-1500(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.358, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$24, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1584(%rbp)       # 8-byte Spill
	movq	-1584(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	addl	$24, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1648(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1712(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1716(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1720(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1736(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1736(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.359, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	-1716(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1768(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1768(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1788(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.360, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1792(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -1800(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1808(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r9        # 8-byte Reload
	movq	-1800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1788(%rbp), %eax       # 4-byte Reload
	addl	$32, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1848(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1848(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1872(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.361, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1912(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1936(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.362, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	-1940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1992(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.363, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$40, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2024(%rbp)       # 8-byte Spill
	movq	-2024(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	addl	$40, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2088(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2092(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2128(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2128(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2152(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2156(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2160(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2156(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2176(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2176(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	-2156(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2200(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.364, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$48, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2240(%rbp)       # 8-byte Spill
	movq	-2240(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	addl	$48, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2272(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2280(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2280(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2304(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2344(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2368(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	-2372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-820(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2444(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.365, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2448(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$56, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2456(%rbp)       # 8-byte Spill
	movq	-2456(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	addl	$56, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2480(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2520(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.366, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2552(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2560(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2584(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$133, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.367, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2588(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp150:
	#DEBUG_VALUE: step5:i <- 0
	.loc	1 0 3 is_stmt 0         # fft.c:0:3
	movl	$1, (%rsp)
	movl	%eax, -2620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2632(%rbp)       # 8-byte Spill
	movq	-2632(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$3, %r10
.Ltmp151:
	.loc	1 134 11 is_stmt 1      # fft.c:134:11
	movq	%rdx, -2648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2656(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$134, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.368, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2672(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2688(%rbp)       # 8-byte Spill
.Ltmp152:
.LBB4_4:                                #   Parent Loop BB4_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step5:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movq	-2688(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.370, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 124 19 is_stmt 1      # fft.c:124:19
	movl	$1, (%rsp)
	movq	%rax, -2696(%rbp)       # 8-byte Spill
	movl	%r10d, -2700(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.371, %r8
	movabsq	$.L.str.369, %rcx
	movq	%rcx, -2712(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.294, %rdx
	movq	%rax, %rdi
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-2720(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.294, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp153:
	#DEBUG_VALUE: step5:i <- [DW_OP_constu 2696, DW_OP_minus] [%rbp+0]
	.loc	1 136 24                # fft.c:136:24
	movl	$1, (%rsp)
	movl	%r10d, -2724(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2736(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2736(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2748(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.330, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2760(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2760(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 136 17 is_stmt 0      # fft.c:136:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -2764(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2768(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2656(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2776(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2776(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	-2656(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 136 4                 # fft.c:136:4
	movq	%rdx, -2784(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2788(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2800(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2800(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 136 22                # fft.c:136:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2808(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$136, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.372, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2812(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2808(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-2764(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -2824(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$134, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.371, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-2784(%rbp), %r11       # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp154:
	.loc	1 134 31 is_stmt 1      # fft.c:134:31
	movl	$1, (%rsp)
	movl	%r10d, -2828(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2840(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2840(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2848(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 134 24 is_stmt 0      # fft.c:134:24
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$134, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.373, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2860(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2872(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2872(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2880(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp155:
	.loc	1 134 11                # fft.c:134:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -2889(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$134, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.374, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2896(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.348, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2904(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2912(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -2920(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-2856(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2688(%rbp)       # 8-byte Spill
	jne	.LBB4_5
	jmp	.LBB4_4
.Ltmp156:
.LBB4_5:                                #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: step5:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11                  # fft.c:0:11
	movl	$126, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.347, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 126 35 is_stmt 1      # fft.c:126:35
	movl	$1, (%rsp)
	movl	%eax, -2924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2936(%rbp)       # 8-byte Spill
	movq	-2936(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 126 26 is_stmt 0      # fft.c:126:26
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$126, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.375, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2976(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2984(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	movq	-2976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2960(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp157:
	.loc	1 126 9                 # fft.c:126:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -3000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -3001(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$126, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.376, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.377, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3016(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3024(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3032(%rbp), %r9        # 8-byte Reload
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3048(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3056(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3056(%rbp), %r9        # 8-byte Reload
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-3001(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3064(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3001(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-2960(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB4_6
	jmp	.LBB4_1
.Ltmp158:
.LBB4_6:
	#DEBUG_VALUE: step5:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step5:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$140, %eax
	movl	%eax, %edi
	movabsq	$.L.str.380, %rsi
	movabsq	$.L.str.377, %rdx
	movabsq	$.L.str.378, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 140 1 is_stmt 1       # fft.c:140:1
	movl	$1, (%rsp)
	movl	%eax, -3076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.380, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$3048, %rsp             # imm = 0xBE8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp159:
.Lfunc_end4:
	.size	step5, .Lfunc_end4-step5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function step6
.LCPI5_0:
	.long	1060439283              # float 0.707106769
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI5_1:
	.quad	4604544271108800512     # double 0.70710676908493042
	.text
	.globl	step6
	.p2align	4, 0x90
	.type	step6,@function
step6:                                  # @step6
.Lfunc_begin5:
	.loc	1 149 0                 # fft.c:149:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$8648, %rsp             # imm = 0x21C8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp160:
	.loc	1 141 17 prologue_end   # fft.c:141:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp161:
	#DEBUG_VALUE: step6:stride <- 64
	#DEBUG_VALUE: step6:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.9, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -228(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.13, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	-376(%rbp), %r9         # 8-byte Reload
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.14, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.17, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp162:
	.loc	1 153 9 is_stmt 1       # fft.c:153:9
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$153, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -628(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -656(%rbp)        # 8-byte Spill
.Ltmp163:
.LBB5_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_2 Depth 2
                                        #     Child Loop BB5_4 Depth 2
                                        #     Child Loop BB5_6 Depth 2
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.23, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 150 19 is_stmt 1      # fft.c:150:19
	movl	$1, (%rsp)
	movq	%rax, -664(%rbp)        # 8-byte Spill
	movl	%r10d, -668(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.24, %r8
	movabsq	$.L.str.382, %rcx
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.23, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp164:
	#DEBUG_VALUE: step6:i <- 0
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.23, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp165:
	.loc	1 155 10 is_stmt 1      # fft.c:155:10
	movq	%rdx, -720(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$155, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-744(%rbp), %r9         # 8-byte Reload
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -752(%rbp)        # 8-byte Spill
.Ltmp166:
.LBB5_2:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 150 19 is_stmt 1      # fft.c:150:19
	movl	$1, (%rsp)
	movq	%rax, -760(%rbp)        # 8-byte Spill
	movl	%r10d, -764(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$156, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp167:
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	.loc	1 156 29                # fft.c:156:29
	movl	$1, (%rsp)
	movl	%r10d, -788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-720(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	-720(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 156 16 is_stmt 0      # fft.c:156:16
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$156, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -812(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -832(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$156, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-832(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 156 4                 # fft.c:156:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$156, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -864(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 156 14                # fft.c:156:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -872(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$156, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-872(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-852(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$157, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.37, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-760(%rbp), %r11        # 8-byte Reload
	movl	-852(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 157 16 is_stmt 1      # fft.c:157:16
	movl	$1, (%rsp)
	movl	%r10d, -892(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -912(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$157, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.39, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-912(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.39, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 157 4 is_stmt 0       # fft.c:157:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -932(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$157, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.40, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -936(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -944(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 157 14                # fft.c:157:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -952(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$157, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -956(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.39, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-932(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -968(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$155, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-760(%rbp), %r11        # 8-byte Reload
	movl	-932(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp168:
	.loc	1 155 30 is_stmt 1      # fft.c:155:30
	movl	$1, (%rsp)
	movl	%r10d, -972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -992(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-992(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 155 23 is_stmt 0      # fft.c:155:23
	movq	%rdx, -1000(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$155, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1004(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1024(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp169:
	.loc	1 155 10                # fft.c:155:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -1032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -1033(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$155, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.383, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1040(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.44, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1048(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1056(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-1033(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1033(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-1000(%rbp), %rax       # 8-byte Reload
	movq	%rax, -752(%rbp)        # 8-byte Spill
	jne	.LBB5_3
	jmp	.LBB5_2
.Ltmp170:
.LBB5_3:                                #   in Loop: Header=BB5_1 Depth=1
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp171:
	#DEBUG_VALUE: exp_1_8_x <- 1
	#DEBUG_VALUE: exp_1_8_y <- 4294967295
	#DEBUG_VALUE: exp_1_4_x <- 0
	#DEBUG_VALUE: exp_1_4_y <- 4294967295
	#DEBUG_VALUE: exp_3_8_x <- 4294967295
	#DEBUG_VALUE: exp_3_8_y <- 4294967295
	.loc	1 161 3 is_stmt 1       # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp172:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1092, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp173:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1116, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.48, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.48, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	-1092(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.49, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.48, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1200(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-1180(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1212(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.51, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movl	-1116(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.52, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1280(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1276(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1296(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-1276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.54, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	-1332(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.55, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.54, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.57, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.57, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	-1428(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1468(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.58, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.57, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-1468(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp174:
	.loc	1 161 3 is_stmt 0       # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp175:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1524, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1544(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp176:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1548, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.60, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-1524(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.61, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1632(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1632(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-1612(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.63, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	-1548(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.64, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-1708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.66, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.66, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	-1764(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.67, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.66, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-1804(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1860(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.69, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1864(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1860(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1880(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	-1860(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.70, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-1900(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp177:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -1932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1956(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp178:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1956, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1960(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1976(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1980(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp179:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1980, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1984(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2004(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.72, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2016(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2004(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.72, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2004(%rbp), %eax       # 4-byte Reload
	movl	-1956(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.73, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.72, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2044(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2100(%rbp), %eax       # 4-byte Reload
	movl	-1980(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.76, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-2140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.78, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.78, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	-2196(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.79, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.78, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-2236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.81, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.81, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	-2292(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.82, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.81, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-2332(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp180:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -2364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp181:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 2388, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2408(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp182:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 2412, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2436(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.84, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2436(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.84, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2436(%rbp), %eax       # 4-byte Reload
	movl	-2388(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.85, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.84, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-2476(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.87, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	-2412(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.88, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.87, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.89, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-2572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2624(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.90, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.90, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	-2628(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.91, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2680(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.90, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.92, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-2668(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2700(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2724(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.93, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2724(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.93, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	-2724(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.94, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.93, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp183:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -2796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2816(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2820(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.96, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp184:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 2820, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2824(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2840(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2844(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.97, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2848(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2820(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2844(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2864(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.97, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2844(%rbp), %eax       # 4-byte Reload
	movl	-2820(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2880(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2884(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.98, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2888(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.97, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2884(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2896(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2896(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.98, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-2884(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -2908(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.99, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2912(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI5_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -2920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2920(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2928(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2928(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.98, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-2908(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -2936(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2936(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.99, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-2908(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -2940(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.100, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.99, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-2940(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2952(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.100, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-2940(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.101, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2968(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.100, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2964(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2984(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.102, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-2964(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2996(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3016(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3020(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.103, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3024(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2820(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3020(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3020(%rbp), %eax       # 4-byte Reload
	movl	-2820(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3056(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.104, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.104, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3060(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3084(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.105, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3088(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI5_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3096(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3096(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3104(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3104(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3084(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3112(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.105, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-3084(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3116(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.106, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3116(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3128(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3128(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.106, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3116(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.107, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.106, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-3140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.108, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp185:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 3196, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.108, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3216(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3220(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.109, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.108, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3240(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.110, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-3220(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3252(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -3272(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -3280(%rbp)       # 8-byte Spill
	movq	-3280(%rbp), %r9        # 8-byte Reload
	movq	-3272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-3196(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.112, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-3292(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3344(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3348(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.113, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp186:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 3348, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3352(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.113, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.114, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.113, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.114, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3372(%rbp), %eax       # 4-byte Reload
	movl	-3348(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3408(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.115, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.114, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.115, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3412(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3436(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.116, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI5_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3456(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3456(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.115, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3436(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.116, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-3436(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3468(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.117, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.116, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3468(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3480(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3480(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.117, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3468(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3492(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.118, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3496(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.117, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3492(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3512(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3512(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.119, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-3492(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3544(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.120, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3568(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.120, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	-3548(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.121, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.120, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -3608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -3616(%rbp)       # 8-byte Spill
	movq	-3616(%rbp), %r9        # 8-byte Reload
	movq	-3608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.121, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-3588(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3624(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.122, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.121, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3640(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3640(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.122, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3628(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3652(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.123, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3656(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI5_1(%rip), %xmm0   # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3664(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3664(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3672(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3672(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.122, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3652(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3680(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.123, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	-3652(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3684(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.124, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3688(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.123, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3684(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3696(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3696(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.124, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3684(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.125, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.124, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-3708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp187:
	#DEBUG_VALUE: exp_1_44_x <- 0
	#DEBUG_VALUE: exp_1_44_y <- 4294967295
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -3740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp188:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 3764, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3784(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3788(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.126, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp189:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 3788, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3792(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3808(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3812(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.127, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3816(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3812(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3812(%rbp), %eax       # 4-byte Reload
	movl	-3764(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.128, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.129, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-3852(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3884(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.129, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3908(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.130, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3912(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.129, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3908(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3928(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3928(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3908(%rbp), %eax       # 4-byte Reload
	movl	-3788(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3948(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.131, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3952(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3960(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3948(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3968(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.132, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-3948(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3980(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4004(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.133, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4004(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4016(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.133, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	-4004(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.134, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.133, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.135, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-4044(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.135, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.136, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.135, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	-4100(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.137, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-4140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp190:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -4172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp191:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 4196, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4216(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4220(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.138, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp192:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 4220, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.138, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4240(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4244(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.139, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4248(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4256(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.138, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4244(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.139, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4244(%rbp), %eax       # 4-byte Reload
	movl	-4196(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.140, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.139, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.141, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-4284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4340(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.142, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4344(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4340(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4360(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4360(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4340(%rbp), %eax       # 4-byte Reload
	movl	-4220(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.143, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4380(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.144, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-4380(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4412(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.144, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4432(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4436(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.145, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.144, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4436(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.145, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	-4436(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.146, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.145, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.147, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-4476(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4528(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.148, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	-4532(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.149, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-4572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp193:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -4604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4624(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.151, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp194:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 4628, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.152, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-4572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -4680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -4688(%rbp)       # 8-byte Spill
	movq	-4688(%rbp), %r9        # 8-byte Reload
	movq	-4680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.152, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-4628(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4696(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4700(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.153, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4704(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.152, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4700(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-4700(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp195:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -4732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4756(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp196:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 4756, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4760(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4780(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.154, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp197:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 4780, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4784(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.154, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4800(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.155, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.154, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.155, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4804(%rbp), %eax       # 4-byte Reload
	movl	-4756(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4840(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4844(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.156, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4848(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.155, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4844(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4864(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.157, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-4844(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.157, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4896(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.158, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4912(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.157, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.158, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4900(%rbp), %eax       # 4-byte Reload
	movl	-4780(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.159, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.158, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.160, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-4940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4992(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4996(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.161, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5000(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4996(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5016(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5016(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.161, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	-4996(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5036(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.162, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5040(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.161, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5036(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5056(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5056(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.163, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-5036(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.164, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5112(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.164, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	-5092(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.165, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.164, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-5132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp198:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -5164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5184(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp199:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 5188, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5208(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.166, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp200:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 5212, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.166, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.167, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.166, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.167, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movl	-5188(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5276(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.168, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5280(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.167, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5276(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5296(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.169, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-5276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.169, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5328(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.170, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.169, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.170, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	-5212(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.171, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.170, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.172, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-5372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.172, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.173, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.172, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.173, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	-5428(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5468(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.174, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.173, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.175, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-5468(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.175, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.176, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.175, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5544(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5544(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5552(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.176, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	-5524(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5564(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.177, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5568(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.176, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5564(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5584(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-5564(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp201:
	#DEBUG_VALUE: exp_1_44_x <- 0
	#DEBUG_VALUE: exp_1_44_y <- 4294967295
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -5596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5616(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp202:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 5620, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.178, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp203:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 5644, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.178, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.179, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.178, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.179, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	-5620(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.180, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.179, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.181, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-5708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.182, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5764(%rbp), %eax       # 4-byte Reload
	movl	-5644(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.183, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.184, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-5804(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5856(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5860(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.185, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5864(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5860(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5880(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	-5860(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5896(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.186, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.187, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-5900(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.187, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5956(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.188, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5960(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.187, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5976(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5976(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.188, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	-5956(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5992(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5996(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.189, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6000(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.188, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5996(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6016(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6016(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-5996(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp204:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -6028(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6048(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp205:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 6052, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6072(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6076(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.190, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp206:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 6076, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6080(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.190, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.191, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.190, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	-6052(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.192, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.193, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-6140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.194, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6196(%rbp), %eax       # 4-byte Reload
	movl	-6076(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.195, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.196, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-6236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6288(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.197, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6304(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.197, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	-6292(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.198, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.197, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.199, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-6332(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.199, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.200, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.199, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6400(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	-6388(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6424(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.201, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6440(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-6428(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp207:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -6460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6480(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.202, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp208:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 6484, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.203, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-6428(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6528(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -6536(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -6544(%rbp)       # 8-byte Spill
	movq	-6544(%rbp), %r9        # 8-byte Reload
	movq	-6536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.203, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-6484(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6556(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.204, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6560(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.203, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6556(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6576(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-6556(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp209:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -6588(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp210:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 6612, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6632(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6636(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.205, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp211:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 6636, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6640(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6656(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6660(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.206, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6664(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6660(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6688(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6688(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6660(%rbp), %eax       # 4-byte Reload
	movl	-6612(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6696(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6700(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.207, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6704(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6700(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.208, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-6700(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6756(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.209, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6760(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6768(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6776(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6776(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6756(%rbp), %eax       # 4-byte Reload
	movl	-6636(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6796(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.210, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6800(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6796(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.211, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-6796(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6828(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.211, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6848(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.212, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.211, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6864(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	-6852(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.213, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.214, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-6892(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6944(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6948(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.215, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6952(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6948(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6968(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	-6948(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6988(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.216, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6992(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6988(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7008(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7008(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-6988(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp212:
	.loc	1 161 3                 # fft.c:161:3
	movl	$1, (%rsp)
	movl	%eax, -7020(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp213:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 7044, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -7048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7064(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.217, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp214:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 7068, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -7072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.218, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7112(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.218, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7092(%rbp), %eax       # 4-byte Reload
	movl	-7044(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.219, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.218, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.220, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-7132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7184(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.221, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7200(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7188(%rbp), %eax       # 4-byte Reload
	movl	-7068(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.222, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.223, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-7228(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7280(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.224, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.224, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	-7284(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7324(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.225, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7328(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.224, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7324(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7344(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.226, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-7324(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7376(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.227, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7380(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.227, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	-7380(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7420(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$161, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.228, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7424(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.227, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7420(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7440(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$164, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.229, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-7420(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp215:
	.loc	1 164 11 is_stmt 1      # fft.c:164:11
	movl	$1, (%rsp)
	movl	%eax, -7452(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.23, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7472(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$164, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.349, %rcx
	movl	$24, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -7488(%rbp)       # 8-byte Spill
	movq	-7488(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.229, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7476(%rbp), %eax       # 4-byte Reload
	shrl	$3, %eax
.Ltmp216:
	.loc	1 150 11                # fft.c:150:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7512(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7516(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.384, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp217:
	#DEBUG_VALUE: step6:hi <- [DW_OP_constu 7516, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:j <- 1
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movl	$1, (%rsp)
	movl	%eax, -7520(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -7528(%rbp)       # 8-byte Spill
	movq	-7528(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7516(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7536(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7536(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.384, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7516(%rbp), %eax       # 4-byte Reload
	imull	$7, %eax, %ebx
	movl	%ebx, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -7556(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.385, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7560(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.386, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.384, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7556(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7568(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7568(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.385, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7556(%rbp), %eax       # 4-byte Reload
	addl	$-1, %eax
.Ltmp218:
	.loc	1 168 15 is_stmt 1      # fft.c:168:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$168, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.387, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.385, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7600(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7600(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.387, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7588(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -7616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -7624(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$168, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.388, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7628(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.389, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -7640(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -7648(%rbp)       # 8-byte Spill
	movq	-7648(%rbp), %r9        # 8-byte Reload
	movq	-7640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, -7656(%rbp)       # 8-byte Spill
.Ltmp219:
.LBB5_4:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step6:hi <- [DW_OP_constu 7516, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 15 is_stmt 0        # fft.c:0:15
	movq	-7656(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.233, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 150 22 is_stmt 1      # fft.c:150:22
	movl	$1, (%rsp)
	movq	%rax, -7664(%rbp)       # 8-byte Spill
	movl	%r10d, -7668(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.234, %r8
	movabsq	$.L.str.389, %rcx
	movq	%rcx, -7680(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7680(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.44, %rdx
	movq	%rax, %rdi
	movq	%rdx, -7688(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-7688(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.44, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$170, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.238, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp220:
	#DEBUG_VALUE: step6:j <- [DW_OP_constu 7664, DW_OP_minus] [%rbp+0]
	.loc	1 170 32                # fft.c:170:32
	movl	$1, (%rsp)
	movl	%r10d, -7692(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.387, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7624(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.233, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7704(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7704(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.238, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	-7624(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 170 19 is_stmt 0      # fft.c:170:19
	movq	%rdx, -7712(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$170, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.236, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7716(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.238, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7712(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.284, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7728(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7728(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.236, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7712(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-136(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7736(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$170, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.242, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7740(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.236, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7736(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7752(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7752(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.242, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.5, %r9
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	-7712(%rbp), %r11       # 8-byte Reload
	movss	(%rax,%r11,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -7756(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$170, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.239, %rcx
	movl	$40, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7760(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.242, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.5, %r9
	movss	-7756(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rax, %rdi
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.239, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movss	-7756(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %r10d
	.loc	1 169 18 is_stmt 1      # fft.c:169:18
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7764(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$171, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.240, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp221:
	#DEBUG_VALUE: A_x <- [DW_OP_constu 7764, DW_OP_minus] [%rbp+0]
	.loc	1 171 19                # fft.c:171:19
	movl	$1, (%rsp)
	movl	%r10d, -7768(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.238, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7712(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.283, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7776(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7776(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.240, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7712(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-144(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7784(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$171, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.390, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7788(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.240, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7784(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7800(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7800(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %edx
	movabsq	$.L.str.390, %rcx
	xorl	%r10d, %r10d
	movl	%r10d, %r8d
	movabsq	$.L.str.5, %r9
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-7712(%rbp), %r11       # 8-byte Reload
	movss	(%rax,%r11,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -7804(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$171, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.243, %rcx
	movl	$40, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7808(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.390, %rcx
	xorl	%r9d, %r9d
	movl	%r9d, %r8d
	movabsq	$.L.str.5, %r9
	movss	-7804(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rax, %rdi
	movq	%rax, %rdx
	callq	trace_logger_log_double
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.243, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movss	-7804(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %r10d
	.loc	1 169 23                # fft.c:169:23
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7812(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$172, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.244, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp222:
	#DEBUG_VALUE: A_y <- [DW_OP_constu 7812, DW_OP_minus] [%rbp+0]
	.loc	1 172 19                # fft.c:172:19
	movl	$1, (%rsp)
	movl	%r10d, -7816(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7824(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.244, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7832(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$172, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7836(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.244, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7832(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7848(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-7664(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 169 28                # fft.c:169:28
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7852(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$173, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.245, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp223:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 7852, DW_OP_minus] [%rbp+0]
	.loc	1 173 25                # fft.c:173:25
	movl	$1, (%rsp)
	movl	%r10d, -7856(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.239, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7764(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.150, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7852(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7864(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7864(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.245, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7852(%rbp), %r10d      # 4-byte Reload
	movl	-7764(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7868(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$173, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.246, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7872(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.233, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7880(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.246, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7888(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$173, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.252, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7892(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.246, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7888(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7904(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7904(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.252, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-7664(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7908(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$173, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.248, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7912(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.243, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7812(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.252, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7908(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7920(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.248, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7908(%rbp), %r10d      # 4-byte Reload
	movl	-7812(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7924(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$173, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.249, %rcx
	movl	$13, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7928(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.248, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7924(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.245, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7868(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7936(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7936(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.249, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7868(%rbp), %r10d      # 4-byte Reload
	movl	-7924(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %r10d
	.loc	1 173 23 is_stmt 0      # fft.c:173:23
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7940(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$173, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.391, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7944(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.244, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7832(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.249, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7940(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7952(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7952(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$174, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.251, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-7664(%rbp), %r11       # 8-byte Reload
	movl	-7940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 174 25 is_stmt 1      # fft.c:174:25
	movl	$1, (%rsp)
	movl	%r10d, -7956(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.243, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7812(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.150, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7852(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7968(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7968(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.251, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7852(%rbp), %r10d      # 4-byte Reload
	movl	-7812(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7972(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$174, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.392, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7976(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.246, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7888(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7984(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.392, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-7664(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7988(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$174, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.253, %rcx
	movl	$15, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7992(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.239, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7764(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.392, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7988(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8000(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.253, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7988(%rbp), %r10d      # 4-byte Reload
	movl	-7764(%rbp), %ebx       # 4-byte Reload
	imull	%ebx, %r10d
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -8004(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$174, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.254, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8008(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.251, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movl	-7972(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.253, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-8004(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.254, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-8004(%rbp), %r10d      # 4-byte Reload
	movl	-7972(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %r10d
	.loc	1 174 23 is_stmt 0      # fft.c:174:23
	movl	%r10d, %r14d
	movl	%r14d, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -8020(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$174, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.393, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8024(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.246, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7888(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.254, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-8020(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8032(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$168, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.234, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-7664(%rbp), %r11       # 8-byte Reload
	movl	-8020(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp224:
	.loc	1 168 34 is_stmt 1      # fft.c:168:34
	movl	$1, (%rsp)
	movl	%r10d, -8036(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -8048(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8048(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.233, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8056(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8056(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.234, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 168 28 is_stmt 0      # fft.c:168:28
	movq	%rdx, -8064(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$168, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.256, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8068(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -8080(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.234, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8064(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8088(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8088(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.256, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-8064(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r15b
.Ltmp225:
	.loc	1 168 15                # fft.c:168:15
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -8096(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r15b, -8097(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$168, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.389, %rdx
	movabsq	$.L.str.394, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8104(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.395, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8112(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8112(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.389, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8120(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8120(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.256, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-8097(%rbp), %r15b      # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -8128(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8128(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-8097(%rbp), %r15b      # 1-byte Reload
	testb	$1, %r15b
	movq	-8064(%rbp), %rax       # 8-byte Reload
	movq	%rax, -7656(%rbp)       # 8-byte Spill
	jne	.LBB5_5
	jmp	.LBB5_4
.Ltmp226:
.LBB5_5:                                #   in Loop: Header=BB5_1 Depth=1
	#DEBUG_VALUE: step6:j <- [DW_OP_constu 7664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:hi <- [DW_OP_constu 7516, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 15                  # fft.c:0:15
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.395, %rdx
	movabsq	$.L.str.396, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp227:
	#DEBUG_VALUE: step6:i <- 0
	movl	$1, (%rsp)
	movl	%eax, -8132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -8144(%rbp)       # 8-byte Spill
	movq	-8144(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.23, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -8152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.396, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	shlq	$3, %r10
.Ltmp228:
	.loc	1 178 10 is_stmt 1      # fft.c:178:10
	movq	%rdx, -8160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -8168(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$178, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.395, %rdx
	movabsq	$.L.str.397, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.398, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -8184(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -8192(%rbp)       # 8-byte Spill
	movq	-8192(%rbp), %r9        # 8-byte Reload
	movq	-8184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -8200(%rbp)       # 8-byte Spill
.Ltmp229:
.LBB5_6:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step6:j <- [DW_OP_constu 7664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:hi <- [DW_OP_constu 7516, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-8200(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.262, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 150 19 is_stmt 1      # fft.c:150:19
	movl	$1, (%rsp)
	movq	%rax, -8208(%rbp)       # 8-byte Spill
	movl	%r10d, -8212(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.263, %r8
	movabsq	$.L.str.398, %rcx
	movq	%rcx, -8224(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.395, %rdx
	movq	%rax, %rdi
	movq	%rdx, -8232(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-8232(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.395, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$179, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.264, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp230:
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 8208, DW_OP_minus] [%rbp+0]
	.loc	1 179 24                # fft.c:179:24
	movl	$1, (%rsp)
	movl	%r10d, -8236(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -8248(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.264, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8256(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$179, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.266, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8260(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.264, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8256(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8272(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.266, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-8208(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 179 17 is_stmt 0      # fft.c:179:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -8276(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$179, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.271, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8280(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.396, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8288(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.271, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	movq	-8168(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 179 4                 # fft.c:179:4
	movq	%rdx, -8296(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$179, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.267, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8300(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.271, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -8312(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.267, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 179 22                # fft.c:179:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8320(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$179, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.399, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8324(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.267, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8320(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.266, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-8276(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8336(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$180, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.270, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-8296(%rbp), %r11       # 8-byte Reload
	movl	-8276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 180 24 is_stmt 1      # fft.c:180:24
	movl	$1, (%rsp)
	movl	%r10d, -8340(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.262, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -8352(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8352(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.270, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8360(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$180, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.400, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8364(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.270, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8360(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8376(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8376(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.400, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-8208(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 180 4 is_stmt 0       # fft.c:180:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -8380(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$180, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.272, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8384(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.271, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -8392(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8392(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.272, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 180 22                # fft.c:180:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -8400(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$180, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.401, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8404(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.272, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-8400(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.400, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-8380(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -8416(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$178, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.263, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-8296(%rbp), %r11       # 8-byte Reload
	movl	-8380(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp231:
	.loc	1 178 30 is_stmt 1      # fft.c:178:30
	movl	$1, (%rsp)
	movl	%r10d, -8420(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -8432(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8432(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.262, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8440(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8440(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.263, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-8208(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 178 23 is_stmt 0      # fft.c:178:23
	movq	%rdx, -8448(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$178, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.275, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8452(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -8464(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-8464(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.263, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-8448(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -8472(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8472(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.275, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-8448(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp232:
	.loc	1 178 10                # fft.c:178:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -8480(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -8481(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$178, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.398, %rdx
	movabsq	$.L.str.402, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -8488(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.382, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8496(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8496(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.398, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -8504(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-8504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.275, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-8481(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -8512(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8512(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-8481(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-8448(%rbp), %rax       # 8-byte Reload
	movq	%rax, -8200(%rbp)       # 8-byte Spill
	jne	.LBB5_7
	jmp	.LBB5_6
.Ltmp233:
.LBB5_7:                                #   in Loop: Header=BB5_1 Depth=1
	#DEBUG_VALUE: step6:j <- [DW_OP_constu 7664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:hi <- [DW_OP_constu 7516, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$153, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.382, %rdx
	movabsq	$.L.str.24, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 153 35 is_stmt 1      # fft.c:153:35
	movl	$1, (%rsp)
	movl	%eax, -8516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -8528(%rbp)       # 8-byte Spill
	movq	-8528(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.23, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -8536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.24, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 153 26 is_stmt 0      # fft.c:153:26
	movq	%rdx, -8544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -8552(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$153, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.382, %rdx
	movabsq	$.L.str.403, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8568(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8576(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8576(%rbp), %rcx       # 8-byte Reload
	movq	-8576(%rbp), %r9        # 8-byte Reload
	movq	-8568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.24, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-8552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -8584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.403, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-8552(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp234:
	.loc	1 153 9                 # fft.c:153:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -8592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8592(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -8593(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$153, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.382, %rdx
	movabsq	$.L.str.404, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8600(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.405, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8608(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8616(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8616(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -8624(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-8624(%rbp), %r9        # 8-byte Reload
	movq	-8608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8632(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8640(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8640(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -8648(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-8648(%rbp), %r9        # 8-byte Reload
	movq	-8632(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.403, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-8593(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -8656(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-8656(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -8664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-8593(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-8552(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	jne	.LBB5_8
	jmp	.LBB5_1
.Ltmp235:
.LBB5_8:
	#DEBUG_VALUE: step6:j <- [DW_OP_constu 7664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:hi <- [DW_OP_constu 7516, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step6:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$184, %eax
	movl	%eax, %edi
	movabsq	$.L.str.381, %rsi
	movabsq	$.L.str.405, %rdx
	movabsq	$.L.str.406, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 184 1 is_stmt 1       # fft.c:184:1
	movl	$1, (%rsp)
	movl	%eax, -8668(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.381, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$8648, %rsp             # imm = 0x21C8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp236:
.Lfunc_end5:
	.size	step6, .Lfunc_end5-step6
	.cfi_endproc
                                        # -- End function
	.globl	step7                   # -- Begin function step7
	.p2align	4, 0x90
	.type	step7,@function
step7:                                  # @step7
.Lfunc_begin6:
	.loc	1 193 0                 # fft.c:193:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3448, %rsp             # imm = 0xD78
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp237:
	.loc	1 185 17 prologue_end   # fft.c:185:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step7:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp238:
	#DEBUG_VALUE: step7:stride <- 64
	#DEBUG_VALUE: step7:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.287, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.287, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.288, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.288, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.290, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.290, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.291, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.291, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp239:
	.loc	1 197 9 is_stmt 1       # fft.c:197:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$197, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp240:
.LBB6_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_2 Depth 2
	#DEBUG_VALUE: step7:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.292, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 194 19 is_stmt 1      # fft.c:194:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.293, %r8
	movabsq	$.L.str.294, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp241:
	#DEBUG_VALUE: step7:i <- 0
	#DEBUG_VALUE: step7:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp242:
	.loc	1 198 10 is_stmt 1      # fft.c:198:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$198, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp243:
.LBB6_2:                                #   Parent Loop BB6_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step7:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 194 19 is_stmt 1      # fft.c:194:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$199, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp244:
	#DEBUG_VALUE: step7:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 199 29                # fft.c:199:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 199 16 is_stmt 0      # fft.c:199:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$199, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$199, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 199 4                 # fft.c:199:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$199, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 199 14                # fft.c:199:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$199, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$198, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp245:
	.loc	1 198 30 is_stmt 1      # fft.c:198:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 198 23 is_stmt 0      # fft.c:198:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$198, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp246:
	.loc	1 198 10                # fft.c:198:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$198, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB6_3
	jmp	.LBB6_2
.Ltmp247:
.LBB6_3:                                #   in Loop: Header=BB6_1 Depth=1
	#DEBUG_VALUE: step7:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp248:
	.loc	1 204 3 is_stmt 1       # fft.c:204:3
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.301, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$2147483640, %eax       # imm = 0x7FFFFFF8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -800(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-808(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	andl	$2147483640, %eax       # imm = 0x7FFFFFF8
.Ltmp249:
	.loc	1 203 11                # fft.c:203:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$203, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -824(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$203, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -848(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-864(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	andl	$7, %eax
.Ltmp250:
	.loc	1 194 15                # fft.c:194:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp251:
	#DEBUG_VALUE: step7:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	.loc	1 204 3                 # fft.c:204:3
	movl	$1, (%rsp)
	movl	%eax, -888(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -896(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-896(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -904(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-904(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -908(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.302, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -912(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-908(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -920(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-920(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-928(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-908(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -944(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.303, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -948(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-960(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -968(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-968(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-944(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -984(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -988(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-984(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-944(%rbp), %r11        # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1008(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1008(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.305, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1048(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.310, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1052(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1048(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1012(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1012(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1084(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1108(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.307, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1112(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1108(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1108(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1144(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1148(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1144(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1144(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1184(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1144(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1208(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.51, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$72, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	movq	-1224(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1232(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1232(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$72, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1252(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.355, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1256(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1252(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1272(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1272(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1252(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1328(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.309, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1368(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1372(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movl	-1212(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.311, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1440(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.312, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1504(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1464(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1528(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.358, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$144, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1544(%rbp)       # 8-byte Spill
	movq	-1544(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$144, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.408, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.408, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.408, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1712(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1712(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1648(%rbp), %r11       # 8-byte Reload
	movl	-1532(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.287, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1748(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.316, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1752(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1748(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1760(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1760(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1748(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1784(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1784(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1816(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1824(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1828(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1848(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.409, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$216, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1864(%rbp)       # 8-byte Spill
	movq	-1864(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$216, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.410, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1892(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1932(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1936(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1932(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1944(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1944(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1932(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1960(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1968(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.317, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1968(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2008(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2012(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2008(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movl	-1852(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2044(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.288, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2064(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.319, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2080(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2080(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2068(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2104(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2104(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2104(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2136(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2144(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2148(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2144(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2168(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2172(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.322, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2176(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$288, %eax              # imm = 0x120
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2184(%rbp)       # 8-byte Spill
	movq	-2184(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$288, %eax              # imm = 0x120
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2232(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2212(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -2248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2252(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2256(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2252(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2252(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2288(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2288(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2288(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2328(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2328(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2172(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movl	-2172(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.326, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2424(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2428(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2440(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2424(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2488(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2488(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2492(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.365, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2496(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$360, %eax              # imm = 0x168
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2504(%rbp)       # 8-byte Spill
	movq	-2504(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2512(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2512(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$360, %eax              # imm = 0x168
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2528(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.411, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.411, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.411, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2584(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2608(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2612(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2608(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2492(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2672(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2672(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2680(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.333, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2608(%rbp), %r11       # 8-byte Reload
	movl	-2492(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.290, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2704(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.329, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2708(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2744(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2784(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-2744(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2808(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2808(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2812(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.412, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2816(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$432, %eax              # imm = 0x1B0
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2824(%rbp)       # 8-byte Spill
	movq	-2824(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.412, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$432, %eax              # imm = 0x1B0
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.413, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2864(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.412, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.413, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2852(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -2888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.413, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2904(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2904(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2928(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2928(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2928(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2960(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2968(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2812(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2992(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.89, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2928(%rbp), %r11       # 8-byte Reload
	movl	-2812(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -3004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.291, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3024(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3028(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.334, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3032(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3028(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3028(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -3056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -3064(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3064(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -3096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -3104(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.92, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-3104(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	-3064(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -3128(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-3128(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -3132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.414, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$504, %eax              # imm = 0x1F8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -3144(%rbp)       # 8-byte Spill
	movq	-3144(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.414, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$504, %eax              # imm = 0x1F8
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3172(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.415, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3176(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.414, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3172(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.415, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3172(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -3208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.416, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.415, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3224(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3224(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.416, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -3248(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.335, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3252(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.416, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3248(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -3280(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -3288(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$204, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3288(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$197, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.293, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-3248(%rbp), %r11       # 8-byte Reload
	movl	-3132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
.Ltmp252:
	.loc	1 197 35                # fft.c:197:35
	movl	$1, (%rsp)
	movl	%eax, -3324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -3336(%rbp)       # 8-byte Spill
	movq	-3336(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 197 26 is_stmt 0      # fft.c:197:26
	movq	%rdx, -3352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -3360(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$197, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.417, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3376(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3384(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3384(%rbp), %r9        # 8-byte Reload
	movq	-3376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-3360(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3360(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%r12b
.Ltmp253:
	.loc	1 197 9                 # fft.c:197:9
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -3400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3400(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%r12b, -3401(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$197, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.367, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.418, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3416(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3424(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3432(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3432(%rbp), %r9        # 8-byte Reload
	movq	-3416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3440(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3448(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3456(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3456(%rbp), %r9        # 8-byte Reload
	movq	-3440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-3401(%rbp), %r12b      # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3464(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3401(%rbp), %r12b      # 1-byte Reload
	testb	$1, %r12b
	movq	-3360(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB6_4
	jmp	.LBB6_1
.Ltmp254:
.LBB6_4:
	#DEBUG_VALUE: step7:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step7:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$207, %eax
	movl	%eax, %edi
	movabsq	$.L.str.407, %rsi
	movabsq	$.L.str.418, %rdx
	movabsq	$.L.str.419, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 207 1 is_stmt 1       # fft.c:207:1
	movl	$1, (%rsp)
	movl	%eax, -3476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.407, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$3448, %rsp             # imm = 0xD78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp255:
.Lfunc_end6:
	.size	step7, .Lfunc_end6-step7
	.cfi_endproc
                                        # -- End function
	.globl	step8                   # -- Begin function step8
	.p2align	4, 0x90
	.type	step8,@function
step8:                                  # @step8
.Lfunc_begin7:
	.loc	1 216 0                 # fft.c:216:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3048, %rsp             # imm = 0xBE8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp256:
	.loc	1 208 17 prologue_end   # fft.c:208:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp257:
	#DEBUG_VALUE: step8:stride <- 64
	#DEBUG_VALUE: step8:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.342, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.343, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.344, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.345, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp258:
	.loc	1 220 9 is_stmt 1       # fft.c:220:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$220, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp259:
.LBB7_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_2 Depth 2
                                        #     Child Loop BB7_4 Depth 2
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.346, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 217 19 is_stmt 1      # fft.c:217:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.347, %r8
	movabsq	$.L.str.348, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp260:
	#DEBUG_VALUE: step8:i <- 0
	#DEBUG_VALUE: step8:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp261:
	.loc	1 221 10 is_stmt 1      # fft.c:221:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$221, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp262:
.LBB7_2:                                #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step8:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 217 19 is_stmt 1      # fft.c:217:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$222, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp263:
	#DEBUG_VALUE: step8:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 222 29                # fft.c:222:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 222 16 is_stmt 0      # fft.c:222:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$222, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$222, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 222 4                 # fft.c:222:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$222, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 222 14                # fft.c:222:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$222, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$221, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp264:
	.loc	1 221 30 is_stmt 1      # fft.c:221:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 221 23 is_stmt 0      # fft.c:221:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$221, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp265:
	.loc	1 221 10                # fft.c:221:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$221, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB7_3
	jmp	.LBB7_2
.Ltmp266:
.LBB7_3:                                #   in Loop: Header=BB7_1 Depth=1
	#DEBUG_VALUE: step8:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$225, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 225 11 is_stmt 1      # fft.c:225:11
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$225, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.349, %rcx
	movl	$24, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -800(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-808(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	shrl	$3, %eax
.Ltmp267:
	.loc	1 217 11                # fft.c:217:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$226, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp268:
	#DEBUG_VALUE: step8:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	.loc	1 226 11                # fft.c:226:11
	movl	$1, (%rsp)
	movl	%eax, -824(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$226, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -848(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-864(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	andl	$7, %eax
.Ltmp269:
	.loc	1 217 15                # fft.c:217:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.350, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp270:
	#DEBUG_VALUE: step8:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	.loc	1 227 3                 # fft.c:227:3
	movl	$1, (%rsp)
	movl	%eax, -888(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$72, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -896(%rbp)        # 8-byte Spill
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -904(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-904(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	imull	$72, %eax, %ebx
	movl	%ebx, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -924(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.351, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -928(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -944(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-960(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -964(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -968(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-992(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.352, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1040(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1044(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1064(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1088(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.353, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-1068(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$8, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1112(%rbp)       # 8-byte Spill
	movq	-1112(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$8, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.354, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1216(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1256(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1280(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1280(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.355, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1328(%rbp)       # 8-byte Spill
	movq	-1328(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1336(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$16, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1356(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.356, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1360(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1376(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1432(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1472(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1496(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1500(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1520(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.357, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	-1500(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$24, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1544(%rbp)       # 8-byte Spill
	movq	-1544(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$24, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.358, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1648(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1712(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1716(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1720(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1736(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1736(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.359, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	-1716(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -1760(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1768(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1768(%rbp), %rcx       # 8-byte Reload
	movq	-1768(%rbp), %r9        # 8-byte Reload
	movq	-1760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1776(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1776(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$32, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1796(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.360, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1800(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1808(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1796(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1796(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1848(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1848(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1872(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.361, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1912(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1936(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.362, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	-1940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$40, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1984(%rbp)       # 8-byte Spill
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1992(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$40, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.363, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2088(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2092(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2128(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2128(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2152(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2156(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2160(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2156(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2176(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2176(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	-2156(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$48, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2200(%rbp)       # 8-byte Spill
	movq	-2200(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$48, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.364, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2240(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2272(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2280(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2280(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2304(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2344(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2368(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	-2372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$56, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2416(%rbp)       # 8-byte Spill
	movq	-2416(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$56, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2444(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.365, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2448(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2480(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2520(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.366, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2552(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2560(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2584(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$227, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.367, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2588(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp271:
	#DEBUG_VALUE: step8:i <- 0
	.loc	1 0 3 is_stmt 0         # fft.c:0:3
	movl	$1, (%rsp)
	movl	%eax, -2620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2632(%rbp)       # 8-byte Spill
	movq	-2632(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$3, %r10
.Ltmp272:
	.loc	1 228 11 is_stmt 1      # fft.c:228:11
	movq	%rdx, -2648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2656(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$228, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.368, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2672(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2688(%rbp)       # 8-byte Spill
.Ltmp273:
.LBB7_4:                                #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step8:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movq	-2688(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.370, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 217 19 is_stmt 1      # fft.c:217:19
	movl	$1, (%rsp)
	movq	%rax, -2696(%rbp)       # 8-byte Spill
	movl	%r10d, -2700(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.371, %r8
	movabsq	$.L.str.369, %rcx
	movq	%rcx, -2712(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.294, %rdx
	movq	%rax, %rdi
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-2720(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.294, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$229, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp274:
	#DEBUG_VALUE: step8:i <- [DW_OP_constu 2696, DW_OP_minus] [%rbp+0]
	.loc	1 229 24                # fft.c:229:24
	movl	$1, (%rsp)
	movl	%r10d, -2724(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2736(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2736(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$229, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2748(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.330, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2760(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2760(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 229 17 is_stmt 0      # fft.c:229:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -2764(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$229, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2768(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2656(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2776(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2776(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	-2656(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 229 4                 # fft.c:229:4
	movq	%rdx, -2784(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$229, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2788(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -2800(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2800(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 229 22                # fft.c:229:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2808(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$229, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.372, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2812(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2808(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-2764(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -2824(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$228, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.371, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-2784(%rbp), %r11       # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp275:
	.loc	1 228 31 is_stmt 1      # fft.c:228:31
	movl	$1, (%rsp)
	movl	%r10d, -2828(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2840(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2840(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2848(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 228 24 is_stmt 0      # fft.c:228:24
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$228, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.373, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2860(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2872(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2872(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2880(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp276:
	.loc	1 228 11                # fft.c:228:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -2889(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$228, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.374, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2896(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.348, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2904(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2912(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -2920(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-2856(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2688(%rbp)       # 8-byte Spill
	jne	.LBB7_5
	jmp	.LBB7_4
.Ltmp277:
.LBB7_5:                                #   in Loop: Header=BB7_1 Depth=1
	#DEBUG_VALUE: step8:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11                  # fft.c:0:11
	movl	$220, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.347, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 220 35 is_stmt 1      # fft.c:220:35
	movl	$1, (%rsp)
	movl	%eax, -2924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2936(%rbp)       # 8-byte Spill
	movq	-2936(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 220 26 is_stmt 0      # fft.c:220:26
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$220, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.375, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2976(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2984(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	movq	-2976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2960(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp278:
	.loc	1 220 9                 # fft.c:220:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -3000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -3001(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$220, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.376, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.377, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3016(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3024(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3032(%rbp), %r9        # 8-byte Reload
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3048(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3056(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3056(%rbp), %r9        # 8-byte Reload
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-3001(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3064(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3001(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-2960(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB7_6
	jmp	.LBB7_1
.Ltmp279:
.LBB7_6:
	#DEBUG_VALUE: step8:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step8:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$234, %eax
	movl	%eax, %edi
	movabsq	$.L.str.420, %rsi
	movabsq	$.L.str.377, %rdx
	movabsq	$.L.str.378, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 234 1 is_stmt 1       # fft.c:234:1
	movl	$1, (%rsp)
	movl	%eax, -3076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.420, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$3048, %rsp             # imm = 0xBE8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp280:
.Lfunc_end7:
	.size	step8, .Lfunc_end7-step8
	.cfi_endproc
                                        # -- End function
	.globl	step9                   # -- Begin function step9
	.p2align	4, 0x90
	.type	step9,@function
step9:                                  # @step9
.Lfunc_begin8:
	.loc	1 243 0                 # fft.c:243:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3448, %rsp             # imm = 0xD78
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp281:
	.loc	1 235 17 prologue_end   # fft.c:235:17
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step9:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp282:
	#DEBUG_VALUE: step9:stride <- 64
	#DEBUG_VALUE: step9:tid <- 0
	.loc	1 0 17 is_stmt 0        # fft.c:0:17
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.287, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.287, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.288, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.288, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.290, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.290, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.291, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.291, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp283:
	.loc	1 247 9 is_stmt 1       # fft.c:247:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$247, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp284:
.LBB8_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_2 Depth 2
	#DEBUG_VALUE: step9:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.292, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 245 19 is_stmt 1      # fft.c:245:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.293, %r8
	movabsq	$.L.str.294, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp285:
	#DEBUG_VALUE: step9:i <- 0
	#DEBUG_VALUE: step9:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.292, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp286:
	.loc	1 248 10 is_stmt 1      # fft.c:248:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$248, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp287:
.LBB8_2:                                #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step9:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 245 19 is_stmt 1      # fft.c:245:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$250, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp288:
	#DEBUG_VALUE: step9:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 250 29                # fft.c:250:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 250 16 is_stmt 0      # fft.c:250:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$250, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$250, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 250 4                 # fft.c:250:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$250, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 250 14                # fft.c:250:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$250, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$248, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp289:
	.loc	1 248 30 is_stmt 1      # fft.c:248:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 248 23 is_stmt 0      # fft.c:248:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$248, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp290:
	.loc	1 248 10                # fft.c:248:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$248, %r10d
	movl	%r10d, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB8_3
	jmp	.LBB8_2
.Ltmp291:
.LBB8_3:                                #   in Loop: Header=BB8_1 Depth=1
	#DEBUG_VALUE: step9:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp292:
	.loc	1 254 3 is_stmt 1       # fft.c:254:3
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.301, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$2147483640, %eax       # imm = 0x7FFFFFF8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -800(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-808(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	andl	$2147483640, %eax       # imm = 0x7FFFFFF8
.Ltmp293:
	.loc	1 253 11                # fft.c:253:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$253, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -824(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$253, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -848(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-864(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	andl	$7, %eax
.Ltmp294:
	.loc	1 245 15                # fft.c:245:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp295:
	#DEBUG_VALUE: step9:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	.loc	1 254 3                 # fft.c:254:3
	movl	$1, (%rsp)
	movl	%eax, -888(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-152(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -896(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-896(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-152(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -904(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-904(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -908(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.302, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -912(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-908(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -920(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-920(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-928(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-908(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -944(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.303, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -948(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.302, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-960(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -968(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-968(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-944(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -984(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -988(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.303, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-984(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-944(%rbp), %r11        # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1008(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1008(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.305, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1048(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.310, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1052(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.305, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1048(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1012(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-432(%rbp), %r11        # 8-byte Reload
	movl	-1012(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1084(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1108(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.307, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1112(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1108(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1108(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1144(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1148(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.307, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1144(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1144(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1184(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1184(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1144(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1208(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.51, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$72, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	movq	-1224(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1232(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1232(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$72, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1252(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.355, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1256(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1252(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1272(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1272(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1252(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1328(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.309, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1328(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1368(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1372(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.309, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movl	-1212(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.311, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1440(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.312, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.311, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1504(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.312, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1464(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1528(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.358, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$144, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1544(%rbp)       # 8-byte Spill
	movq	-1544(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$144, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.408, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.408, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.408, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1712(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1712(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1648(%rbp), %r11       # 8-byte Reload
	movl	-1532(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -1724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.287, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1748(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.316, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1752(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1748(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1760(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1760(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1748(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1784(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.316, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1784(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1816(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1824(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1828(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-1848(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -1852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.409, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$216, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1864(%rbp)       # 8-byte Spill
	movq	-1864(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$216, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.410, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.409, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1892(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1932(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1936(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.410, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1932(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1944(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1944(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1932(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1960(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1968(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.317, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1968(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2008(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2012(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.317, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2008(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movl	-1852(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2044(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.288, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2064(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.319, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2080(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2080(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2068(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2104(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.319, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2104(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2104(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2136(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2144(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2148(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2144(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2168(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2172(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.322, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2176(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$288, %eax              # imm = 0x120
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2184(%rbp)       # 8-byte Spill
	movq	-2184(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$288, %eax              # imm = 0x120
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.322, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2232(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2212(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -2248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2252(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2256(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2252(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2252(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2288(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2288(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2288(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2328(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2328(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2172(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movl	-2172(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.326, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2424(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2428(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.326, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2440(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2424(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2488(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2488(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2492(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.365, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2496(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$360, %eax              # imm = 0x168
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2504(%rbp)       # 8-byte Spill
	movq	-2504(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2512(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2512(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$360, %eax              # imm = 0x168
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2528(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.411, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.411, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.411, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2584(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2608(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2612(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2608(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2492(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2672(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2672(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2680(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.333, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2608(%rbp), %r11       # 8-byte Reload
	movl	-2492(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -2684(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.290, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2704(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.329, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.333, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2708(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.329, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2744(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2784(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.330, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-2744(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -2808(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-2808(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -2812(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.412, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2816(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$432, %eax              # imm = 0x1B0
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2824(%rbp)       # 8-byte Spill
	movq	-2824(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.412, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$432, %eax              # imm = 0x1B0
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.413, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2864(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.412, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.413, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2852(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -2888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.413, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2904(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2904(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2928(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2928(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2928(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2960(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2968(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2812(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2992(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.89, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2928(%rbp), %r11       # 8-byte Reload
	movl	-2812(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
	movl	$1, (%rsp)
	movl	%eax, -3004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.291, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3024(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3028(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.334, %rcx
	movl	$38, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3032(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3028(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3028(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %r10
	movq	%rdx, -3056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -3064(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.334, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3064(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -3096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -3104(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.92, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3108(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-3104(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	-3064(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r14d
	movq	%rdx, -3128(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-3128(%rbp), %r14       # 8-byte Reload
	movq	%r14, (%rsp)
	movl	%eax, -3132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.414, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$504, %eax              # imm = 0x1F8
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -3144(%rbp)       # 8-byte Spill
	movq	-3144(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.301, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.414, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	addl	$504, %eax              # imm = 0x1F8
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3172(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.415, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3176(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3184(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.414, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3172(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.415, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3172(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r15d
	movl	%r15d, %r10d
	movq	%rdx, -3208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.416, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.415, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3224(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3224(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.416, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -3248(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.335, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3252(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.416, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3248(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -3280(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -3288(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$254, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.335, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3288(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$247, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.293, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-3248(%rbp), %r11       # 8-byte Reload
	movl	-3132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10,%r11,4)
.Ltmp296:
	.loc	1 247 35                # fft.c:247:35
	movl	$1, (%rsp)
	movl	%eax, -3324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -3336(%rbp)       # 8-byte Spill
	movq	-3336(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.292, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 247 26 is_stmt 0      # fft.c:247:26
	movq	%rdx, -3352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -3360(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$247, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.417, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3376(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3384(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3384(%rbp), %r9        # 8-byte Reload
	movq	-3376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.293, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-3360(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-3360(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%r12b
.Ltmp297:
	.loc	1 247 9                 # fft.c:247:9
	movb	%r12b, %r13b
	andb	$1, %r13b
	movzbl	%r13b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -3400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3400(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%r12b, -3401(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$247, %eax
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.367, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3408(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.418, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3416(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3424(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3432(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3432(%rbp), %r9        # 8-byte Reload
	movq	-3416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3440(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3448(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3456(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3456(%rbp), %r9        # 8-byte Reload
	movq	-3440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.417, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-3401(%rbp), %r12b      # 1-byte Reload
	andb	$1, %r12b
	movzbl	%r12b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3464(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3401(%rbp), %r12b      # 1-byte Reload
	testb	$1, %r12b
	movq	-3360(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB8_4
	jmp	.LBB8_1
.Ltmp298:
.LBB8_4:
	#DEBUG_VALUE: step9:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step9:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$257, %eax              # imm = 0x101
	movl	%eax, %edi
	movabsq	$.L.str.421, %rsi
	movabsq	$.L.str.418, %rdx
	movabsq	$.L.str.419, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 257 1 is_stmt 1       # fft.c:257:1
	movl	$1, (%rsp)
	movl	%eax, -3476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.421, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$3448, %rsp             # imm = 0xD78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp299:
.Lfunc_end8:
	.size	step9, .Lfunc_end8-step9
	.cfi_endproc
                                        # -- End function
	.globl	step10                  # -- Begin function step10
	.p2align	4, 0x90
	.type	step10,@function
step10:                                 # @step10
.Lfunc_begin9:
	.loc	1 266 0                 # fft.c:266:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3048, %rsp             # imm = 0xBE8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp300:
	.loc	1 258 18 prologue_end   # fft.c:258:18
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp301:
	#DEBUG_VALUE: step10:stride <- 64
	#DEBUG_VALUE: step10:tid <- 0
	.loc	1 0 18 is_stmt 0        # fft.c:0:18
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.342, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -236(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -264(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.343, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.344, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -300(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.345, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -332(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.327, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp302:
	.loc	1 270 9 is_stmt 1       # fft.c:270:9
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$270, %r10d             # imm = 0x10E
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.Ltmp303:
.LBB9_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_2 Depth 2
                                        #     Child Loop BB9_4 Depth 2
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.346, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 268 19 is_stmt 1      # fft.c:268:19
	movl	$1, (%rsp)
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.347, %r8
	movabsq	$.L.str.348, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp304:
	#DEBUG_VALUE: step10:i <- 0
	#DEBUG_VALUE: step10:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.346, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-432(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp305:
	.loc	1 271 10 is_stmt 1      # fft.c:271:10
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$271, %r10d             # imm = 0x10F
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -492(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.Ltmp306:
.LBB9_2:                                #   Parent Loop BB9_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step10:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 268 19 is_stmt 1      # fft.c:268:19
	movl	$1, (%rsp)
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$273, %r10d             # imm = 0x111
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp307:
	#DEBUG_VALUE: step10:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	.loc	1 273 29                # fft.c:273:29
	movl	$1, (%rsp)
	movl	%r10d, -556(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-488(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-488(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 273 16 is_stmt 0      # fft.c:273:16
	movq	%rdx, -576(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$273, %r10d             # imm = 0x111
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -580(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -600(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$273, %r10d             # imm = 0x111
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 273 4                 # fft.c:273:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$273, %r10d             # imm = 0x111
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 273 14                # fft.c:273:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -640(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$273, %r10d             # imm = 0x111
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-620(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$271, %r10d             # imm = 0x10F
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-528(%rbp), %r11        # 8-byte Reload
	movl	-620(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp308:
	.loc	1 271 30 is_stmt 1      # fft.c:271:30
	movl	$1, (%rsp)
	movl	%r10d, -660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 271 23 is_stmt 0      # fft.c:271:23
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$271, %r10d             # imm = 0x10F
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp309:
	.loc	1 271 10                # fft.c:271:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -721(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	movl	$271, %r10d             # imm = 0x10F
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.294, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-721(%rbp), %r14b       # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-721(%rbp), %r14b       # 1-byte Reload
	testb	$1, %r14b
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jne	.LBB9_3
	jmp	.LBB9_2
.Ltmp310:
.LBB9_3:                                #   in Loop: Header=BB9_1 Depth=1
	#DEBUG_VALUE: step10:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$275, %eax              # imm = 0x113
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 275 11 is_stmt 1      # fft.c:275:11
	movl	$1, (%rsp)
	movl	%eax, -756(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-768(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -776(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-776(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -780(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$275, %eax              # imm = 0x113
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.349, %rcx
	movl	$24, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -784(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.299, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -800(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-800(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-808(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-780(%rbp), %eax        # 4-byte Reload
	shrl	$3, %eax
.Ltmp311:
	.loc	1 268 11                # fft.c:268:11
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -820(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$276, %eax              # imm = 0x114
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$36, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp312:
	#DEBUG_VALUE: step10:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	.loc	1 276 11                # fft.c:276:11
	movl	$1, (%rsp)
	movl	%eax, -824(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-832(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	%r10d, %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -840(%rbp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	-840(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -844(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$276, %eax              # imm = 0x114
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.300, %rcx
	movl	$26, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -848(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$7, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.304, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -864(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-864(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-872(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-844(%rbp), %eax        # 4-byte Reload
	andl	$7, %eax
.Ltmp313:
	.loc	1 268 15                # fft.c:268:15
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -880(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-880(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -884(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.350, %rcx
	movl	$15, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp314:
	#DEBUG_VALUE: step10:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	.loc	1 277 3                 # fft.c:277:3
	movl	$1, (%rsp)
	movl	%eax, -888(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$72, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -896(%rbp)        # 8-byte Spill
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.349, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -904(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-904(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-912(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-820(%rbp), %eax        # 4-byte Reload
	imull	$72, %eax, %ebx
	movl	%ebx, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-920(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -924(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.351, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -928(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-936(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -944(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-944(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-952(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-960(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -964(%rbp)        # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -968(%rbp)        # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.351, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -976(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-976(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-984(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-964(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -992(%rbp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	-992(%rbp), %r11        # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1000(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.352, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1000(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1032(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1040(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1044(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.352, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1000(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1064(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.315, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1088(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.353, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-1068(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$8, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1112(%rbp)       # 8-byte Spill
	movq	-1112(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$8, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.354, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.353, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.354, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1192(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1192(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1216(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.308, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1220(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1216(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1256(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.308, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1216(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1280(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1280(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.318, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.355, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1328(%rbp)       # 8-byte Spill
	movq	-1328(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1336(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1336(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$16, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1356(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.356, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1360(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.355, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1376(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1356(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1400(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.356, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1432(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.286, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.313, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1432(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1472(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1476(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.286, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1472(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1432(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1496(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.324, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1504(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.342, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-232(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.314, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1500(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1520(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.357, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-232(%rbp), %r10        # 8-byte Reload
	movl	-1500(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$24, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1544(%rbp)       # 8-byte Spill
	movq	-1544(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$24, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.358, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.357, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.358, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1624(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1624(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1648(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1672(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1648(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1688(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1648(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1712(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1712(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1716(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.328, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1720(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-264(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1736(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1736(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.359, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-264(%rbp), %r10        # 8-byte Reload
	movl	-1716(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1748(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -1760(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -1768(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-1768(%rbp), %rcx       # 8-byte Reload
	movq	-1768(%rbp), %r9        # 8-byte Reload
	movq	-1760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1776(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1776(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$32, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1796(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.360, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1800(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1808(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.359, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1796(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1796(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1840(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.360, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1848(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1848(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -1872(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.361, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1904(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -1912(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.361, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-1912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-1872(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-1936(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -1940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.332, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.343, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-296(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.362, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	-1940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$40, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -1984(%rbp)       # 8-byte Spill
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1992(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$40, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2012(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.363, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.362, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2032(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2012(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.321, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.363, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2088(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.320, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2092(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.321, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2088(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2120(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2128(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.325, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2132(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.320, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2128(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2152(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2156(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.336, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2160(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.344, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-328(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.325, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2156(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2176(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2176(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.323, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-328(%rbp), %r10        # 8-byte Reload
	movl	-2156(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2188(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$48, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2200(%rbp)       # 8-byte Spill
	movq	-2200(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$48, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.364, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2240(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.323, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2228(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2272(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.364, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2280(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2280(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2268(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2304(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.289, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2336(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2344(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2348(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.289, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2304(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2368(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2368(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.338, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.345, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-360(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-360(%rbp), %r10        # 8-byte Reload
	movl	-2372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$56, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2416(%rbp)       # 8-byte Spill
	movq	-2416(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.350, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-924(%rbp), %eax        # 4-byte Reload
	addl	$56, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2444(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.365, %rcx
	movl	$27, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2448(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.300, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-884(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2464(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2444(%rbp), %eax       # 4-byte Reload
	movl	-884(%rbp), %ebx        # 4-byte Reload
	orl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2480(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$37, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.365, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2520(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.366, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2520(%rbp), %r10       # 8-byte Reload
	shlq	$2, %r10
	movq	-128(%rbp), %r11        # 8-byte Reload
	addq	%r10, %r11
	movq	%rdx, -2552(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%r11, -2560(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.366, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-128(%rbp), %r10        # 8-byte Reload
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movl	(%r10,%r11,4), %eax
	movl	%eax, %ebx
	movl	%ebx, %r15d
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-2584(%rbp), %r15       # 8-byte Reload
	movq	%r15, (%rsp)
	movl	%eax, -2588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$277, %eax              # imm = 0x115
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.367, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.327, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2608(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.331, %rcx
	movl	$23, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2588(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp315:
	#DEBUG_VALUE: step10:i <- 0
	.loc	1 0 3 is_stmt 0         # fft.c:0:3
	movl	$1, (%rsp)
	movl	%eax, -2620(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$3, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2632(%rbp)       # 8-byte Spill
	movq	-2632(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	shlq	$3, %r10
.Ltmp316:
	.loc	1 278 11 is_stmt 1      # fft.c:278:11
	movq	%rdx, -2648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2656(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$278, %eax              # imm = 0x116
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.294, %rdx
	movabsq	$.L.str.368, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -2672(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2688(%rbp)       # 8-byte Spill
.Ltmp317:
.LBB9_4:                                #   Parent Loop BB9_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step10:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movq	-2688(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.370, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 268 19 is_stmt 1      # fft.c:268:19
	movl	$1, (%rsp)
	movq	%rax, -2696(%rbp)       # 8-byte Spill
	movl	%r10d, -2700(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.371, %r8
	movabsq	$.L.str.369, %rcx
	movq	%rcx, -2712(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.294, %rdx
	movq	%rax, %rdi
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-2720(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.294, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$280, %r10d             # imm = 0x118
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.330, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp318:
	#DEBUG_VALUE: step10:i <- [DW_OP_constu 2696, DW_OP_minus] [%rbp+0]
	.loc	1 280 24                # fft.c:280:24
	movl	$1, (%rsp)
	movl	%r10d, -2724(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.370, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2736(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2736(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.330, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$280, %r10d             # imm = 0x118
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2748(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.330, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2760(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2760(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 280 17 is_stmt 0      # fft.c:280:17
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -2764(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$280, %r10d             # imm = 0x118
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2768(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.331, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2656(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2776(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2776(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	-2656(%rbp), %r11       # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 280 4                 # fft.c:280:4
	movq	%rdx, -2784(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$280, %r10d             # imm = 0x118
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2788(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -2800(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2800(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2784(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 280 22                # fft.c:280:22
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -2808(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$280, %r10d             # imm = 0x118
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.372, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2812(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-2808(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.83, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-2764(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -2824(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$278, %r10d             # imm = 0x116
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.371, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-2784(%rbp), %r11       # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp319:
	.loc	1 278 31 is_stmt 1      # fft.c:278:31
	movl	$1, (%rsp)
	movl	%r10d, -2828(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2840(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2840(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.370, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2848(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-2696(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 278 24 is_stmt 0      # fft.c:278:24
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$278, %r10d             # imm = 0x116
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.373, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2860(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -2872(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-2872(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.371, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2880(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-2856(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp320:
	.loc	1 278 11                # fft.c:278:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -2888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -2889(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$278, %r10d             # imm = 0x116
	movl	%r10d, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.369, %rdx
	movabsq	$.L.str.374, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -2896(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.348, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2904(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.369, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-2912(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.373, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -2920(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-2889(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-2856(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2688(%rbp)       # 8-byte Spill
	jne	.LBB9_5
	jmp	.LBB9_4
.Ltmp321:
.LBB9_5:                                #   in Loop: Header=BB9_1 Depth=1
	#DEBUG_VALUE: step10:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11                  # fft.c:0:11
	movl	$270, %eax              # imm = 0x10E
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.347, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 270 35 is_stmt 1      # fft.c:270:35
	movl	$1, (%rsp)
	movl	%eax, -2924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -2936(%rbp)       # 8-byte Spill
	movq	-2936(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.346, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 270 26 is_stmt 0      # fft.c:270:26
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -2960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$270, %eax              # imm = 0x10E
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.375, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -2976(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2984(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	movq	-2976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.347, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-2960(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp322:
	.loc	1 270 9                 # fft.c:270:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -3000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -3001(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$270, %eax              # imm = 0x10E
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.348, %rdx
	movabsq	$.L.str.376, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.377, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3016(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3024(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-3032(%rbp), %r9        # 8-byte Reload
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3048(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -3056(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-3056(%rbp), %r9        # 8-byte Reload
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.375, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-3001(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -3064(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-3064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-3001(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-2960(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jne	.LBB9_6
	jmp	.LBB9_1
.Ltmp323:
.LBB9_6:
	#DEBUG_VALUE: step10:lo <- [DW_OP_constu 884, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:hi <- [DW_OP_constu 820, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:i <- [DW_OP_constu 528, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:tid <- [DW_OP_constu 432, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step10:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$284, %eax              # imm = 0x11C
	movl	%eax, %edi
	movabsq	$.L.str.422, %rsi
	movabsq	$.L.str.377, %rdx
	movabsq	$.L.str.378, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 284 1 is_stmt 1       # fft.c:284:1
	movl	$1, (%rsp)
	movl	%eax, -3076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.422, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$3048, %rsp             # imm = 0xBE8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp324:
.Lfunc_end9:
	.size	step10, .Lfunc_end9-step10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function step11
.LCPI10_0:
	.long	1060439283              # float 0.707106769
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI10_1:
	.quad	4604544271108800512     # double 0.70710676908493042
	.text
	.globl	step11
	.p2align	4, 0x90
	.type	step11,@function
step11:                                 # @step11
.Lfunc_begin10:
	.loc	1 293 0                 # fft.c:293:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$8056, %rsp             # imm = 0x1F78
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movl	$24601, %r12d           # imm = 0x6019
	movl	%r12d, %r13d
	movl	$64, %r12d
                                        # kill: def %r12 killed %r12d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$.L.str.33, %rax
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	xorl	%esi, %esi
                                        # kill: def %rsi killed %esi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$.L.str.5, %rax
.Ltmp325:
	.loc	1 285 18 prologue_end   # fft.c:285:18
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%r12, %rsi
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movq	%r12, %rdx
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	-72(%rbp), %r12         # 8-byte Reload
	movq	%r8, -112(%rbp)         # 8-byte Spill
	movq	%r12, %r8
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r9, -120(%rbp)         # 8-byte Spill
	movq	%r12, %r9
	movq	%rax, (%rsp)
	movq	%r15, -128(%rbp)        # 8-byte Spill
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$24601, %esi            # imm = 0x6019
	movl	%esi, %edi
	movl	$64, %esi
                                        # kill: def %rsi killed %esi
	movl	$1, %r8d
	movl	%r8d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.3, %rcx
	movl	$32, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
.Ltmp326:
	#DEBUG_VALUE: step11:stride <- 64
	#DEBUG_VALUE: step11:tid <- 0
	.loc	1 0 18 is_stmt 0        # fft.c:0:18
	movl	$1, (%rsp)
	movl	%r10d, -164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.7, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -196(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$4, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, -224(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.9, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -228(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.10, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$4, %rdx
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.11, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -292(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.12, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$5, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$20, %rdx
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.13, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	-376(%rbp), %r9         # 8-byte Reload
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.14, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -396(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	-416(%rbp), %r9         # 8-byte Reload
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$8, %rdx
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.15, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -436(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.16, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -468(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$24, %rdx
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.17, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.18, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -532(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$12, %rdx
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.19, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -564(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.20, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$7, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	addq	$28, %rdx
.Ltmp327:
	.loc	1 297 9 is_stmt 1       # fft.c:297:9
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$297, %r10d             # imm = 0x129
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -628(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -656(%rbp)        # 8-byte Spill
.Ltmp328:
.LBB10_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_2 Depth 2
                                        #     Child Loop BB10_4 Depth 2
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9 is_stmt 0         # fft.c:0:9
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.424, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 295 19 is_stmt 1      # fft.c:295:19
	movl	$1, (%rsp)
	movq	%rax, -664(%rbp)        # 8-byte Spill
	movl	%r10d, -668(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.425, %r8
	movabsq	$.L.str.426, %rcx
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.424, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp329:
	#DEBUG_VALUE: step11:i <- 0
	#DEBUG_VALUE: step11:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	.loc	1 0 19 is_stmt 0        # fft.c:0:19
	movl	$1, (%rsp)
	movl	%r10d, -692(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$3, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.424, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	shlq	$3, %rdx
.Ltmp330:
	.loc	1 299 10 is_stmt 1      # fft.c:299:10
	movq	%rdx, -720(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$299, %r10d             # imm = 0x12B
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.22, %rdx
	movabsq	$.L.str.26, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -724(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-744(%rbp), %r9         # 8-byte Reload
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movq	%rax, -752(%rbp)        # 8-byte Spill
.Ltmp331:
.LBB10_2:                               #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step11:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10 is_stmt 0        # fft.c:0:10
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 295 19 is_stmt 1      # fft.c:295:19
	movl	$1, (%rsp)
	movq	%rax, -760(%rbp)        # 8-byte Spill
	movl	%r10d, -764(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.296, %rcx
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.22, %rdx
	movq	%rax, %rdi
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.22, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$300, %r10d             # imm = 0x12C
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp332:
	#DEBUG_VALUE: step11:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	.loc	1 300 29                # fft.c:300:29
	movl	$1, (%rsp)
	movl	%r10d, -788(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.295, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-720(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	-720(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 300 16 is_stmt 0      # fft.c:300:16
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$300, %r10d             # imm = 0x12C
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -812(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.268, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-96(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -832(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$300, %r10d             # imm = 0x12C
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.34, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-832(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 300 4                 # fft.c:300:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$300, %r10d             # imm = 0x12C
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.35, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -864(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 300 14                # fft.c:300:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -872(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$300, %r10d             # imm = 0x12C
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.297, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.35, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-872(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.34, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-852(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$301, %r10d             # imm = 0x12D
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.37, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-760(%rbp), %r11        # 8-byte Reload
	movl	-852(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 301 16 is_stmt 1      # fft.c:301:16
	movl	$1, (%rsp)
	movl	%r10d, -892(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.273, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.37, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-808(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-104(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -912(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$301, %r10d             # imm = 0x12D
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.39, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -916(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.37, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-912(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.39, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-808(%rbp), %r11        # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 301 4 is_stmt 0       # fft.c:301:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -932(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$301, %r10d             # imm = 0x12D
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.40, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -936(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -944(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 301 14                # fft.c:301:14
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -952(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$301, %r10d             # imm = 0x12D
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.298, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -956(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.40, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.39, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-932(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -968(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$299, %r10d             # imm = 0x12B
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-760(%rbp), %r11        # 8-byte Reload
	movl	-932(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp333:
	.loc	1 299 30 is_stmt 1      # fft.c:299:30
	movl	$1, (%rsp)
	movl	%r10d, -972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -992(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-992(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-760(%rbp), %rdx        # 8-byte Reload
	addq	$1, %rdx
	.loc	1 299 23 is_stmt 0      # fft.c:299:23
	movq	%rdx, -1000(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$299, %r10d             # imm = 0x12B
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1004(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.29, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1024(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp334:
	.loc	1 299 10                # fft.c:299:10
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -1032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -1033(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$299, %r10d             # imm = 0x12B
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.296, %rdx
	movabsq	$.L.str.383, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -1040(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.44, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1048(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1048(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.296, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-1056(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.42, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-1033(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-1033(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-1000(%rbp), %rax       # 8-byte Reload
	movq	%rax, -752(%rbp)        # 8-byte Spill
	jne	.LBB10_3
	jmp	.LBB10_2
.Ltmp335:
.LBB10_3:                               #   in Loop: Header=BB10_1 Depth=1
	#DEBUG_VALUE: step11:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 10                  # fft.c:0:10
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp336:
	#DEBUG_VALUE: exp_1_8_x <- 1
	#DEBUG_VALUE: exp_1_8_y <- 4294967295
	#DEBUG_VALUE: exp_1_4_x <- 0
	#DEBUG_VALUE: exp_1_4_y <- 4294967295
	#DEBUG_VALUE: exp_3_8_x <- 4294967295
	#DEBUG_VALUE: exp_3_8_y <- 4294967295
	.loc	1 305 3 is_stmt 1       # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -1068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp337:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1092, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1104(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1112(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp338:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1116, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1136(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1136(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.48, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.47, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.48, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1140(%rbp), %eax       # 4-byte Reload
	movl	-1092(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.49, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1184(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1192(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.48, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1200(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1200(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-1180(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1212(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.51, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.50, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movl	-1116(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.52, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1280(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.51, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1276(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1296(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-1276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.54, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.53, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.54, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	-1332(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.55, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.54, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-1372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.57, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.56, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.57, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movl	-1428(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1468(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.58, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.57, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-1468(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp339:
	.loc	1 305 3 is_stmt 0       # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -1500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp340:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1524, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1544(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.59, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp341:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1548, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1568(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.60, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.59, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1572(%rbp), %eax       # 4-byte Reload
	movl	-1524(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.61, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.60, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1632(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1632(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-1612(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.63, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.62, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	-1548(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.64, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.63, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-1708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.66, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.66, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1524(%rbp), %eax       # 4-byte Reload
	movl	-1764(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.67, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.66, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.68, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-1804(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1860(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.69, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1864(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.68, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1860(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -1872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1880(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1548(%rbp), %eax       # 4-byte Reload
	movl	-1860(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -1896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1896(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.70, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -1904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.69, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -1920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-1920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-1900(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp342:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -1932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1956(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp343:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 1956, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1960(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -1976(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -1980(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.71, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp344:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 1980, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -1984(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -1992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2004(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.72, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2016(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.71, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2004(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.72, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2004(%rbp), %eax       # 4-byte Reload
	movl	-1956(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.73, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.72, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.74, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-2044(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.75, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.74, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2100(%rbp), %eax       # 4-byte Reload
	movl	-1980(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.76, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.75, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.77, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-2140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.78, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.77, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.78, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1956(%rbp), %eax       # 4-byte Reload
	movl	-2196(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.79, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.78, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.80, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-2236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2288(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.81, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.80, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2304(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.81, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-1980(%rbp), %eax       # 4-byte Reload
	movl	-2292(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.82, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.81, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-2332(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp345:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -2364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp346:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 2388, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2408(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.83, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp347:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 2412, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2436(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.84, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.83, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2436(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.84, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2436(%rbp), %eax       # 4-byte Reload
	movl	-2388(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.85, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.84, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.86, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-2476(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2528(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.87, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.86, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.87, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2532(%rbp), %eax       # 4-byte Reload
	movl	-2412(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.88, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.87, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.89, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-2572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2624(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.90, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.89, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.90, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2388(%rbp), %eax       # 4-byte Reload
	movl	-2628(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2664(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.91, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2680(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.90, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.92, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-2668(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2700(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2720(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2724(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.93, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2728(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.92, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2724(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2744(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2744(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.93, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2412(%rbp), %eax       # 4-byte Reload
	movl	-2724(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2760(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2760(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.94, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.93, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-2764(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp348:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -2796(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2816(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2820(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.96, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp349:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 2820, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -2824(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -2840(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-2840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -2844(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.97, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2848(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2820(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.96, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2844(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2864(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.97, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2844(%rbp), %eax       # 4-byte Reload
	movl	-2820(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -2880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2880(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2884(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.98, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2888(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.97, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2884(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2896(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2896(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.98, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-2884(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -2908(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.99, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2912(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI10_1(%rip), %xmm0  # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -2920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2920(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2928(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2928(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.98, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-2908(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -2936(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2936(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.99, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	-2908(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -2940(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.100, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.99, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-2940(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -2952(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2952(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.100, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-2940(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -2960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -2964(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.101, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -2968(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -2976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.100, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2964(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-2984(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-2992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.102, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-2964(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -2996(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3016(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3020(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.103, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3024(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-2820(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.102, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3020(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3040(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3040(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.103, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3020(%rbp), %eax       # 4-byte Reload
	movl	-2820(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3056(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3060(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.104, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3064(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.103, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3060(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3072(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.104, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3060(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3084(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.105, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3088(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI10_1(%rip), %xmm0  # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3096(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3096(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3104(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3104(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.104, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3084(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3112(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.105, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	-3084(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3116(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.106, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3120(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.105, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3116(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3128(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3128(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.106, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3116(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.107, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.106, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-3140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.108, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp350:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 3196, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.108, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3216(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3220(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.109, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.108, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3240(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3240(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.110, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-3220(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3252(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3264(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -3272(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -3280(%rbp)       # 8-byte Spill
	movq	-3280(%rbp), %r9        # 8-byte Reload
	movq	-3272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-3196(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.112, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.110, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.95, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-3292(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3324(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3344(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3348(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.113, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp351:
	#DEBUG_VALUE: tmp_1 <- [DW_OP_constu 3348, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3352(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.113, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3368(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.114, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.113, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.114, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3372(%rbp), %eax       # 4-byte Reload
	movl	-3348(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3408(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.115, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3416(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.114, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3424(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.115, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3412(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3436(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.116, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI10_1(%rip), %xmm0  # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3456(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3456(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.115, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3436(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3464(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.116, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	-3436(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3468(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.117, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.116, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3468(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3480(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3480(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.117, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3468(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3492(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.118, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3496(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.117, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3492(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3512(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3512(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.119, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-3492(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3524(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3536(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3544(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3544(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3548(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.120, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3552(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.119, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3548(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.95, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3568(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.120, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3348(%rbp), %eax       # 4-byte Reload
	movl	-3548(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3588(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.121, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3592(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.120, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3588(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -3608(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -3616(%rbp)       # 8-byte Spill
	movq	-3616(%rbp), %r9        # 8-byte Reload
	movq	-3608(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.121, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-3588(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3624(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.122, %rcx
	movl	$42, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.121, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3640(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3640(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.122, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movl	-3628(%rbp), %eax       # 4-byte Reload
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movss	%xmm0, -3652(%rbp)      # 4-byte Spill
	movaps	%xmm1, %xmm0
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.123, %rcx
	movl	$16, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3656(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movsd	.LCPI10_1(%rip), %xmm0  # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %rdx
	movabsq	$.L.str.5, %r9
	movq	%rdx, -3664(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3664(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3672(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3672(%rbp), %r8        # 8-byte Reload
	callq	trace_logger_log_double
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.122, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3652(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3680(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.123, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	-3652(%rbp), %xmm1      # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movss	%xmm1, -3684(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.124, %rcx
	movl	$40, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3688(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.123, %rdx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movabsq	$.L.str.5, %r9
	movss	-3684(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%rcx, %rdi
	movq	%rdx, -3696(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3696(%rbp), %rcx       # 8-byte Reload
	callq	trace_logger_log_double
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.124, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movss	-3684(%rbp), %xmm0      # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	cvttss2si	%xmm0, %eax
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.125, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.124, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-3708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp352:
	#DEBUG_VALUE: exp_1_44_x <- 0
	#DEBUG_VALUE: exp_1_44_y <- 4294967295
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -3740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp353:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 3764, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3784(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3788(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.126, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp354:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 3788, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -3792(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3808(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3812(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.127, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3816(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.126, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3812(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3812(%rbp), %eax       # 4-byte Reload
	movl	-3764(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.128, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3864(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.127, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.129, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-3852(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3884(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.129, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -3904(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-3904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -3908(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.130, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3912(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -3920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.129, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3908(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3928(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3928(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3908(%rbp), %eax       # 4-byte Reload
	movl	-3788(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -3944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -3948(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.131, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -3952(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3960(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.130, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3948(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -3968(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -3976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.132, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-3948(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -3980(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -3992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4000(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4004(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.133, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4008(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.132, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4004(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4016(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4024(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4024(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.133, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3764(%rbp), %eax       # 4-byte Reload
	movl	-4004(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.134, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.133, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4064(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4072(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.135, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-4044(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4076(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.135, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.136, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.135, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-3788(%rbp), %eax       # 4-byte Reload
	movl	-4100(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.137, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.136, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-4140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp355:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -4172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp356:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 4196, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4216(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4220(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.138, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp357:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 4220, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4224(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.138, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4240(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4244(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.139, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4248(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4256(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.138, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4244(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4264(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4264(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.139, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4244(%rbp), %eax       # 4-byte Reload
	movl	-4196(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4280(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.140, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4296(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.139, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.141, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-4284(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4316(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4336(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4340(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.142, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4344(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.141, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4340(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4360(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4360(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4340(%rbp), %eax       # 4-byte Reload
	movl	-4220(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.143, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4392(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.142, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4380(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.144, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-4380(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4412(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.144, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4432(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4436(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.145, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4440(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.144, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4436(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4456(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4456(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4464(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.145, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4196(%rbp), %eax       # 4-byte Reload
	movl	-4436(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4472(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4476(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.146, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4480(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4488(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4488(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.145, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4476(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4496(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4504(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4504(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.147, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-4476(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4508(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4520(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4528(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4528(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4532(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.148, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4536(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.147, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4532(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4544(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4544(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4552(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4552(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4560(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4220(%rbp), %eax       # 4-byte Reload
	movl	-4532(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4572(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.149, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4576(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4592(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4592(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-4572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp358:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -4604(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4616(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4624(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4628(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.151, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp359:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 4628, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4632(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4640(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.148, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4572(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4648(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4648(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.152, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-4572(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4660(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4628(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -4680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -4688(%rbp)       # 8-byte Spill
	movq	-4688(%rbp), %r9        # 8-byte Reload
	movq	-4680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.152, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-4628(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4696(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4700(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.153, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4704(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.152, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4700(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-4700(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp360:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -4732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4756(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp361:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 4756, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4760(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4768(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4776(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4776(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4780(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.154, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp362:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 4780, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -4784(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.154, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4800(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4800(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.155, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.154, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.155, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4804(%rbp), %eax       # 4-byte Reload
	movl	-4756(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4840(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4844(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.156, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4848(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4856(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.155, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4844(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4864(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4872(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.157, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-112(%rbp), %r10        # 8-byte Reload
	movl	-4844(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4876(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.157, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4896(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4896(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.158, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -4912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4912(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.157, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.158, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4900(%rbp), %eax       # 4-byte Reload
	movl	-4780(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -4936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4940(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.159, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -4944(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.158, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4940(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -4960(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4968(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.160, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-120(%rbp), %r10        # 8-byte Reload
	movl	-4940(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -4972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -4984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -4992(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-4992(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -4996(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.161, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5000(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.160, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4996(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5016(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5016(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.161, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4756(%rbp), %eax       # 4-byte Reload
	movl	-4996(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5036(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.162, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5040(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.9, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-256(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5048(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.161, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5036(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5056(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5056(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.163, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-256(%rbp), %r10        # 8-byte Reload
	movl	-5036(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5068(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.164, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.163, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5112(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.164, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-4780(%rbp), %eax       # 4-byte Reload
	movl	-5092(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.165, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.10, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-288(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.164, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-288(%rbp), %r10        # 8-byte Reload
	movl	-5132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp363:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -5164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5184(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp364:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 5188, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5200(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5208(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5208(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5212(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.166, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp365:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 5212, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5216(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.166, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5232(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5232(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.167, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.166, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.167, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movl	-5188(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5276(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.168, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5280(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.13, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-392(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5288(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.167, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5276(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5296(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5296(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5304(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.169, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-392(%rbp), %r10        # 8-byte Reload
	movl	-5276(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5308(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.169, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5328(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5328(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.170, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.169, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.170, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	-5212(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5368(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5372(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.171, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5376(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.14, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.170, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5372(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5392(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5392(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5400(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.172, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-432(%rbp), %r10        # 8-byte Reload
	movl	-5372(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5404(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.172, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5424(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5424(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.173, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.172, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5440(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.173, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5188(%rbp), %eax       # 4-byte Reload
	movl	-5428(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5464(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5468(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.174, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5472(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.17, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-528(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5480(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.173, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5488(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5488(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.175, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-528(%rbp), %r10        # 8-byte Reload
	movl	-5468(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5500(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.175, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5520(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5520(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5524(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.176, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5528(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.175, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5524(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5536(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5544(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5544(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5552(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.176, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5212(%rbp), %eax       # 4-byte Reload
	movl	-5524(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5560(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5564(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.177, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5568(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.18, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-560(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5576(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5576(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.176, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5564(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5584(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5592(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-560(%rbp), %r10        # 8-byte Reload
	movl	-5564(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp366:
	#DEBUG_VALUE: exp_1_44_x <- 0
	#DEBUG_VALUE: exp_1_44_y <- 4294967295
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -5596(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5608(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5616(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5616(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5620(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp367:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 5620, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5624(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5632(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5640(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5640(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5644(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.178, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp368:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 5644, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -5648(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.178, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5664(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5664(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.179, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5672(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5680(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.178, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5688(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5696(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.179, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	-5620(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5704(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5708(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.180, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5712(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5720(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.179, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5708(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5736(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5736(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.181, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-5708(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5740(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5760(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5760(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5764(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.182, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5768(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5776(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5776(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.181, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5764(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5784(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5784(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5792(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5764(%rbp), %eax       # 4-byte Reload
	movl	-5644(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5800(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5800(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5804(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.183, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5808(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5816(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5816(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.182, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5804(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5824(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5824(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5832(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5832(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.184, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-5804(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5836(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5848(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5856(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5856(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5860(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.185, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5864(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.184, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5860(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5872(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5880(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5880(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5888(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5620(%rbp), %eax       # 4-byte Reload
	movl	-5860(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5896(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5896(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5900(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.186, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5904(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5912(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5912(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.185, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5900(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5920(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5920(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5928(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5928(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.187, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-5900(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -5932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -5944(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.187, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -5952(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-5952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -5956(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.188, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -5960(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.187, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5956(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -5968(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -5976(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-5976(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -5984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5984(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.188, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5644(%rbp), %eax       # 4-byte Reload
	movl	-5956(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -5992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5992(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5996(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.189, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6000(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6008(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.188, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-5996(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6016(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6016(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6024(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-5996(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp369:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -6028(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6040(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6048(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6048(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6052(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp370:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 6052, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6056(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6064(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6072(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6072(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6076(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.190, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp371:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 6076, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6080(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6088(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.190, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6096(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6096(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.191, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6104(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6112(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.190, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6120(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6120(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6128(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	-6052(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6136(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6140(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.192, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6144(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6152(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6152(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.191, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6140(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6160(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6160(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6168(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6168(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.193, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-6140(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6172(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6184(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6192(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6192(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6196(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.194, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6200(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6208(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6208(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.193, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6196(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6216(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6216(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6224(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6196(%rbp), %eax       # 4-byte Reload
	movl	-6076(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6232(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6232(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.195, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6240(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6248(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6248(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.194, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6236(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6256(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6256(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6264(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6264(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.196, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-6236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6268(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6288(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6288(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6292(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.197, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6296(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.196, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6292(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6304(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6304(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6312(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6312(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6320(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.197, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6052(%rbp), %eax       # 4-byte Reload
	movl	-6292(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6328(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6332(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.198, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6336(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6344(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6344(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.197, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6332(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6360(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.199, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-6332(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6364(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.199, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6384(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6384(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6388(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.200, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6392(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.199, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6388(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6400(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6400(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6408(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6408(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6416(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6076(%rbp), %eax       # 4-byte Reload
	movl	-6388(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6424(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6424(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.201, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6432(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6440(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6440(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6448(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6448(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6456(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6456(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.150, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-6428(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp372:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -6460(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6472(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6472(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6480(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6480(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6484(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.202, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp373:
	#DEBUG_VALUE: tmp <- [DW_OP_constu 6484, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6488(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6496(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6496(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.200, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6504(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6504(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6512(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6512(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.203, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-6428(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6516(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.150, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6484(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6528(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6528(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.111, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -6536(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -6544(%rbp)       # 8-byte Spill
	movq	-6544(%rbp), %r9        # 8-byte Reload
	movq	-6536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.203, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	xorl	%eax, %eax
	movl	-6484(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6552(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6552(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6556(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.204, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6560(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6568(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6568(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.203, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6556(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6576(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6576(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6584(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6584(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-6556(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp374:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -6588(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6600(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6600(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6608(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6608(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6612(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp375:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 6612, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6616(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6624(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6624(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6632(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6632(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6636(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.205, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp376:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 6636, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -6640(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6648(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6656(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6656(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6660(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.206, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6664(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6672(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.205, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6660(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6680(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6680(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6688(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6688(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6660(%rbp), %eax       # 4-byte Reload
	movl	-6612(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6696(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6696(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6700(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.207, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6704(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.3, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-192(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6712(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6712(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.206, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6700(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6720(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6728(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6728(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.208, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-192(%rbp), %r10        # 8-byte Reload
	movl	-6700(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6732(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6744(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6744(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6752(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6752(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6756(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.209, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6760(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6768(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6768(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.208, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6756(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6776(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6776(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6784(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6784(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6756(%rbp), %eax       # 4-byte Reload
	movl	-6636(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6792(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6796(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.210, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6800(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.7, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6808(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6808(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.209, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6796(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6816(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6816(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6824(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6824(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.211, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-224(%rbp), %r10        # 8-byte Reload
	movl	-6796(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6828(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6840(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6840(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.211, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6848(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6848(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6852(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.212, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6856(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.211, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6852(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6864(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6864(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6872(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6880(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6612(%rbp), %eax       # 4-byte Reload
	movl	-6852(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6888(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6892(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.213, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6896(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.11, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-320(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6904(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6904(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.212, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6892(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6912(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6920(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6920(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.214, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-320(%rbp), %r10        # 8-byte Reload
	movl	-6892(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -6924(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -6936(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6936(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -6944(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-6944(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -6948(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.215, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6952(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.214, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6948(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -6960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -6968(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-6968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -6976(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6976(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movl	-6948(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -6984(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6988(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.216, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -6992(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.12, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-352(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.215, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-6988(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7008(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7008(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7016(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7016(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.45, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-352(%rbp), %r10        # 8-byte Reload
	movl	-6988(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp377:
	.loc	1 305 3                 # fft.c:305:3
	movl	$1, (%rsp)
	movl	%eax, -7020(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7032(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7032(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7040(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7040(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7044(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.46, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp378:
	#DEBUG_VALUE: c0_x <- [DW_OP_constu 7044, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -7048(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7056(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7056(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7064(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7064(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7068(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.217, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp379:
	#DEBUG_VALUE: c0_y <- [DW_OP_constu 7068, DW_OP_minus] [%rbp+0]
	movl	$1, (%rsp)
	movl	%eax, -7072(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7088(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7088(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7092(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.218, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7096(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7104(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.217, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7092(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7112(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7112(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7120(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7120(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.218, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7092(%rbp), %eax       # 4-byte Reload
	movl	-7044(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7128(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7128(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7132(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.219, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7136(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.15, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-464(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7144(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.218, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7132(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7152(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7152(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7160(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.220, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-464(%rbp), %r10        # 8-byte Reload
	movl	-7132(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7164(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7176(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7176(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7184(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7184(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7188(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.221, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7192(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7200(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7200(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.220, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7188(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7208(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7208(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7216(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7216(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7188(%rbp), %eax       # 4-byte Reload
	movl	-7068(%rbp), %ebx       # 4-byte Reload
	addl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7224(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7228(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.222, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7232(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.16, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7240(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7240(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.221, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7228(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7248(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7248(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7256(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.223, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-496(%rbp), %r10        # 8-byte Reload
	movl	-7228(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7260(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7272(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7272(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7280(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7280(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7284(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.224, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7288(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.223, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7284(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.45, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7304(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7304(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7312(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7312(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.224, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7044(%rbp), %eax       # 4-byte Reload
	movl	-7284(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7320(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7324(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.225, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7328(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.19, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7336(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7336(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.224, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7324(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7344(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7352(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.226, %rcx
	movl	$30, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-592(%rbp), %r10        # 8-byte Reload
	movl	-7324(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
	movl	$1, (%rsp)
	movl	%eax, -7356(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7368(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	(%r10), %eax
	movl	%eax, %ebx
	movl	%ebx, %r11d
	movq	%rdx, -7376(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-7376(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movl	%eax, -7380(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.227, %rcx
	movl	$13, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7384(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.226, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7380(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %r10d
	movq	%rdx, -7392(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7392(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.46, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7400(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7400(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7408(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7408(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.227, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7068(%rbp), %eax       # 4-byte Reload
	movl	-7380(%rbp), %ebx       # 4-byte Reload
	subl	%ebx, %eax
	movl	%eax, %r14d
	movl	%r14d, %r10d
	movq	%rdx, -7416(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7420(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	movl	$305, %eax              # imm = 0x131
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.228, %rcx
	movl	$31, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7424(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.20, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-624(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7432(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	movabsq	$.L.str.227, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movl	-7420(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edi
	movq	%rdi, -7440(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	-7440(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7448(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7448(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$308, %eax              # imm = 0x134
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.44, %rdx
	movabsq	$.L.str.231, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	-624(%rbp), %r10        # 8-byte Reload
	movl	-7420(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%r10)
.Ltmp380:
	#DEBUG_VALUE: step11:i <- 0
	.loc	1 308 11 is_stmt 1      # fft.c:308:11
	movl	$1, (%rsp)
	movl	%eax, -7452(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.427, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -7464(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -7472(%rbp)       # 8-byte Spill
	movq	-7472(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -7480(%rbp)       # 8-byte Spill
.Ltmp381:
.LBB10_4:                               #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: step11:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11 is_stmt 0        # fft.c:0:11
	movq	-7480(%rbp), %rax       # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.428, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 295 19 is_stmt 1      # fft.c:295:19
	movl	$1, (%rsp)
	movq	%rax, -7488(%rbp)       # 8-byte Spill
	movl	%r10d, -7492(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.429, %r8
	movabsq	$.L.str.427, %rcx
	movq	%rcx, -7504(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.44, %rdx
	movq	%rax, %rdi
	movq	%rdx, -7512(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-7512(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.428, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.44, %rax
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.430, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp382:
	#DEBUG_VALUE: step11:i <- [DW_OP_constu 7488, DW_OP_minus] [%rbp+0]
	.loc	1 310 34                # fft.c:310:34
	movl	$1, (%rsp)
	movl	%r10d, -7516(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.428, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.282, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7528(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7528(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.430, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-152(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7536(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.230, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7540(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.430, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7536(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7552(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7552(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.230, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-7488(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 310 27 is_stmt 0      # fft.c:310:27
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7556(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.431, %rcx
	movl	$38, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7560(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.230, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7556(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7568(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7568(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.431, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7556(%rbp), %r10d      # 4-byte Reload
	movslq	%r10d, %rdx
	movq	%rdx, -7576(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.432, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7580(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.431, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7576(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.6, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7592(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7592(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.432, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7576(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-112(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7600(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.387, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7604(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.432, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7600(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7616(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7616(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.387, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	-7576(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 310 12                # fft.c:310:12
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7620(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.235, %rcx
	movl	$23, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7624(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$6, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -7632(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7632(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.428, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7640(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.235, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	shlq	$6, %rdx
	.loc	1 310 19                # fft.c:310:19
	movq	%rdx, -7648(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.238, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7652(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.424, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.235, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7648(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7664(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7664(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.238, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7648(%rbp), %rdx       # 8-byte Reload
	movq	-664(%rbp), %r11        # 8-byte Reload
	addq	%r11, %rdx
	.loc	1 310 4                 # fft.c:310:4
	movq	%rdx, -7672(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.433, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7676(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.238, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7672(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.33, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -7688(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7688(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.433, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7672(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-80(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 310 25                # fft.c:310:25
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7696(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$310, %r10d             # imm = 0x136
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.434, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7700(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.433, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7696(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.387, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7620(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7712(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$311, %r10d             # imm = 0x137
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.242, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	-7672(%rbp), %r11       # 8-byte Reload
	movl	-7620(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
	.loc	1 311 34 is_stmt 1      # fft.c:311:34
	movl	$1, (%rsp)
	movl	%r10d, -7716(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.430, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7536(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7728(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7728(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.242, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-7488(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 311 27 is_stmt 0      # fft.c:311:27
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7732(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$311, %r10d             # imm = 0x137
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.435, %rcx
	movl	$38, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7736(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$32, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.242, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7732(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7744(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.435, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movl	-7732(%rbp), %r10d      # 4-byte Reload
	movslq	%r10d, %rdx
	movq	%rdx, -7752(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$311, %r10d             # imm = 0x137
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.240, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7756(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.435, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7752(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.8, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -7768(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7768(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.240, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7752(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-120(%rbp), %r11        # 8-byte Reload
	addq	%rdx, %r11
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7776(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$311, %r10d             # imm = 0x137
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.390, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7780(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.240, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7776(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7792(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7792(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.390, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-7752(%rbp), %r11       # 8-byte Reload
	movl	(%rdx,%r11,4), %r10d
	.loc	1 311 4                 # fft.c:311:4
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -7796(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	movl	$311, %r10d             # imm = 0x137
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.436, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7800(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.238, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7672(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.38, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -7808(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7808(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.436, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7672(%rbp), %rdx       # 8-byte Reload
	shlq	$2, %rdx
	movq	-48(%rbp), %r11         # 8-byte Reload
	addq	%rdx, %r11
	.loc	1 311 25                # fft.c:311:25
	movq	%r11, %rdx
	movq	%rax, (%rsp)
	movq	%r11, -7816(%rbp)       # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$311, %r10d             # imm = 0x137
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.437, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7820(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.436, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-7816(%rbp), %rdx       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.390, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-7796(%rbp), %r10d      # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -7832(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7832(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$308, %r10d             # imm = 0x134
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.429, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-7672(%rbp), %r11       # 8-byte Reload
	movl	-7796(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rax,%r11,4)
.Ltmp383:
	.loc	1 308 25 is_stmt 1      # fft.c:308:25
	movl	$1, (%rsp)
	movl	%r10d, -7836(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -7848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7848(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.428, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7856(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.429, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	addq	$1, %rdx
	.loc	1 308 21 is_stmt 0      # fft.c:308:21
	movq	%rdx, -7864(%rbp)       # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$308, %r10d             # imm = 0x134
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.438, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7868(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$8, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -7880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-7880(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.429, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-7864(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7888(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.438, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-7864(%rbp), %rdx       # 8-byte Reload
	cmpq	$8, %rdx
	sete	%r14b
.Ltmp384:
	.loc	1 308 11                # fft.c:308:11
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -7896(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7896(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -7897(%rbp)      # 1-byte Spill
	callq	trace_logger_log_int
	movl	$308, %r10d             # imm = 0x134
	movl	%r10d, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.427, %rdx
	movabsq	$.L.str.439, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -7904(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.426, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -7912(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-7912(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.427, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -7920(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-7920(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.438, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-7897(%rbp), %r14b      # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -7928(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7928(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-7897(%rbp), %r14b      # 1-byte Reload
	testb	$1, %r14b
	movq	-7864(%rbp), %rax       # 8-byte Reload
	movq	%rax, -7480(%rbp)       # 8-byte Spill
	jne	.LBB10_5
	jmp	.LBB10_4
.Ltmp385:
.LBB10_5:                               #   in Loop: Header=BB10_1 Depth=1
	#DEBUG_VALUE: step11:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 11                  # fft.c:0:11
	movl	$297, %eax              # imm = 0x129
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.426, %rdx
	movabsq	$.L.str.425, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 297 35 is_stmt 1      # fft.c:297:35
	movl	$1, (%rsp)
	movl	%eax, -7932(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r10
	movq	%rcx, -7944(%rbp)       # 8-byte Spill
	movq	-7944(%rbp), %r9        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.424, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-664(%rbp), %r10        # 8-byte Reload
	movq	%rdx, -7952(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7952(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.425, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-664(%rbp), %r10        # 8-byte Reload
	addq	$1, %r10
	.loc	1 297 26 is_stmt 0      # fft.c:297:26
	movq	%rdx, -7960(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7960(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -7968(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	movl	$297, %eax              # imm = 0x129
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.426, %rdx
	movabsq	$.L.str.440, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -7972(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -7984(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -7992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-7992(%rbp), %rcx       # 8-byte Reload
	movq	-7992(%rbp), %r9        # 8-byte Reload
	movq	-7984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.425, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-7968(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -8000(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8000(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.440, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-7968(%rbp), %rsi       # 8-byte Reload
	cmpq	$64, %rsi
	sete	%bl
.Ltmp386:
	.loc	1 297 9                 # fft.c:297:9
	movb	%bl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %eax
	movl	%eax, %r10d
	movq	%rcx, %rsi
	movq	%rdx, -8008(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%bl, -8009(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	movl	$297, %eax              # imm = 0x129
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.426, %rdx
	movabsq	$.L.str.441, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -8016(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.442, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8024(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8032(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8032(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -8040(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-8040(%rbp), %r9        # 8-byte Reload
	movq	-8024(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.22, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -8048(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -8056(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-8056(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -8064(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-8064(%rbp), %r9        # 8-byte Reload
	movq	-8048(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.440, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-8009(%rbp), %bl        # 1-byte Reload
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -8072(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-8072(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -8080(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-8080(%rbp), %r11       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movb	-8009(%rbp), %bl        # 1-byte Reload
	testb	$1, %bl
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	jne	.LBB10_6
	jmp	.LBB10_1
.Ltmp387:
.LBB10_6:
	#DEBUG_VALUE: step11:i <- [DW_OP_constu 760, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:tid <- [DW_OP_constu 664, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_512 <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_512 <- [DW_OP_constu 160, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:cos_64 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:sin_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:reversed <- [DW_OP_constu 152, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:smem <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_y <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:data_x <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_y <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:DATA_x <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: step11:work_x <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	.loc	1 0 9                   # fft.c:0:9
	movl	$314, %eax              # imm = 0x13A
	movl	%eax, %edi
	movabsq	$.L.str.423, %rsi
	movabsq	$.L.str.442, %rdx
	movabsq	$.L.str.443, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 314 1 is_stmt 1       # fft.c:314:1
	movl	$1, (%rsp)
	movl	%eax, -8084(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	movabsq	$.L.str.423, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	addq	$8056, %rsp             # imm = 0x1F78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp388:
.Lfunc_end10:
	.size	step11, .Lfunc_end10-step11
	.cfi_endproc
                                        # -- End function
	.globl	fft1D_512               # -- Begin function fft1D_512
	.p2align	4, 0x90
	.type	fft1D_512,@function
fft1D_512:                              # @fft1D_512
.Lfunc_begin11:
	.loc	1 327 0                 # fft.c:327:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$952, %rsp              # imm = 0x3B8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	56(%rbp), %rax
	movq	48(%rbp), %r10
	movq	40(%rbp), %r11
	movq	32(%rbp), %rbx
	movq	24(%rbp), %r14
	movq	16(%rbp), %r15
	movabsq	$.L.str.444, %r12
	xorl	%r13d, %r13d
                                        # kill: def %r13 killed %r13d
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movl	$1, %esi
.Ltmp389:
	.loc	1 315 21 prologue_end   # fft.c:315:21
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, -60(%rbp)         # 4-byte Spill
	movq	%r13, %rsi
	movl	-60(%rbp), %r12d        # 4-byte Reload
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movl	%r12d, %edx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movl	%r12d, %ecx
	movq	%r15, -88(%rbp)         # 8-byte Spill
	movq	%r9, -96(%rbp)          # 8-byte Spill
	movq	%r8, -104(%rbp)         # 8-byte Spill
	movq	%rbx, -112(%rbp)        # 8-byte Spill
	movq	%r14, -120(%rbp)        # 8-byte Spill
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%r10, -136(%rbp)        # 8-byte Spill
	movq	%r11, -144(%rbp)        # 8-byte Spill
	callq	trace_logger_update_status
	movabsq	$.L.str.444, %rdi
	movl	$12, %ecx
	movl	%ecx, %esi
	callq	trace_logger_log_entry
	movl	$1, %ecx
	movl	%ecx, %eax
	movl	$64, %ecx
	movl	%ecx, %esi
	movabsq	$.L.str.33, %r8
	xorl	%ecx, %ecx
	movl	%ecx, %r9d
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -152(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$335, %r12d             # imm = 0x14F
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.445, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	#DEBUG_VALUE: fft1D_512:work_x <- [DW_OP_constu 56, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:work_y <- [DW_OP_constu 48, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:DATA_x <- [DW_OP_constu 72, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:DATA_y <- [DW_OP_constu 80, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:data_x <- [DW_OP_constu 104, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:data_y <- [DW_OP_constu 96, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:smem <- [DW_OP_constu 88, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:reversed <- [DW_OP_constu 120, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:sin_64 <- [DW_OP_constu 112, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:cos_64 <- [DW_OP_constu 144, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:sin_512 <- [DW_OP_constu 136, DW_OP_minus] [%rbp+0]
	#DEBUG_VALUE: fft1D_512:cos_512 <- [DW_OP_constu 128, DW_OP_minus] [%rbp+0]
.Ltmp390:
	#DEBUG_VALUE: fft1D_512:stride <- 64
	.loc	1 335 3                 # fft.c:335:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step1, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.1, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.33, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-136(%rbp), %r10        # 8-byte Reload
	movq	%r10, 32(%rsp)
	movq	-128(%rbp), %r11        # 8-byte Reload
	movq	%r11, 40(%rsp)
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	step1
	movl	$336, %r12d             # imm = 0x150
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.21, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 336 3                 # fft.c:336:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step2, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.285, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rsp)
	callq	step2
	movl	$337, %r12d             # imm = 0x151
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.446, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 337 3                 # fft.c:337:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step3, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.341, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-296(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	step3
	movl	$338, %r12d             # imm = 0x152
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.447, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 338 3                 # fft.c:338:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step4, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.379, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rsp)
	callq	step4
	movl	$339, %r12d             # imm = 0x153
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.448, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 339 3                 # fft.c:339:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step5, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.380, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	step5
	movl	$340, %r12d             # imm = 0x154
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.449, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 340 3                 # fft.c:340:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step6, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.381, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -528(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -536(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -560(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-112(%rbp), %r10        # 8-byte Reload
	movq	%r10, 16(%rsp)
	movq	-144(%rbp), %r11        # 8-byte Reload
	movq	%r11, 24(%rsp)
	callq	step6
	movl	$341, %r12d             # imm = 0x155
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.450, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 341 3                 # fft.c:341:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step7, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.407, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-600(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rsp)
	callq	step7
	movl	$342, %r12d             # imm = 0x156
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.451, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 342 3                 # fft.c:342:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step8, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.420, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -672(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -688(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -696(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-704(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -712(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	step8
	movl	$343, %r12d             # imm = 0x157
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.452, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 343 3                 # fft.c:343:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step9, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.421, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -736(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -768(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-768(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rsp)
	callq	step9
	movl	$344, %r12d             # imm = 0x158
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.453, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 344 3                 # fft.c:344:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step10, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.422, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -832(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-832(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -840(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-856(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -864(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -872(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	step10
	movl	$345, %r12d             # imm = 0x159
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.454, %rcx
	movl	$54, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 345 3                 # fft.c:345:3
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$13, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$step11, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.423, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r12d
	movl	%r12d, %eax
	movl	$64, %r12d
	movl	%r12d, %esi
	movabsq	$.L.str.33, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, -880(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-880(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.38, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
	movl	$1, %r12d
	movl	%r12d, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%r12d, %r12d
	movl	%r12d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -896(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-896(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -912(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %r12d
	movl	%r12d, %edi
	movl	$64, %r12d
	movl	%r12d, %esi
                                        # implicit-def: %rdx
	xorl	%r12d, %r12d
	movl	%r12d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -920(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-920(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
                                        # implicit-def: %rax
                                        # implicit-def: %rcx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-96(%rbp), %r9          # 8-byte Reload
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, 8(%rsp)
	movq	%rax, -936(%rbp)        # 8-byte Spill
	callq	step11
	movl	$351, %r12d             # imm = 0x15F
	movl	%r12d, %edi
	movabsq	$.L.str.444, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.455, %rcx
	movl	$1, %r12d
	movl	%r12d, %r8d
	movl	$1, %r9d
	.loc	1 351 1                 # fft.c:351:1
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movabsq	$.L.str.444, %rdi
	movl	$1, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	movl	%r9d, %ecx
	callq	trace_logger_update_status
	addq	$952, %rsp              # imm = 0x3B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp391:
.Lfunc_end11:
	.size	fft1D_512, .Lfunc_end11-fft1D_512
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
.Lfunc_begin12:
	.loc	1 352 0                 # fft.c:352:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$20904, %rsp            # imm = 0x51A8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	callq	trace_logger_init
	movabsq	$.L.str.500, %rdi
	movl	$487, %eax              # imm = 0x1E7
	movl	%eax, %esi
	callq	trace_logger_register_labelmap
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.457, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -17812(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -17824(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -17832(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-17832(%rbp), %rcx      # 8-byte Reload
	movq	-17832(%rbp), %r9       # 8-byte Reload
	movq	-17824(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.457, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-2096(%rbp), %r10
	movq	%rdx, -17840(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.458, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -17844(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -17856(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -17864(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-17864(%rbp), %rcx      # 8-byte Reload
	movq	-17864(%rbp), %r9       # 8-byte Reload
	movq	-17856(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.458, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-4144(%rbp), %r10
	movq	%rdx, -17872(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.283, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -17876(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -17888(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -17896(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-17896(%rbp), %rcx      # 8-byte Reload
	movq	-17896(%rbp), %r9       # 8-byte Reload
	movq	-17888(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-5936(%rbp), %r10
	movq	%rdx, -17904(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17904(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.241, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -17908(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -17920(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -17928(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-17928(%rbp), %rcx      # 8-byte Reload
	movq	-17928(%rbp), %r9       # 8-byte Reload
	movq	-17920(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-7728(%rbp), %r10
	movq	%rdx, -17936(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17936(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.284, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -17940(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -17952(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -17960(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-17960(%rbp), %rcx      # 8-byte Reload
	movq	-17960(%rbp), %r9       # 8-byte Reload
	movq	-17952(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-9520(%rbp), %r10
	movq	%rdx, -17968(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.237, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -17972(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -17984(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -17992(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-17992(%rbp), %rcx      # 8-byte Reload
	movq	-17992(%rbp), %r9       # 8-byte Reload
	movq	-17984(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-11312(%rbp), %r10
	movq	%rdx, -18000(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18000(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.268, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18004(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18016(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18024(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18024(%rbp), %rcx      # 8-byte Reload
	movq	-18024(%rbp), %r9       # 8-byte Reload
	movq	-18016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-13360(%rbp), %r10
	movq	%rdx, -18032(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18032(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.273, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18036(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18048(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18056(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18056(%rbp), %rcx      # 8-byte Reload
	movq	-18056(%rbp), %r9       # 8-byte Reload
	movq	-18048(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15408(%rbp), %r10
	movq	%rdx, -18064(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18064(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.6, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18068(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18080(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18088(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18088(%rbp), %rcx      # 8-byte Reload
	movq	-18088(%rbp), %r9       # 8-byte Reload
	movq	-18080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15440(%rbp), %r10
	movq	%rdx, -18096(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.8, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18100(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18112(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18120(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18120(%rbp), %rcx      # 8-byte Reload
	movq	-18120(%rbp), %r9       # 8-byte Reload
	movq	-18112(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15472(%rbp), %r10
	movq	%rdx, -18128(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18128(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.281, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18132(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18144(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18152(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18152(%rbp), %rcx      # 8-byte Reload
	movq	-18152(%rbp), %r9       # 8-byte Reload
	movq	-18144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17776(%rbp), %r10
	movq	%rdx, -18160(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18160(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.282, %rcx
	movl	$29, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18164(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18176(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18184(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18184(%rbp), %rcx      # 8-byte Reload
	movq	-18184(%rbp), %r9       # 8-byte Reload
	movq	-18176(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17808(%rbp), %r10
.Ltmp392:
	.loc	1 353 3 prologue_end    # fft.c:353:3
	movq	%rdx, -18192(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18192(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$353, %eax              # imm = 0x161
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.459, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -18196(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.457, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-2096(%rbp), %rdi
	movq	%rdi, -18208(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-18208(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -18216(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18216(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.457, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-2096(%rbp), %r10
	movq	%rdx, -18224(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$354, %eax              # imm = 0x162
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.295, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 354 3                 # fft.c:354:3
	movl	$1, (%rsp)
	movl	%eax, -18228(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.458, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-4144(%rbp), %rdi
	movq	%rdi, -18240(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-18240(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -18248(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18248(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.458, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-4144(%rbp), %r10
	movq	%rdx, -18256(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18256(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$357, %eax              # imm = 0x165
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.2, %rdx
	movabsq	$.L.str.460, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp393:
	#DEBUG_VALUE: main:i <- 0
	.loc	1 357 3                 # fft.c:357:3
	movl	$1, (%rsp)
	movl	%eax, -18260(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.461, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -18272(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -18280(%rbp)      # 8-byte Spill
	movq	-18280(%rbp), %r9       # 8-byte Reload
	movq	-18272(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -18288(%rbp)      # 8-byte Spill
.Ltmp394:
.LBB12_1:                               # =>This Inner Loop Header: Depth=1
	.loc	1 0 3 is_stmt 0         # fft.c:0:3
	movq	-18288(%rbp), %rax      # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.462, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 355 7 is_stmt 1       # fft.c:355:7
	movl	$1, (%rsp)
	movq	%rax, -18296(%rbp)      # 8-byte Spill
	movl	%r10d, -18300(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.463, %r8
	movabsq	$.L.str.461, %rcx
	movq	%rcx, -18312(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-18312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.2, %rdx
	movq	%rax, %rdi
	movq	%rdx, -18320(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-18320(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.462, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.2, %rax
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$358, %r10d             # imm = 0x166
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.32, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp395:
	#DEBUG_VALUE: main:i <- [DW_OP_constu 18296, DW_OP_minus] [%rbp+0]
	.loc	1 358 5                 # fft.c:358:5
	movl	$1, (%rsp)
	movl	%r10d, -18324(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.462, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdx
	movq	%rcx, -18336(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-18336(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.457, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	leaq	-2096(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, -18344(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	leaq	-2096(%rbp), %rdx
	movq	-18296(%rbp), %r11      # 8-byte Reload
	shlq	$2, %r11
	addq	%r11, %rdx
	.loc	1 358 12 is_stmt 0      # fft.c:358:12
	movq	%rdx, -18352(%rbp)      # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$358, %r10d             # imm = 0x166
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.31, %rcx
	movl	$36, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -18356(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.462, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -18368(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	movl	%edx, %r10d
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -18372(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	movl	$358, %r10d             # imm = 0x166
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.464, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -18376(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.32, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-18352(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.31, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movl	-18372(%rbp), %r10d     # 4-byte Reload
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%rcx, -18384(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18384(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$359, %r10d             # imm = 0x167
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.465, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-18296(%rbp), %rax      # 8-byte Reload
	movl	-18372(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, -2096(%rbp,%rax,4)
	.loc	1 359 5 is_stmt 1       # fft.c:359:5
	movl	$1, (%rsp)
	movl	%r10d, -18388(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.462, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdx
	movq	%rcx, -18400(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.458, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	leaq	-4144(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, -18408(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.465, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	leaq	-4144(%rbp), %rdx
	movq	-18296(%rbp), %r11      # 8-byte Reload
	shlq	$2, %r11
	addq	%r11, %rdx
	.loc	1 359 12 is_stmt 0      # fft.c:359:12
	movq	%rdx, -18416(%rbp)      # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$359, %r10d             # imm = 0x167
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.466, %rcx
	movl	$31, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -18420(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.465, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$32, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.467, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rdi
	movq	%rdx, -18432(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -18440(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18440(%rbp), %r9       # 8-byte Reload
	movq	-18432(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$357, %r10d             # imm = 0x165
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.463, %rcx
	movl	$11, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movq	-18296(%rbp), %rax      # 8-byte Reload
	movl	$0, -4144(%rbp,%rax,4)
.Ltmp396:
	.loc	1 357 25 is_stmt 1      # fft.c:357:25
	movl	$1, (%rsp)
	movl	%r10d, -18444(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -18456(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-18456(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.462, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -18464(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18464(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.463, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-18296(%rbp), %rdx      # 8-byte Reload
	addq	$1, %rdx
	.loc	1 357 17 is_stmt 0      # fft.c:357:17
	movq	%rdx, -18472(%rbp)      # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$357, %r10d             # imm = 0x165
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.468, %rcx
	movl	$51, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -18476(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$512, %r9d              # imm = 0x200
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -18488(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-18488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.463, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-18472(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -18496(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18496(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.468, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movq	-18472(%rbp), %rdx      # 8-byte Reload
	cmpq	$512, %rdx              # imm = 0x200
	sete	%r14b
.Ltmp397:
	.loc	1 357 3                 # fft.c:357:3
	movb	%r14b, %r15b
	andb	$1, %r15b
	movzbl	%r15b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rsi
	movq	%rcx, -18504(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%r14b, -18505(%rbp)     # 1-byte Spill
	callq	trace_logger_log_int
	movl	$357, %r10d             # imm = 0x165
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.461, %rdx
	movabsq	$.L.str.469, %rcx
	movl	$2, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -18512(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	xorl	%r9d, %r9d
	movl	%r9d, %eax
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.470, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -18520(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-18520(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.461, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rax, %rsi
	movq	%rdx, -18528(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, %r9
	movq	-18528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.468, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	movb	-18505(%rbp), %r14b     # 1-byte Reload
	andb	$1, %r14b
	movzbl	%r14b, %r10d
	movl	%r10d, %edx
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rcx, -18536(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18536(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	-18505(%rbp), %r14b     # 1-byte Reload
	testb	$1, %r14b
	movq	-18472(%rbp), %rax      # 8-byte Reload
	movq	%rax, -18288(%rbp)      # 8-byte Spill
	jne	.LBB12_2
	jmp	.LBB12_1
.Ltmp398:
.LBB12_2:
	#DEBUG_VALUE: main:i <- [DW_OP_constu 18296, DW_OP_minus] [%rbp+0]
	.loc	1 0 3                   # fft.c:0:3
	movl	$361, %eax              # imm = 0x169
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.39, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 361 3 is_stmt 1       # fft.c:361:3
	movl	$1, (%rsp)
	movl	%eax, -18540(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.283, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-5936(%rbp), %rdi
	movq	%rdi, -18552(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-18552(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -18560(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18560(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.283, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-5936(%rbp), %r10
	movq	%rdx, -18568(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18568(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -18576(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$361, %eax              # imm = 0x169
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.471, %rcx
	movl	$104, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 361 9 is_stmt 0       # fft.c:361:9
	movl	$1, (%rsp)
	movl	%eax, -18580(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.472, %r8
	movabsq	$.L.str.5, %r10
	movq	%rdx, -18592(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18592(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -18600(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	-18600(%rbp), %r9       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.283, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18608(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18616(%rbp)      # 8-byte Spill
	movq	-18616(%rbp), %r9       # 8-byte Reload
	movq	-18608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -18624(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -18632(%rbp)      # 8-byte Spill
	movq	-18632(%rbp), %r9       # 8-byte Reload
	movq	-18624(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1792, %eax             # imm = 0x700
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -18640(%rbp)      # 8-byte Spill
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r9, -18648(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-18648(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -18656(%rbp)      # 8-byte Spill
	movq	-18656(%rbp), %r10      # 8-byte Reload
	movq	%r9, -18664(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-18664(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -18672(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -18680(%rbp)      # 8-byte Spill
	movq	-18680(%rbp), %r9       # 8-byte Reload
	movq	-18672(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$426, %eax              # imm = 0x1AA
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.299, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movabsq	$.Lmain.sin_64, %r10
	movl	$1792, %ebx             # imm = 0x700
	movl	%ebx, %r11d
	movq	-18576(%rbp), %r14      # 8-byte Reload
	movq	%rdi, -18688(%rbp)      # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, -18696(%rbp)      # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -18704(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movl	%eax, -18708(%rbp)      # 4-byte Spill
	movl	%r9d, -18712(%rbp)      # 4-byte Spill
	movq	%rcx, -18720(%rbp)      # 8-byte Spill
	movq	%r8, -18728(%rbp)       # 8-byte Spill
	callq	memcpy
	.loc	1 426 3 is_stmt 1       # fft.c:426:3
	movq	-18688(%rbp), %rdi      # 8-byte Reload
	movq	-18696(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18720(%rbp), %rcx      # 8-byte Reload
	movq	-18728(%rbp), %r8       # 8-byte Reload
	movl	-18712(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.241, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-7728(%rbp), %rdi
	movq	%rdi, -18736(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-18736(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -18744(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18744(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.241, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-7728(%rbp), %r10
	movq	%rdx, -18752(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18752(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -18760(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$426, %eax              # imm = 0x1AA
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.473, %rcx
	movl	$104, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 426 9 is_stmt 0       # fft.c:426:9
	movl	$1, (%rsp)
	movl	%eax, -18764(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.472, %r8
	movabsq	$.L.str.5, %r10
	movq	%rdx, -18776(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18776(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -18784(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	-18784(%rbp), %r9       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.241, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18792(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18800(%rbp)      # 8-byte Spill
	movq	-18800(%rbp), %r9       # 8-byte Reload
	movq	-18792(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -18808(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -18816(%rbp)      # 8-byte Spill
	movq	-18816(%rbp), %r9       # 8-byte Reload
	movq	-18808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1792, %eax             # imm = 0x700
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -18824(%rbp)      # 8-byte Spill
	movq	-18824(%rbp), %r10      # 8-byte Reload
	movq	%r9, -18832(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-18832(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -18840(%rbp)      # 8-byte Spill
	movq	-18840(%rbp), %r10      # 8-byte Reload
	movq	%r9, -18848(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-18848(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -18856(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -18864(%rbp)      # 8-byte Spill
	movq	-18864(%rbp), %r9       # 8-byte Reload
	movq	-18856(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$491, %eax              # imm = 0x1EB
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.301, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movabsq	$.Lmain.sin_512, %r10
	movl	$1792, %ebx             # imm = 0x700
	movl	%ebx, %r11d
	movq	-18760(%rbp), %r14      # 8-byte Reload
	movq	%rdi, -18872(%rbp)      # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, -18880(%rbp)      # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -18888(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movl	%eax, -18892(%rbp)      # 4-byte Spill
	movl	%r9d, -18896(%rbp)      # 4-byte Spill
	movq	%rcx, -18904(%rbp)      # 8-byte Spill
	movq	%r8, -18912(%rbp)       # 8-byte Spill
	callq	memcpy
	.loc	1 491 3 is_stmt 1       # fft.c:491:3
	movq	-18872(%rbp), %rdi      # 8-byte Reload
	movq	-18880(%rbp), %rsi      # 8-byte Reload
	movq	-18888(%rbp), %rdx      # 8-byte Reload
	movq	-18904(%rbp), %rcx      # 8-byte Reload
	movq	-18912(%rbp), %r8       # 8-byte Reload
	movl	-18896(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.284, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-9520(%rbp), %rdi
	movq	%rdi, -18920(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-18920(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -18928(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18928(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.284, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-9520(%rbp), %r10
	movq	%rdx, -18936(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-18936(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -18944(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$491, %eax              # imm = 0x1EB
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.474, %rcx
	movl	$104, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 491 9 is_stmt 0       # fft.c:491:9
	movl	$1, (%rsp)
	movl	%eax, -18948(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.472, %r8
	movabsq	$.L.str.5, %r10
	movq	%rdx, -18960(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-18960(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -18968(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	-18968(%rbp), %r9       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.284, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -18976(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -18984(%rbp)      # 8-byte Spill
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -18992(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19000(%rbp)      # 8-byte Spill
	movq	-19000(%rbp), %r9       # 8-byte Reload
	movq	-18992(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1792, %eax             # imm = 0x700
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -19008(%rbp)      # 8-byte Spill
	movq	-19008(%rbp), %r10      # 8-byte Reload
	movq	%r9, -19016(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-19016(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -19024(%rbp)      # 8-byte Spill
	movq	-19024(%rbp), %r10      # 8-byte Reload
	movq	%r9, -19032(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-19032(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19040(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19048(%rbp)      # 8-byte Spill
	movq	-19048(%rbp), %r9       # 8-byte Reload
	movq	-19040(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$556, %eax              # imm = 0x22C
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.304, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movabsq	$.Lmain.cos_64, %r10
	movl	$1792, %ebx             # imm = 0x700
	movl	%ebx, %r11d
	movq	-18944(%rbp), %r14      # 8-byte Reload
	movq	%rdi, -19056(%rbp)      # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, -19064(%rbp)      # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -19072(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movl	%eax, -19076(%rbp)      # 4-byte Spill
	movl	%r9d, -19080(%rbp)      # 4-byte Spill
	movq	%rcx, -19088(%rbp)      # 8-byte Spill
	movq	%r8, -19096(%rbp)       # 8-byte Spill
	callq	memcpy
	.loc	1 556 3 is_stmt 1       # fft.c:556:3
	movq	-19056(%rbp), %rdi      # 8-byte Reload
	movq	-19064(%rbp), %rsi      # 8-byte Reload
	movq	-19072(%rbp), %rdx      # 8-byte Reload
	movq	-19088(%rbp), %rcx      # 8-byte Reload
	movq	-19096(%rbp), %r8       # 8-byte Reload
	movl	-19080(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.237, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-11312(%rbp), %rdi
	movq	%rdi, -19104(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19104(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19112(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19112(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.237, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-11312(%rbp), %r10
	movq	%rdx, -19120(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19120(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -19128(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$556, %eax              # imm = 0x22C
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.475, %rcx
	movl	$104, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 556 9 is_stmt 0       # fft.c:556:9
	movl	$1, (%rsp)
	movl	%eax, -19132(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.472, %r8
	movabsq	$.L.str.5, %r10
	movq	%rdx, -19144(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-19144(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -19152(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	-19152(%rbp), %r9       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.237, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -19160(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -19168(%rbp)      # 8-byte Spill
	movq	-19168(%rbp), %r9       # 8-byte Reload
	movq	-19160(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19176(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19184(%rbp)      # 8-byte Spill
	movq	-19184(%rbp), %r9       # 8-byte Reload
	movq	-19176(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1792, %eax             # imm = 0x700
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -19192(%rbp)      # 8-byte Spill
	movq	-19192(%rbp), %r10      # 8-byte Reload
	movq	%r9, -19200(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-19200(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -19208(%rbp)      # 8-byte Spill
	movq	-19208(%rbp), %r10      # 8-byte Reload
	movq	%r9, -19216(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-19216(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19224(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19232(%rbp)      # 8-byte Spill
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$622, %eax              # imm = 0x26E
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.47, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movabsq	$.Lmain.cos_512, %r10
	movl	$1792, %ebx             # imm = 0x700
	movl	%ebx, %r11d
	movq	-19128(%rbp), %r14      # 8-byte Reload
	movq	%rdi, -19240(%rbp)      # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, -19248(%rbp)      # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -19256(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movl	%eax, -19260(%rbp)      # 4-byte Spill
	movl	%r9d, -19264(%rbp)      # 4-byte Spill
	movq	%rcx, -19272(%rbp)      # 8-byte Spill
	movq	%r8, -19280(%rbp)       # 8-byte Spill
	callq	memcpy
	.loc	1 622 3 is_stmt 1       # fft.c:622:3
	movq	-19240(%rbp), %rdi      # 8-byte Reload
	movq	-19248(%rbp), %rsi      # 8-byte Reload
	movq	-19256(%rbp), %rdx      # 8-byte Reload
	movq	-19272(%rbp), %rcx      # 8-byte Reload
	movq	-19280(%rbp), %r8       # 8-byte Reload
	movl	-19264(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.268, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-13360(%rbp), %rdi
	movq	%rdi, -19288(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19288(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19296(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19296(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.268, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-13360(%rbp), %r10
	movq	%rdx, -19304(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$623, %eax              # imm = 0x26F
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.50, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 623 3                 # fft.c:623:3
	movl	$1, (%rsp)
	movl	%eax, -19308(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.273, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15408(%rbp), %rdi
	movq	%rdi, -19320(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19320(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19328(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19328(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.273, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15408(%rbp), %r10
	movq	%rdx, -19336(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19336(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$624, %eax              # imm = 0x270
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.53, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 624 3                 # fft.c:624:3
	movl	$1, (%rsp)
	movl	%eax, -19340(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15440(%rbp), %rdi
	movq	%rdi, -19352(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19352(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19360(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19360(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15440(%rbp), %r10
	movq	%rdx, -19368(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$625, %eax              # imm = 0x271
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.56, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 625 3                 # fft.c:625:3
	movl	$1, (%rsp)
	movl	%eax, -19372(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15472(%rbp), %rdi
	movq	%rdi, -19384(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19384(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19392(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19392(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15472(%rbp), %r10
	movq	%rdx, -19400(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$626, %eax              # imm = 0x272
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.313, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 626 3                 # fft.c:626:3
	movl	$1, (%rsp)
	movl	%eax, -19404(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17776(%rbp), %rdi
	movq	%rdi, -19416(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19416(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19424(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19424(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17776(%rbp), %r10
	movq	%rdx, -19432(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19432(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$627, %eax              # imm = 0x273
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.314, %rcx
	movl	$47, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 627 3                 # fft.c:627:3
	movl	$1, (%rsp)
	movl	%eax, -19436(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17808(%rbp), %rdi
	movq	%rdi, -19448(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19448(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19456(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19456(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17808(%rbp), %r10
	movq	%rdx, -19464(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19464(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$627, %eax              # imm = 0x273
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.476, %rcx
	movl	$104, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 627 7 is_stmt 0       # fft.c:627:7
	movl	$1, (%rsp)
	movl	%eax, -19468(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.472, %r8
	movabsq	$.L.str.5, %r10
	movq	%rdx, -19480(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-19480(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -19488(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	-19488(%rbp), %r9       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.282, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -19496(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -19504(%rbp)      # 8-byte Spill
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19496(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19512(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19520(%rbp)      # 8-byte Spill
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$32, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -19528(%rbp)      # 8-byte Spill
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r9, -19536(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-19536(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %esi
	movl	$16, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r9
	movq	%rcx, -19544(%rbp)      # 8-byte Spill
	movq	-19544(%rbp), %r10      # 8-byte Reload
	movq	%r9, -19552(%rbp)       # 8-byte Spill
	movq	%r10, %r9
	movq	-19552(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$5, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19560(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19568(%rbp)      # 8-byte Spill
	movq	-19568(%rbp), %r9       # 8-byte Reload
	movq	-19560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.477, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movq	.Lmain.reversed, %r10
	movq	%r10, -17808(%rbp)
	movq	.Lmain.reversed+8, %r10
	movq	%r10, -17800(%rbp)
	movq	.Lmain.reversed+16, %r10
	movq	%r10, -17792(%rbp)
	movq	.Lmain.reversed+24, %r10
	movq	%r10, -17784(%rbp)
	.loc	1 631 13 is_stmt 1      # fft.c:631:13
	movl	$1, (%rsp)
	movl	%eax, -19572(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19584(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19592(%rbp)      # 8-byte Spill
	movq	-19592(%rbp), %r9       # 8-byte Reload
	movq	-19584(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19600(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19608(%rbp)      # 8-byte Spill
	movq	-19608(%rbp), %r9       # 8-byte Reload
	movq	-19600(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.457, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-2096(%rbp), %rdi
	movq	%rdi, -19616(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19616(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19624(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19624(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.477, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-2096(%rbp), %r10
	.loc	1 631 18 is_stmt 0      # fft.c:631:18
	movq	%rdx, -19632(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19632(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -19640(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.478, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -19644(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19656(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19664(%rbp)      # 8-byte Spill
	movq	-19664(%rbp), %r9       # 8-byte Reload
	movq	-19656(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19672(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19680(%rbp)      # 8-byte Spill
	movq	-19680(%rbp), %r9       # 8-byte Reload
	movq	-19672(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.458, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-4144(%rbp), %rdi
	movq	%rdi, -19688(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19688(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19696(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19696(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.478, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-4144(%rbp), %r10
	.loc	1 631 23                # fft.c:631:23
	movq	%rdx, -19704(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19704(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -19712(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.479, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -19716(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19728(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19736(%rbp)      # 8-byte Spill
	movq	-19736(%rbp), %r9       # 8-byte Reload
	movq	-19728(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19744(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19752(%rbp)      # 8-byte Spill
	movq	-19752(%rbp), %r9       # 8-byte Reload
	movq	-19744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.268, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-13360(%rbp), %rdi
	movq	%rdi, -19760(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19760(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19768(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19768(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.479, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-13360(%rbp), %r10
	.loc	1 631 31                # fft.c:631:31
	movq	%rdx, -19776(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19776(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -19784(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.480, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -19788(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19800(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19808(%rbp)      # 8-byte Spill
	movq	-19808(%rbp), %r9       # 8-byte Reload
	movq	-19800(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19816(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19824(%rbp)      # 8-byte Spill
	movq	-19824(%rbp), %r9       # 8-byte Reload
	movq	-19816(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.273, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15408(%rbp), %rdi
	movq	%rdi, -19832(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19832(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19840(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19840(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.480, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15408(%rbp), %r10
	.loc	1 631 39                # fft.c:631:39
	movq	%rdx, -19848(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19848(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -19856(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.481, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -19860(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19872(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19880(%rbp)      # 8-byte Spill
	movq	-19880(%rbp), %r9       # 8-byte Reload
	movq	-19872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19888(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19896(%rbp)      # 8-byte Spill
	movq	-19896(%rbp), %r9       # 8-byte Reload
	movq	-19888(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.6, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15440(%rbp), %rdi
	movq	%rdi, -19904(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19904(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19912(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19912(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.481, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15440(%rbp), %r10
	.loc	1 631 47                # fft.c:631:47
	movq	%rdx, -19920(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19920(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -19928(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.482, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -19932(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19944(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19952(%rbp)      # 8-byte Spill
	movq	-19952(%rbp), %r9       # 8-byte Reload
	movq	-19944(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -19960(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -19968(%rbp)      # 8-byte Spill
	movq	-19968(%rbp), %r9       # 8-byte Reload
	movq	-19960(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.8, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15472(%rbp), %rdi
	movq	%rdi, -19976(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-19976(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19984(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19984(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.482, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-15472(%rbp), %r10
	.loc	1 631 55                # fft.c:631:55
	movq	%rdx, -19992(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19992(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20000(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.483, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20004(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20016(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20024(%rbp)      # 8-byte Spill
	movq	-20024(%rbp), %r9       # 8-byte Reload
	movq	-20016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20032(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20040(%rbp)      # 8-byte Spill
	movq	-20040(%rbp), %r9       # 8-byte Reload
	movq	-20032(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.281, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17776(%rbp), %rdi
	movq	%rdi, -20048(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-20048(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20056(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20056(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.483, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17776(%rbp), %r10
	.loc	1 631 61                # fft.c:631:61
	movq	%rdx, -20064(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20064(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20072(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.484, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20076(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20088(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20096(%rbp)      # 8-byte Spill
	movq	-20096(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20104(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20112(%rbp)      # 8-byte Spill
	movq	-20112(%rbp), %r9       # 8-byte Reload
	movq	-20104(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.282, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17808(%rbp), %rdi
	movq	%rdi, -20120(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-20120(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20128(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20128(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.484, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-17808(%rbp), %r10
	.loc	1 631 71                # fft.c:631:71
	movq	%rdx, -20136(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20136(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20144(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.485, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20148(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20160(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20168(%rbp)      # 8-byte Spill
	movq	-20168(%rbp), %r9       # 8-byte Reload
	movq	-20160(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20176(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20184(%rbp)      # 8-byte Spill
	movq	-20184(%rbp), %r9       # 8-byte Reload
	movq	-20176(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.283, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-5936(%rbp), %rdi
	movq	%rdi, -20192(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-20192(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20200(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20200(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.485, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-5936(%rbp), %r10
	.loc	1 631 79                # fft.c:631:79
	movq	%rdx, -20208(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20208(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20216(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.486, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20220(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20232(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20240(%rbp)      # 8-byte Spill
	movq	-20240(%rbp), %r9       # 8-byte Reload
	movq	-20232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20248(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20256(%rbp)      # 8-byte Spill
	movq	-20256(%rbp), %r9       # 8-byte Reload
	movq	-20248(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.241, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-7728(%rbp), %rdi
	movq	%rdi, -20264(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-20264(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20272(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20272(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.486, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-7728(%rbp), %r10
	.loc	1 631 88                # fft.c:631:88
	movq	%rdx, -20280(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20280(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20288(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.487, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20292(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20304(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20312(%rbp)      # 8-byte Spill
	movq	-20312(%rbp), %r9       # 8-byte Reload
	movq	-20304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20320(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20328(%rbp)      # 8-byte Spill
	movq	-20328(%rbp), %r9       # 8-byte Reload
	movq	-20320(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.284, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-9520(%rbp), %rdi
	movq	%rdi, -20336(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-20336(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20344(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20344(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.487, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-9520(%rbp), %r10
	.loc	1 631 96                # fft.c:631:96
	movq	%rdx, -20352(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20352(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20360(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.488, %rcx
	movl	$32, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20364(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20376(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20384(%rbp)      # 8-byte Spill
	movq	-20384(%rbp), %r9       # 8-byte Reload
	movq	-20376(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdx
	movq	%rdx, -20392(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -20400(%rbp)      # 8-byte Spill
	movq	-20400(%rbp), %r9       # 8-byte Reload
	movq	-20392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.237, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-11312(%rbp), %rdi
	movq	%rdi, -20408(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	-20408(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20416(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20416(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.488, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	leaq	-11312(%rbp), %r10
	.loc	1 631 3                 # fft.c:631:3
	movq	%rdx, -20424(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20424(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, -20432(%rbp)      # 8-byte Spill
	callq	trace_logger_log_ptr
	movl	$631, %eax              # imm = 0x277
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.489, %rcx
	movl	$54, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20436(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$13, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$fft1D_512, %rdx
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.444, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %r10
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.477, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-19640(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20448(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20448(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.478, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-19712(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20456(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20456(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.479, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-19784(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20464(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20464(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$4, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.480, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-19856(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20472(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20472(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$5, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.481, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-19928(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20480(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20480(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$6, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.482, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20000(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20488(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20488(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$7, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.483, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20072(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20496(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20496(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$8, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.484, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20144(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20504(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20504(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$9, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.485, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20216(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20512(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20512(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$10, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.486, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20288(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20520(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20520(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$11, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.487, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20360(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20528(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20528(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movl	$12, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.488, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20432(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -20536(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-20536(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_ptr
	movq	-19640(%rbp), %rdi      # 8-byte Reload
	movq	-19712(%rbp), %rsi      # 8-byte Reload
	movq	-19784(%rbp), %rdx      # 8-byte Reload
	movq	-19856(%rbp), %rcx      # 8-byte Reload
	movq	-19928(%rbp), %r8       # 8-byte Reload
	movq	-20000(%rbp), %r9       # 8-byte Reload
	movq	-20072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	-20144(%rbp), %r11      # 8-byte Reload
	movq	%r11, 8(%rsp)
	movq	-20216(%rbp), %r14      # 8-byte Reload
	movq	%r14, 16(%rsp)
	movq	-20288(%rbp), %r15      # 8-byte Reload
	movq	%r15, 24(%rsp)
	movq	-20360(%rbp), %r12      # 8-byte Reload
	movq	%r12, 32(%rsp)
	movq	-20432(%rbp), %r13      # 8-byte Reload
	movq	%r13, 40(%rsp)
	callq	fft1D_512
	movl	$636, %eax              # imm = 0x27C
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.470, %rdx
	movabsq	$.L.str.490, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
.Ltmp399:
	#DEBUG_VALUE: main:i <- 0
	.loc	1 636 3 is_stmt 1       # fft.c:636:3
	movl	$1, (%rsp)
	movl	%eax, -20540(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.491, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -20552(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, -20560(%rbp)      # 8-byte Spill
	movq	-20560(%rbp), %r9       # 8-byte Reload
	movq	-20552(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -20568(%rbp)      # 8-byte Spill
.Ltmp400:
.LBB12_3:                               # =>This Inner Loop Header: Depth=1
	.loc	1 0 3 is_stmt 0         # fft.c:0:3
	movq	-20568(%rbp), %rax      # 8-byte Reload
	movq	$-1, %rdi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.28, %rcx
	movl	$53, %r8d
                                        # kill: def %r8 killed %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	.loc	1 355 7 is_stmt 1       # fft.c:355:7
	movl	$1, (%rsp)
	movq	%rax, -20576(%rbp)      # 8-byte Spill
	movl	%r10d, -20580(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r9d, %edx
	movl	$1, %r9d
	movl	%r9d, %eax
	movabsq	$.L.str.29, %r8
	movabsq	$.L.str.491, %rcx
	movq	%rcx, -20592(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-20592(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.470, %rdx
	movq	%rax, %rdi
	movq	%rdx, -20600(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rax, %r9
	movq	-20600(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.470, %rax
	movq	-20576(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$637, %r10d             # imm = 0x27D
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.492, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
.Ltmp401:
	#DEBUG_VALUE: main:i <- [DW_OP_constu 20576, DW_OP_minus] [%rbp+0]
	.loc	1 637 32                # fft.c:637:32
	movl	$1, (%rsp)
	movl	%r10d, -20604(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-20576(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdx
	movq	%rcx, -20616(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-20616(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.457, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	leaq	-2096(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, -20624(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20624(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.492, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	leaq	-2096(%rbp), %rdx
	movq	-20576(%rbp), %r11      # 8-byte Reload
	shlq	$2, %r11
	addq	%r11, %rdx
	movq	%rdx, -20632(%rbp)      # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$637, %r10d             # imm = 0x27D
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.62, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -20636(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.492, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-20632(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -20648(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.62, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-20576(%rbp), %rdx      # 8-byte Reload
	movl	-2096(%rbp,%rdx,4), %r10d
	.loc	1 637 40 is_stmt 0      # fft.c:637:40
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -20652(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	movl	$637, %r10d             # imm = 0x27D
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.493, %rcx
	movl	$32, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -20656(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.28, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	-20576(%rbp), %rdx      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdx
	movq	%rcx, -20664(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-20664(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %r10d
	movl	%r10d, %eax
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.458, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rcx
	leaq	-4144(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, -20672(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20672(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.493, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	leaq	-4144(%rbp), %rdx
	movq	-20576(%rbp), %r11      # 8-byte Reload
	shlq	$2, %r11
	addq	%r11, %rdx
	movq	%rdx, -20680(%rbp)      # 8-byte Spill
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$637, %r10d             # imm = 0x27D
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.65, %rcx
	movl	$30, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -20684(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$.L.str.493, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rcx
	movq	%rax, %rdi
	movq	-20680(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -20696(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20696(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %edi
	movl	$32, %r10d
	movl	%r10d, %esi
	movl	$1, %r10d
	movl	%r10d, %ecx
	movabsq	$.L.str.65, %r8
	xorl	%r10d, %r10d
	movl	%r10d, %r9d
	movabsq	$.L.str.5, %rax
	movq	-20576(%rbp), %rdx      # 8-byte Reload
	movl	-4144(%rbp,%rdx,4), %r10d
	.loc	1 637 5                 # fft.c:637:5
	movl	%r10d, %ebx
	movl	%ebx, %edx
	movq	%rax, (%rsp)
	movl	%r10d, -20700(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	movl	$637, %r10d             # imm = 0x27D
	movl	%r10d, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.494, %rcx
	movl	$54, %r10d
	movl	%r10d, %r8d
	xorl	%r9d, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, -20704(%rbp)     # 4-byte Spill
	callq	trace_logger_log0
	movl	$4, %r9d
	movl	%r9d, %edi
	movl	$64, %r9d
	movl	%r9d, %esi
	movabsq	$printf, %rdx
	movl	$1, %r9d
	movl	%r9d, %ecx
	movabsq	$.L.str.495, %r8
	xorl	%r9d, %r9d
                                        # kill: def %r9 killed %r9d
	movabsq	$.L.str.5, %rax
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$1, %r10d
	movl	%r10d, %edi
	movl	$64, %r10d
	movl	%r10d, %esi
	movabsq	$.L.str.496, %rdx
	xorl	%r10d, %r10d
	movl	%r10d, %eax
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rcx
	movq	%rcx, -20712(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r9
	movq	-20712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_string
	movabsq	$.L.str, %rdi
	movl	-20652(%rbp), %esi      # 4-byte Reload
	movl	-20700(%rbp), %edx      # 4-byte Reload
	movb	$0, %al
	callq	printf
	movl	$19134, %edx            # imm = 0x4ABE
	movl	%edx, %edi
	movl	$32, %edx
	movl	%edx, %esi
	movl	$1, %edx
	movl	%edx, %ecx
	movabsq	$.L.str.494, %r8
	xorl	%edx, %edx
	movl	%edx, %r9d
	movabsq	$.L.str.5, %r11
.Ltmp402:
	.loc	1 636 23 is_stmt 1      # fft.c:636:23
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$636, %eax              # imm = 0x27C
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.29, %rcx
	movl	$11, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20716(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %r11
	movq	%rcx, -20728(%rbp)      # 8-byte Spill
	movq	-20728(%rbp), %r9       # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.28, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-20576(%rbp), %r11      # 8-byte Reload
	movq	%rdx, -20736(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movq	-20736(%rbp), %r14      # 8-byte Reload
	movq	%r14, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.29, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20576(%rbp), %r11      # 8-byte Reload
	addq	$1, %r11
	.loc	1 636 17 is_stmt 0      # fft.c:636:17
	movq	%rdx, -20744(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movq	-20744(%rbp), %r14      # 8-byte Reload
	movq	%r14, (%rsp)
	movq	%r11, -20752(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	movl	$636, %eax              # imm = 0x27C
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.42, %rcx
	movl	$51, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20756(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.4, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -20768(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -20776(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-20776(%rbp), %rcx      # 8-byte Reload
	movq	-20776(%rbp), %r9       # 8-byte Reload
	movq	-20768(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movabsq	$.L.str.29, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	%rcx, %rdi
	movq	-20752(%rbp), %r11      # 8-byte Reload
	movq	%rdx, -20784(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movq	-20784(%rbp), %r14      # 8-byte Reload
	movq	%r14, (%rsp)
	callq	trace_logger_log_int
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movq	-20752(%rbp), %rsi      # 8-byte Reload
	cmpq	$2, %rsi
	sete	%r15b
.Ltmp403:
	.loc	1 636 3                 # fft.c:636:3
	movb	%r15b, %r12b
	andb	$1, %r12b
	movzbl	%r12b, %eax
	movl	%eax, %r11d
	movq	%rcx, %rsi
	movq	%rdx, -20792(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movq	-20792(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	movb	%r15b, -20793(%rbp)     # 1-byte Spill
	callq	trace_logger_log_int
	movl	$636, %eax              # imm = 0x27C
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.491, %rdx
	movabsq	$.L.str.497, %rcx
	movl	$2, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, -20800(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.498, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -20808(%rbp)      # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -20816(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-20816(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -20824(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	-20824(%rbp), %r9       # 8-byte Reload
	movq	-20808(%rbp), %r14      # 8-byte Reload
	movq	%r14, (%rsp)
	callq	trace_logger_log_int
	movl	$2, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	movabsq	$.L.str.491, %r8
	movabsq	$.L.str.5, %rsi
	movq	%rsi, -20832(%rbp)      # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -20840(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-20840(%rbp), %r9       # 8-byte Reload
	movq	%rcx, -20848(%rbp)      # 8-byte Spill
	movq	%r9, %rcx
	movq	-20848(%rbp), %r9       # 8-byte Reload
	movq	-20832(%rbp), %r11      # 8-byte Reload
	movq	%r11, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$.L.str.42, %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movabsq	$.L.str.5, %rdx
	movb	-20793(%rbp), %r15b     # 1-byte Reload
	andb	$1, %r15b
	movzbl	%r15b, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, -20856(%rbp)      # 8-byte Spill
	movq	%rcx, %rsi
	movq	-20856(%rbp), %r11      # 8-byte Reload
	movq	%rdx, -20864(%rbp)      # 8-byte Spill
	movq	%r11, %rdx
	movq	-20864(%rbp), %r14      # 8-byte Reload
	movq	%r14, (%rsp)
	callq	trace_logger_log_int
	movb	-20793(%rbp), %r15b     # 1-byte Reload
	testb	$1, %r15b
	movq	-20752(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -20568(%rbp)      # 8-byte Spill
	jne	.LBB12_4
	jmp	.LBB12_3
.Ltmp404:
.LBB12_4:
	#DEBUG_VALUE: main:i <- [DW_OP_constu 18296, DW_OP_minus] [%rbp+0]
	.loc	1 0 3                   # fft.c:0:3
	movl	$640, %eax              # imm = 0x280
	movl	%eax, %edi
	movabsq	$.L.str.456, %rsi
	movabsq	$.L.str.498, %rdx
	movabsq	$.L.str.499, %rcx
	movl	$1, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	$1, %eax
	.loc	1 640 3 is_stmt 1       # fft.c:640:3
	movl	$1, (%rsp)
	movl	%eax, -20868(%rbp)      # 4-byte Spill
	callq	trace_logger_log0
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movabsq	$.L.str.467, %r8
	movabsq	$.L.str.5, %rdi
	movq	%rdi, -20880(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -20888(%rbp)      # 8-byte Spill
	movq	-20888(%rbp), %r9       # 8-byte Reload
	movq	-20880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movabsq	$.L.str.456, %rdi
	movl	$1, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	trace_logger_update_status
	xorl	%eax, %eax
	addq	$20904, %rsp            # imm = 0x51A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp405:
.Lfunc_end12:
	.size	main, .Lfunc_end12-main
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	4, 0x90         # -- Begin function _GLOBAL__sub_I_trace_logger.cpp
	.type	_GLOBAL__sub_I_trace_logger.cpp,@function
_GLOBAL__sub_I_trace_logger.cpp:        # @_GLOBAL__sub_I_trace_logger.cpp
.Lfunc_begin13:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	popq	%rbp
	jmp	__cxx_global_var_init.1 # TAILCALL
.Lfunc_end13:
	.size	_GLOBAL__sub_I_trace_logger.cpp, .Lfunc_end13-_GLOBAL__sub_I_trace_logger.cpp
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function __cxx_global_var_init
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
.Lfunc_begin14:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z8gz_filesB5cxx11, %eax
	movl	%eax, %edi
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
	movl	$__dtor__Z8gz_filesB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	atexit                  # TAILCALL
.Lfunc_end14:
	.size	__cxx_global_var_init, .Lfunc_end14-__cxx_global_var_init
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function __cxx_global_var_init.1
	.type	__cxx_global_var_init.1,@function
__cxx_global_var_init.1:                # @__cxx_global_var_init.1
.Lfunc_begin15:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z12labelmap_strB5cxx11, %eax
	movl	%eax, %edi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev
	movl	$__dtor__Z12labelmap_strB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	atexit                  # TAILCALL
.Lfunc_end15:
	.size	__cxx_global_var_init.1, .Lfunc_end15-__cxx_global_var_init.1
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function __dtor__Z12labelmap_strB5cxx11
	.type	__dtor__Z12labelmap_strB5cxx11,@function
__dtor__Z12labelmap_strB5cxx11:         # @__dtor__Z12labelmap_strB5cxx11
.Lfunc_begin16:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z12labelmap_strB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev # TAILCALL
.Lfunc_end16:
	.size	__dtor__Z12labelmap_strB5cxx11, .Lfunc_end16-__dtor__Z12labelmap_strB5cxx11
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
.Lfunc_begin17:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev # TAILCALL
.Lfunc_end17:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev, .Lfunc_end17-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text.startup,"ax",@progbits
	.p2align	4, 0x90         # -- Begin function __dtor__Z8gz_filesB5cxx11
	.type	__dtor__Z8gz_filesB5cxx11,@function
__dtor__Z8gz_filesB5cxx11:              # @__dtor__Z8gz_filesB5cxx11
.Lfunc_begin18:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z8gz_filesB5cxx11, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev # TAILCALL
.Lfunc_end18:
	.size	__dtor__Z8gz_filesB5cxx11, .Lfunc_end18-__dtor__Z8gz_filesB5cxx11
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev
.Lfunc_begin19:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev # TAILCALL
.Lfunc_end19:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev, .Lfunc_end19-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev
.Lfunc_begin20:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception0
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
.Ltmp406:
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
.Ltmp407:
	jmp	.LBB20_1
.LBB20_1:
	movq	-8(%rbp), %rax          # 8-byte Reload
	movq	%rax, %rdi
	addq	$32, %rsp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev # TAILCALL
.LBB20_2:
.Ltmp408:
	movl	%edx, %ecx
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rdx, %rdi
	movl	%ecx, -12(%rbp)         # 4-byte Spill
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	__clang_call_terminate
.Lfunc_end20:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev, .Lfunc_end20-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EED2Ev
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table20:
.Lexception0:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp406-.Lfunc_begin20 # >> Call Site 1 <<
	.long	.Ltmp407-.Ltmp406       #   Call between .Ltmp406 and .Ltmp407
	.long	.Ltmp408-.Lfunc_begin20 #     jumps to .Ltmp408
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
.Lfunc_begin21:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	16(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end21:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv, .Lfunc_end21-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin22:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	cmpq	$0, %rsi
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	je	.LBB22_3
# %bb.1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jmp	.LBB22_2
.LBB22_2:                               # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jne	.LBB22_2
.LBB22_3:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end22:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E, .Lfunc_end22-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
.Lfunc_begin23:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end23:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev, .Lfunc_end23-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text.__clang_call_terminate,"axG",@progbits,__clang_call_terminate,comdat
	.hidden	__clang_call_terminate  # -- Begin function __clang_call_terminate
	.weak	__clang_call_terminate
	.p2align	4, 0x90
	.type	__clang_call_terminate,@function
__clang_call_terminate:                 # @__clang_call_terminate
.Lfunc_begin24:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	__cxa_begin_catch
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	_ZSt9terminatev
.Lfunc_end24:
	.size	__clang_call_terminate, .Lfunc_end24-__clang_call_terminate
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
.Lfunc_begin25:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	24(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end25:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base, .Lfunc_end25-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
.Lfunc_begin26:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	16(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end26:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base, .Lfunc_end26-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin27:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-16(%rbp), %rsi         # 8-byte Reload
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E # TAILCALL
.Lfunc_end27:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E, .Lfunc_end27-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin28:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception1
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
.Ltmp409:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
.Ltmp410:
	jmp	.LBB28_1
.LBB28_1:
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB28_2:
.Ltmp411:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	callq	__clang_call_terminate
.Lfunc_end28:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E, .Lfunc_end28-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table28:
.Lexception1:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp409-.Lfunc_begin28 # >> Call Site 1 <<
	.long	.Ltmp410-.Ltmp409       #   Call between .Ltmp409 and .Ltmp410
	.long	.Ltmp411-.Lfunc_begin28 #     jumps to .Ltmp411
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
.Lfunc_begin29:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception2
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
.Ltmp412:
	movl	$1, %ecx
	movl	%ecx, %edx
	movq	%rax, %rdi
	movq	-8(%rbp), %rsi          # 8-byte Reload
	callq	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
.Ltmp413:
	jmp	.LBB29_1
.LBB29_1:
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB29_2:
.Ltmp414:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -12(%rbp)         # 4-byte Spill
	callq	__clang_call_terminate
.Lfunc_end29:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E, .Lfunc_end29-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table29:
.Lexception2:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp412-.Lfunc_begin29 # >> Call Site 1 <<
	.long	.Ltmp413-.Ltmp412       #   Call between .Ltmp412 and .Ltmp413
	.long	.Ltmp414-.Lfunc_begin29 #     jumps to .Ltmp414
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
.Lfunc_begin30:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end30:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv, .Lfunc_end30-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
.Lfunc_begin31:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m # TAILCALL
.Lfunc_end31:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m, .Lfunc_end31-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE10deallocateERSD_PSC_m
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m
.Lfunc_begin32:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	popq	%rbp
	jmp	_ZdlPv                  # TAILCALL
.Lfunc_end32:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m, .Lfunc_end32-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE10deallocateEPSD_m
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,"axG",@progbits,_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,comdat
	.weak	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv # -- Begin function _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.p2align	4, 0x90
	.type	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,@function
_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv: # @_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
.Lfunc_begin33:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$32, %rdi
	popq	%rbp
	jmp	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # TAILCALL
.Lfunc_end33:
	.size	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv, .Lfunc_end33-_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_ # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
.Lfunc_begin34:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_ # TAILCALL
.Lfunc_end34:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_, .Lfunc_end34-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE7destroyISB_EEvRSD_PT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_ # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_
.Lfunc_begin35:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	popq	%rbp
	jmp	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev # TAILCALL
.Lfunc_end35:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_, .Lfunc_end35-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE7destroyISC_EEvPT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev,"axG",@progbits,_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev,comdat
	.weak	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev # -- Begin function _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev
	.p2align	4, 0x90
	.type	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev,@function
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev: # @_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev
.Lfunc_begin36:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev # TAILCALL
.Lfunc_end36:
	.size	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev, .Lfunc_end36-_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,"axG",@progbits,_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,comdat
	.weak	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # -- Begin function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,@function
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv: # @_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
.Lfunc_begin37:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # TAILCALL
.Lfunc_end37:
	.size	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv, .Lfunc_end37-_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,"axG",@progbits,_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,comdat
	.weak	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # -- Begin function _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,@function
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv: # @_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
.Lfunc_begin38:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end38:
	.size	_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv, .Lfunc_end38-_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev
.Lfunc_begin39:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev # TAILCALL
.Lfunc_end39:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev, .Lfunc_end39-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev
.Lfunc_begin40:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
	movq	-8(%rbp), %rdi          # 8-byte Reload
	addq	$8, %rdi
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt15_Rb_tree_headerC2Ev # TAILCALL
.Lfunc_end40:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev, .Lfunc_end40-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,"axG",@progbits,_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,comdat
	.weak	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev # -- Begin function _ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.p2align	4, 0x90
	.type	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,@function
_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev: # @_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
.Lfunc_begin41:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev # TAILCALL
.Lfunc_end41:
	.size	_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev, .Lfunc_end41-_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,"axG",@progbits,_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,comdat
	.weak	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev # -- Begin function _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
	.p2align	4, 0x90
	.type	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,@function
_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev: # @_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
.Lfunc_begin42:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end42:
	.size	_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev, .Lfunc_end42-_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt15_Rb_tree_headerC2Ev,"axG",@progbits,_ZNSt15_Rb_tree_headerC2Ev,comdat
	.weak	_ZNSt15_Rb_tree_headerC2Ev # -- Begin function _ZNSt15_Rb_tree_headerC2Ev
	.p2align	4, 0x90
	.type	_ZNSt15_Rb_tree_headerC2Ev,@function
_ZNSt15_Rb_tree_headerC2Ev:             # @_ZNSt15_Rb_tree_headerC2Ev
.Lfunc_begin43:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$0, (%rdi)
	popq	%rbp
	jmp	_ZNSt15_Rb_tree_header8_M_resetEv # TAILCALL
.Lfunc_end43:
	.size	_ZNSt15_Rb_tree_headerC2Ev, .Lfunc_end43-_ZNSt15_Rb_tree_headerC2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt15_Rb_tree_header8_M_resetEv,"axG",@progbits,_ZNSt15_Rb_tree_header8_M_resetEv,comdat
	.weak	_ZNSt15_Rb_tree_header8_M_resetEv # -- Begin function _ZNSt15_Rb_tree_header8_M_resetEv
	.p2align	4, 0x90
	.type	_ZNSt15_Rb_tree_header8_M_resetEv,@function
_ZNSt15_Rb_tree_header8_M_resetEv:      # @_ZNSt15_Rb_tree_header8_M_resetEv
.Lfunc_begin44:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, 8(%rdi)
	movq	%rdi, 16(%rdi)
	movq	%rdi, 24(%rdi)
	movq	$0, 32(%rdi)
	popq	%rbp
	retq
.Lfunc_end44:
	.size	_ZNSt15_Rb_tree_header8_M_resetEv, .Lfunc_end44-_ZNSt15_Rb_tree_header8_M_resetEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
.Lfunc_begin45:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end45:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev, .Lfunc_end45-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEC2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_Z12create_tracePKc     # -- Begin function _Z12create_tracePKc
	.p2align	4, 0x90
	.type	_Z12create_tracePKc,@function
_Z12create_tracePKc:                    # @_Z12create_tracePKc
.Lfunc_begin46:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception3
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB46_2
# %bb.1:
	movabsq	$.L.str.3.502, %rdi
	movabsq	$.L.str.4.503, %rsi
	movl	$10, %edx
	movabsq	$.L__PRETTY_FUNCTION__._Z12create_tracePKc, %rcx
	callq	__assert_fail
.LBB46_2:
	movl	$88, %eax
	movl	%eax, %edi
	callq	_Znwm
	movq	%rax, %rdi
.Ltmp415:
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-8(%rbp), %rsi          # 8-byte Reload
	callq	_ZN10trace_infoC2EPKc
.Ltmp416:
	jmp	.LBB46_3
.LBB46_3:
	callq	_ZTW5trace
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB46_4:
.Ltmp417:
	movl	%edx, %ecx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZdlPv
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_Unwind_Resume
.Lfunc_end46:
	.size	_Z12create_tracePKc, .Lfunc_end46-_Z12create_tracePKc
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table46:
.Lexception3:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
	.long	.Lfunc_begin46-.Lfunc_begin46 # >> Call Site 1 <<
	.long	.Ltmp415-.Lfunc_begin46 #   Call between .Lfunc_begin46 and .Ltmp415
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp415-.Lfunc_begin46 # >> Call Site 2 <<
	.long	.Ltmp416-.Ltmp415       #   Call between .Ltmp415 and .Ltmp416
	.long	.Ltmp417-.Lfunc_begin46 #     jumps to .Ltmp417
	.byte	0                       #   On action: cleanup
	.long	.Ltmp416-.Lfunc_begin46 # >> Call Site 3 <<
	.long	.Lfunc_end46-.Ltmp416   #   Call between .Ltmp416 and .Lfunc_end46
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.p2align	2
                                        # -- End function
	.text
	.hidden	_ZTW5trace              # -- Begin function _ZTW5trace
	.weak	_ZTW5trace
	.p2align	4, 0x90
	.type	_ZTW5trace,@function
_ZTW5trace:                             # @_ZTW5trace
.Lfunc_begin47:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%fs:0, %rax
	leaq	trace@TPOFF(%rax), %rax
	popq	%rbp
	retq
.Lfunc_end47:
	.size	_ZTW5trace, .Lfunc_end47-_ZTW5trace
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN10trace_infoC2EPKc,"axG",@progbits,_ZN10trace_infoC2EPKc,comdat
	.weak	_ZN10trace_infoC2EPKc   # -- Begin function _ZN10trace_infoC2EPKc
	.p2align	4, 0x90
	.type	_ZN10trace_infoC2EPKc,@function
_ZN10trace_infoC2EPKc:                  # @_ZN10trace_infoC2EPKc
.Lfunc_begin48:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception4
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	callq	_ZNSaIcEC2Ev
.Ltmp418:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_
.Ltmp419:
	jmp	.LBB48_1
.LBB48_1:
	leaq	-8(%rbp), %rdi
	callq	_ZNSaIcED2Ev
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	$0, 40(%rdi)
	addq	$48, %rdi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movl	$1, 80(%rdi)
	addq	$48, %rsp
	popq	%rbp
	retq
.LBB48_2:
.Ltmp420:
	leaq	-8(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movl	%ecx, -44(%rbp)         # 4-byte Spill
	callq	_ZNSaIcED2Ev
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_Unwind_Resume
.Lfunc_end48:
	.size	_ZN10trace_infoC2EPKc, .Lfunc_end48-_ZN10trace_infoC2EPKc
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table48:
.Lexception4:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	"\234"                  # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
	.long	.Ltmp418-.Lfunc_begin48 # >> Call Site 1 <<
	.long	.Ltmp419-.Ltmp418       #   Call between .Ltmp418 and .Ltmp419
	.long	.Ltmp420-.Lfunc_begin48 #     jumps to .Ltmp420
	.byte	0                       #   On action: cleanup
	.long	.Ltmp419-.Lfunc_begin48 # >> Call Site 2 <<
	.long	.Lfunc_end48-.Ltmp419   #   Call between .Ltmp419 and .Lfunc_end48
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.p2align	2
                                        # -- End function
	.text
	.globl	_Z14write_labelmapv     # -- Begin function _Z14write_labelmapv
	.p2align	4, 0x90
	.type	_Z14write_labelmapv,@function
_Z14write_labelmapv:                    # @_Z14write_labelmapv
.Lfunc_begin49:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	$.L.str.5.504, %ecx
	movl	%ecx, %esi
	movl	$26, %edx
	movq	%rax, %rdi
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	gzwrite
	movl	$_Z12labelmap_strB5cxx11, %ecx
	movl	%ecx, %esi
	movq	%rsi, %rdi
	movl	%eax, -12(%rbp)         # 4-byte Spill
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movl	%ecx, %edx
	callq	gzwrite
	movl	$.L.str.6.505, %ecx
	movl	%ecx, %esi
	movl	$25, %edx
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movl	%eax, -36(%rbp)         # 4-byte Spill
	addq	$48, %rsp
	popq	%rbp
	jmp	gzwrite                 # TAILCALL
.Lfunc_end49:
	.size	_Z14write_labelmapv, .Lfunc_end49-_Z14write_labelmapv
	.cfi_endproc
                                        # -- End function
	.globl	_Z15open_trace_filev    # -- Begin function _Z15open_trace_filev
	.p2align	4, 0x90
	.type	_Z15open_trace_filev,@function
_Z15open_trace_filev:                   # @_Z15open_trace_filev
.Lfunc_begin50:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$lock, %rdi
	callq	pthread_mutex_lock
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	(%rax), %rsi
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	%rax, -8(%rbp)
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	movb	%al, -21(%rbp)          # 1-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movb	-21(%rbp), %cl          # 1-byte Reload
	testb	$1, %cl
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jne	.LBB50_1
	jmp	.LBB50_2
.LBB50_1:
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, 32(%rax)
	jmp	.LBB50_5
.LBB50_2:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movabsq	$.L.str.7.506, %rsi
	movq	%rax, %rdi
	callq	gzopen
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jne	.LBB50_4
# %bb.3:
	movabsq	$.L.str.8.507, %rdi
	callq	perror
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB50_4:
	callq	_ZTW5trace
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	(%rax), %rsi
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, (%rax)
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, 32(%rax)
	callq	_Z14write_labelmapv
.LBB50_5:
	movabsq	$lock, %rdi
	callq	pthread_mutex_unlock
	movl	%eax, -52(%rbp)         # 4-byte Spill
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end50:
	.size	_Z15open_trace_filev, .Lfunc_end50-_Z15open_trace_filev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
.Lfunc_begin51:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_ # TAILCALL
.Lfunc_end51:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_, .Lfunc_end51-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
.Lfunc_begin52:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv # TAILCALL
.Lfunc_end52:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv, .Lfunc_end52-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_ # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
.Lfunc_begin53:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	cmpq	(%rsi), %rdi
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end53:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_, .Lfunc_end53-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
.Lfunc_begin54:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	leaq	-16(%rbp), %rsi
	movq	%rax, -8(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB54_2
# %bb.1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	leaq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB54_3
	jmp	.LBB54_4
.LBB54_2:
.LBB54_3:
	movabsq	$.L.str.36.508, %rdi
	callq	_ZSt20__throw_out_of_rangePKc
.LBB54_4:
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	addq	$32, %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end54:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_, .Lfunc_end54-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE2atERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
.Lfunc_begin55:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	leaq	-16(%rbp), %rsi
	leaq	-8(%rbp), %rdi
	movq	%rax, -8(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB55_2
# %bb.1:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	leaq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB55_3
	jmp	.LBB55_4
.LBB55_2:
.LBB55_3:
	leaq	-32(%rbp), %rdi
	leaq	-8(%rbp), %rsi
	callq	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
	leaq	-40(%rbp), %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
	movabsq	$_ZStL19piecewise_construct, %rdx
	leaq	-40(%rbp), %rcx
	leaq	-48(%rbp), %r8
	movq	-32(%rbp), %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
.LBB55_4:
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	addq	$32, %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end55:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_, .Lfunc_end55-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_ # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
.Lfunc_begin56:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_ # TAILCALL
.Lfunc_end56:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_, .Lfunc_end56-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE11lower_boundERSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_ # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
.Lfunc_begin57:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	cmpq	(%rsi), %rdi
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end57:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_, .Lfunc_end57-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv,"axG",@progbits,_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv,comdat
	.weak	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv # -- Begin function _ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	.p2align	4, 0x90
	.type	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv,@function
_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv: # @_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
.Lfunc_begin58:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv # TAILCALL
.Lfunc_end58:
	.size	_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv, .Lfunc_end58-_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE8key_compEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
.Lfunc_begin59:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	callq	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	popq	%rbp
	retq
.Lfunc_end59:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv, .Lfunc_end59-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEdeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_,"axG",@progbits,_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_,comdat
	.weak	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_ # -- Begin function _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	.p2align	4, 0x90
	.type	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_,@function
_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_: # @_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
.Lfunc_begin60:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	popq	%rbp
	jmp	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_ # TAILCALL
.Lfunc_end60:
	.size	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_, .Lfunc_end60-_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E,"axG",@progbits,_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E,comdat
	.weak	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E # -- Begin function _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
	.p2align	4, 0x90
	.type	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E,@function
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E: # @_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
.Lfunc_begin61:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rsi), %rsi
	movq	%rsi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end61:
	.size	_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E, .Lfunc_end61-_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2ERKSt17_Rb_tree_iteratorISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_,"axG",@progbits,_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_,comdat
	.weak	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_ # -- Begin function _ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
	.p2align	4, 0x90
	.type	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_,@function
_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_: # @_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
.Lfunc_begin62:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_ # TAILCALL
.Lfunc_end62:
	.size	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_, .Lfunc_end62-_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2IvLb1EEES7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
.Lfunc_begin63:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception5
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
	movq	%rax, %rcx
.Ltmp421:
	movq	%rax, %rdi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
.Ltmp422:
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB63_1
.LBB63_1:
.Ltmp423:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
.Ltmp424:
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB63_2
.LBB63_2:
	movq	-80(%rbp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	je	.LBB63_6
# %bb.3:
.Ltmp425:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
.Ltmp426:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB63_4
.LBB63_4:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB63_7
.LBB63_5:
.Ltmp427:
	movq	%rax, %rdi
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	__cxa_begin_catch
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
.Ltmp428:
	callq	__cxa_rethrow
.Ltmp429:
	jmp	.LBB63_11
.LBB63_6:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E
	leaq	-8(%rbp), %rdi
	movq	-88(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rsi
	movq	%rsi, -104(%rbp)        # 8-byte Spill
.LBB63_7:
	movq	-104(%rbp), %rax        # 8-byte Reload
	addq	$144, %rsp
	popq	%rbp
	retq
.LBB63_8:
.Ltmp430:
	movl	%edx, %ecx
.Ltmp431:
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	__cxa_end_catch
.Ltmp432:
	jmp	.LBB63_9
.LBB63_9:
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_Unwind_Resume
.LBB63_10:
.Ltmp433:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	callq	__clang_call_terminate
.LBB63_11:
.Lfunc_end63:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_, .Lfunc_end63-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table63:
.Lexception5:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	"\326\200\200"          # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	78                      # Call site table length
	.long	.Lfunc_begin63-.Lfunc_begin63 # >> Call Site 1 <<
	.long	.Ltmp421-.Lfunc_begin63 #   Call between .Lfunc_begin63 and .Ltmp421
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp421-.Lfunc_begin63 # >> Call Site 2 <<
	.long	.Ltmp426-.Ltmp421       #   Call between .Ltmp421 and .Ltmp426
	.long	.Ltmp427-.Lfunc_begin63 #     jumps to .Ltmp427
	.byte	1                       #   On action: 1
	.long	.Ltmp426-.Lfunc_begin63 # >> Call Site 3 <<
	.long	.Ltmp428-.Ltmp426       #   Call between .Ltmp426 and .Ltmp428
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp428-.Lfunc_begin63 # >> Call Site 4 <<
	.long	.Ltmp429-.Ltmp428       #   Call between .Ltmp428 and .Ltmp429
	.long	.Ltmp430-.Lfunc_begin63 #     jumps to .Ltmp430
	.byte	0                       #   On action: cleanup
	.long	.Ltmp431-.Lfunc_begin63 # >> Call Site 5 <<
	.long	.Ltmp432-.Ltmp431       #   Call between .Ltmp431 and .Ltmp432
	.long	.Ltmp433-.Lfunc_begin63 #     jumps to .Ltmp433
	.byte	1                       #   On action: 1
	.long	.Ltmp432-.Lfunc_begin63 # >> Call Site 6 <<
	.long	.Lfunc_end63-.Ltmp432   #   Call between .Ltmp432 and .Lfunc_end63
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE,"axG",@progbits,_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE,comdat
	.weak	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE # -- Begin function _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE,@function
_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE: # @_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
.Lfunc_begin64:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end64:
	.size	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE, .Lfunc_end64-_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE,"axG",@progbits,_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE,comdat
	.weak	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE # -- Begin function _ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE,@function
_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE: # @_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
.Lfunc_begin65:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end65:
	.size	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE, .Lfunc_end65-_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE,"axG",@progbits,_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE,comdat
	.weak	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE # -- Begin function _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE,@function
_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE: # @_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
.Lfunc_begin66:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end66:
	.size	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE, .Lfunc_end66-_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
.Lfunc_begin67:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end67:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_, .Lfunc_end67-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEPSt13_Rb_tree_nodeISA_EDpOT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
.Lfunc_begin68:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end68:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E, .Lfunc_end68-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
.Lfunc_begin69:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	leaq	-24(%rbp), %rax
	leaq	-32(%rbp), %rcx
	movq	%rsi, -24(%rbp)
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
	leaq	-32(%rbp), %rcx
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB69_5
# %bb.1:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
	cmpq	$0, %rax
	je	.LBB69_4
# %bb.2:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB69_3
	jmp	.LBB69_4
.LBB69_3:
	movq	$0, -40(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	leaq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB69_24
.LBB69_4:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	jmp	.LBB69_24
.LBB69_5:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB69_6
	jmp	.LBB69_14
.LBB69_6:
	leaq	-48(%rbp), %rax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -48(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rcx, (%rax)
	jne	.LBB69_8
# %bb.7:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	leaq	-16(%rbp), %rdi
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp	.LBB69_13
.LBB69_8:
	leaq	-48(%rbp), %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB69_9
	jmp	.LBB69_12
.LBB69_9:
	leaq	-48(%rbp), %rdx
	movq	-48(%rbp), %rdi
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	cmpq	$0, %rax
	jne	.LBB69_11
# %bb.10:
	leaq	-16(%rbp), %rdi
	leaq	-56(%rbp), %rsi
	movq	$0, -56(%rbp)
	movq	-152(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB69_13
.LBB69_11:
	leaq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp	.LBB69_13
.LBB69_12:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
.LBB69_13:
	jmp	.LBB69_24
.LBB69_14:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-112(%rbp), %rdx        # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB69_15
	jmp	.LBB69_23
.LBB69_15:
	leaq	-64(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rcx, (%rax)
	jne	.LBB69_17
# %bb.16:
	movq	$0, -72(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB69_22
.LBB69_17:
	leaq	-64(%rbp), %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB69_18
	jmp	.LBB69_21
.LBB69_18:
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	cmpq	$0, %rax
	jne	.LBB69_20
# %bb.19:
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rsi
	movq	$0, -80(%rbp)
	movq	-128(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	jmp	.LBB69_22
.LBB69_20:
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rax
	movq	%rax, %rsi
	movq	%rax, %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp	.LBB69_22
.LBB69_21:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
.LBB69_22:
	jmp	.LBB69_24
.LBB69_23:
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	movq	$0, -88(%rbp)
	movq	-128(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
.LBB69_24:
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end69:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_, .Lfunc_end69-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
.Lfunc_begin70:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	$1, %al
	cmpq	$0, %rsi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movb	%al, -33(%rbp)          # 1-byte Spill
	jne	.LBB70_3
# %bb.1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movb	$1, %cl
	movq	-16(%rbp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rax
	movb	%cl, -33(%rbp)          # 1-byte Spill
	je	.LBB70_3
# %bb.2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	movb	%al, -33(%rbp)          # 1-byte Spill
.LBB70_3:
	movb	-33(%rbp), %al          # 1-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	andb	$1, %al
	movzbl	%al, %edi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	-16(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
	leaq	-8(%rbp), %rdi
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	40(%rcx), %rdx
	addq	$1, %rdx
	movq	%rdx, 40(%rcx)
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end70:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E, .Lfunc_end70-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base # -- Begin function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base,@function
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base: # @_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
.Lfunc_begin71:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end71:
	.size	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base, .Lfunc_end71-_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
.Lfunc_begin72:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$8, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end72:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv, .Lfunc_end72-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
.Lfunc_begin73:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end73:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base, .Lfunc_end73-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
.Lfunc_begin74:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	popq	%rbp
	retq
.Lfunc_end74:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base, .Lfunc_end74-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt18_Rb_tree_node_base
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_,"axG",@progbits,_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_,comdat
	.weak	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_ # -- Begin function _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	.p2align	4, 0x90
	.type	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_,@function
_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_: # @_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
.Lfunc_begin75:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end75:
	.size	_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_, .Lfunc_end75-_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEclERKSA_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,"axG",@progbits,_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,comdat
	.weak	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv # -- Begin function _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.p2align	4, 0x90
	.type	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv,@function
_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv: # @_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
.Lfunc_begin76:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$32, %rdi
	popq	%rbp
	jmp	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # TAILCALL
.Lfunc_end76:
	.size	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv, .Lfunc_end76-_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,"axG",@progbits,_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,comdat
	.weak	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv # -- Begin function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.p2align	4, 0x90
	.type	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv,@function
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv: # @_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
.Lfunc_begin77:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # TAILCALL
.Lfunc_end77:
	.size	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv, .Lfunc_end77-_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE6_M_ptrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,"axG",@progbits,_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,comdat
	.weak	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv # -- Begin function _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.p2align	4, 0x90
	.type	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv,@function
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv: # @_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
.Lfunc_begin78:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end78:
	.size	_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv, .Lfunc_end78-_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE7_M_addrEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv,"axG",@progbits,_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv,comdat
	.weak	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv # -- Begin function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
	.p2align	4, 0x90
	.type	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv,@function
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv: # @_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
.Lfunc_begin79:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end79:
	.size	_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv, .Lfunc_end79-_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE13_M_const_castEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv,"axG",@progbits,_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv,comdat
	.weak	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv # -- Begin function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
	.p2align	4, 0x90
	.type	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv,@function
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv: # @_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
.Lfunc_begin80:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	40(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end80:
	.size	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv, .Lfunc_end80-_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
.Lfunc_begin81:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$32, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end81:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv, .Lfunc_end81-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_rightmostEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
.Lfunc_begin82:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	(%rsi), %rsi
	movq	%rsi, (%rdi)
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, %rdi
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end82:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_, .Lfunc_end82-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEERKS1_OT_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
.Lfunc_begin83:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	leaq	-24(%rbp), %rax
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	leaq	-32(%rbp), %rsi
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rsi         # 8-byte Reload
	cmpq	$0, %rsi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jne	.LBB83_2
# %bb.1:
	leaq	-40(%rbp), %rax
	movq	%rax, %rcx
	movq	%rax, %rdi
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB83_8
.LBB83_2:
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB83_3:                               # =>This Inner Loop Header: Depth=1
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	movb	%al, -137(%rbp)         # 1-byte Spill
	jne	.LBB83_4
	jmp	.LBB83_5
.LBB83_4:                               #   in Loop: Header=BB83_3 Depth=1
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB83_6
.LBB83_5:                               #   in Loop: Header=BB83_3 Depth=1
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB83_6:                               #   in Loop: Header=BB83_3 Depth=1
	movq	-152(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	movq	%rax, %rcx
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jne	.LBB83_3
# %bb.7:
	leaq	-40(%rbp), %rax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -24(%rbp)
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -32(%rbp)
	movq	%rax, %rsi
	movq	%rax, %rdi
	movq	%rsi, -168(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movb	-137(%rbp), %r8b        # 1-byte Reload
	testb	$1, %r8b
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jne	.LBB83_8
	jmp	.LBB83_11
.LBB83_8:
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
	leaq	-40(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	movq	%rax, -48(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB83_9
	jmp	.LBB83_10
.LBB83_9:
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	leaq	-32(%rbp), %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB83_14
.LBB83_10:
	leaq	-40(%rbp), %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	%rdi, -176(%rbp)        # 8-byte Spill
.LBB83_11:
	movq	-176(%rbp), %rax        # 8-byte Reload
	leaq	-40(%rbp), %rsi
	movq	-40(%rbp), %rdi
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rsi, -216(%rbp)        # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-80(%rbp), %rdx         # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB83_12
	jmp	.LBB83_13
.LBB83_12:
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	leaq	-32(%rbp), %rdx
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB83_14
.LBB83_13:
	leaq	-16(%rbp), %rdi
	leaq	-56(%rbp), %rdx
	movq	$0, -56(%rbp)
	movq	-216(%rbp), %rsi        # 8-byte Reload
	callq	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -192(%rbp)        # 8-byte Spill
.LBB83_14:
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	%rcx, %rax
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end83:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_, .Lfunc_end83-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
.Lfunc_begin84:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	addq	$24, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end84:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv, .Lfunc_end84-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_leftmostEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
.Lfunc_begin85:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end85:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_, .Lfunc_end85-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv,"axG",@progbits,_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv,comdat
	.weak	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv # -- Begin function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	.p2align	4, 0x90
	.type	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv,@function
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv: # @_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
.Lfunc_begin86:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	(%rdi), %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, (%rdi)
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end86:
	.size	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv, .Lfunc_end86-_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEmmEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv,"axG",@progbits,_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv,comdat
	.weak	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv # -- Begin function _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	.p2align	4, 0x90
	.type	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv,@function
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv: # @_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
.Lfunc_begin87:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	(%rdi), %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, (%rdi)
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end87:
	.size	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv, .Lfunc_end87-_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
.Lfunc_begin88:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	movq	%rsi, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end88:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_, .Lfunc_end88-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_Lb1EEEOT_RKS1_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE,"axG",@progbits,_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE,comdat
	.weak	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE # -- Begin function _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE,@function
_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE: # @_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
.Lfunc_begin89:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end89:
	.size	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE, .Lfunc_end89-_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
.Lfunc_begin90:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	24(%rdi), %rsi
	movq	%rax, %rdi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end90:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv, .Lfunc_end90-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_,"axG",@progbits,_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_,comdat
	.weak	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_ # -- Begin function _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	.p2align	4, 0x90
	.type	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_,@function
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_: # @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
.Lfunc_begin91:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movq	%rax, 8(%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end91:
	.size	_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_, .Lfunc_end91-_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEERS1_Lb1EEEOT_OT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE,"axG",@progbits,_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE,comdat
	.weak	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE # -- Begin function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE,@function
_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE: # @_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
.Lfunc_begin92:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end92:
	.size	_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE, .Lfunc_end92-_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEOT_RNSt16remove_referenceISF_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
.Lfunc_begin93:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	popq	%rbp
	retq
.Lfunc_end93:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E, .Lfunc_end93-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_valueEPKSt13_Rb_tree_nodeISA_E
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
.Lfunc_begin94:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	popq	%rbp
	jmp	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m # TAILCALL
.Lfunc_end94:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv, .Lfunc_end94-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
.Lfunc_begin95:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception6
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movq	%rdx, -24(%rbp)         # 8-byte Spill
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	movq	%r8, -40(%rbp)          # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
.Ltmp434:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
.Ltmp435:
	jmp	.LBB95_3
.LBB95_1:
.Ltmp436:
	movq	%rax, %rdi
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	__cxa_begin_catch
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E
.Ltmp437:
	callq	__cxa_rethrow
.Ltmp438:
	jmp	.LBB95_6
.LBB95_2:
.Ltmp439:
	movl	%edx, %ecx
.Ltmp440:
	movl	%ecx, -92(%rbp)         # 4-byte Spill
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	__cxa_end_catch
.Ltmp441:
	jmp	.LBB95_4
.LBB95_3:
	addq	$112, %rsp
	popq	%rbp
	retq
.LBB95_4:
	movq	-104(%rbp), %rdi        # 8-byte Reload
	callq	_Unwind_Resume
.LBB95_5:
.Ltmp442:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -108(%rbp)        # 4-byte Spill
	callq	__clang_call_terminate
.LBB95_6:
.Lfunc_end95:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_, .Lfunc_end95-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESL_IJEEEEEvPSt13_Rb_tree_nodeISA_EDpOT_
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table95:
.Lexception6:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
	.long	.Ltmp434-.Lfunc_begin95 # >> Call Site 1 <<
	.long	.Ltmp435-.Ltmp434       #   Call between .Ltmp434 and .Ltmp435
	.long	.Ltmp436-.Lfunc_begin95 #     jumps to .Ltmp436
	.byte	1                       #   On action: 1
	.long	.Ltmp435-.Lfunc_begin95 # >> Call Site 2 <<
	.long	.Ltmp437-.Ltmp435       #   Call between .Ltmp435 and .Ltmp437
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.long	.Ltmp437-.Lfunc_begin95 # >> Call Site 3 <<
	.long	.Ltmp438-.Ltmp437       #   Call between .Ltmp437 and .Ltmp438
	.long	.Ltmp439-.Lfunc_begin95 #     jumps to .Ltmp439
	.byte	0                       #   On action: cleanup
	.long	.Ltmp440-.Lfunc_begin95 # >> Call Site 4 <<
	.long	.Ltmp441-.Ltmp440       #   Call between .Ltmp440 and .Ltmp441
	.long	.Ltmp442-.Lfunc_begin95 #     jumps to .Ltmp442
	.byte	1                       #   On action: 1
	.long	.Ltmp441-.Lfunc_begin95 # >> Call Site 5 <<
	.long	.Lfunc_end95-.Ltmp441   #   Call between .Ltmp441 and .Lfunc_end95
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_ # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
.Lfunc_begin96:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	addq	$48, %rsp
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_ # TAILCALL
.Lfunc_end96:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_, .Lfunc_end96-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE9constructISB_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESJ_IJEEEEEvRSD_PT_DpOT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_ # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_
.Lfunc_begin97:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE
	leaq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end97:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_, .Lfunc_end97-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESJ_IJEEEEEvPT_DpOT0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,"axG",@progbits,_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,comdat
	.weak	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_ # -- Begin function _ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.p2align	4, 0x90
	.type	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,@function
_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_: # @_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
.Lfunc_begin98:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_ # TAILCALL
.Lfunc_end98:
	.size	_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_, .Lfunc_end98-_ZNSt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE,"axG",@progbits,_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE,comdat
	.weak	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE # -- Begin function _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
	.p2align	4, 0x90
	.type	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE,@function
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE: # @_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
.Lfunc_begin99:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rdx
	callq	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end99:
	.size	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE, .Lfunc_end99-_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESD_IJDpT0_EE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE,"axG",@progbits,_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE,comdat
	.weak	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE # -- Begin function _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
	.p2align	4, 0x90
	.type	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE,@function
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE: # @_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
.Lfunc_begin100:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
	movq	%rax, %rdi
	callq	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_
	movq	-8(%rbp), %rax          # 8-byte Reload
	movq	$0, 32(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end100:
	.size	_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE, .Lfunc_end100-_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEC2IJRS6_EJLm0EEJEJEEERSt5tupleIJDpT_EERSC_IJDpT1_EESt12_Index_tupleIJXspT0_EEESL_IJXspT2_EEE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_,"axG",@progbits,_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_,comdat
	.weak	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_ # -- Begin function _ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
	.p2align	4, 0x90
	.type	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_,@function
_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_: # @_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
.Lfunc_begin101:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE # TAILCALL
.Lfunc_end101:
	.size	_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_, .Lfunc_end101-_ZSt3getILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE,"axG",@progbits,_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE,comdat
	.weak	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE # -- Begin function _ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	.p2align	4, 0x90
	.type	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE,@function
_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE: # @_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
.Lfunc_begin102:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end102:
	.size	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE, .Lfunc_end102-_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE,"axG",@progbits,_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE,comdat
	.weak	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE # -- Begin function _ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE
	.p2align	4, 0x90
	.type	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE,@function
_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE: # @_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE
.Lfunc_begin103:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_ # TAILCALL
.Lfunc_end103:
	.size	_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE, .Lfunc_end103-_ZSt12__get_helperILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_,"axG",@progbits,_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_,comdat
	.weak	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_ # -- Begin function _ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
	.p2align	4, 0x90
	.type	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_,@function
_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_: # @_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
.Lfunc_begin104:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_ # TAILCALL
.Lfunc_end104:
	.size	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_, .Lfunc_end104-_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_,"axG",@progbits,_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_,comdat
	.weak	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_ # -- Begin function _ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_
	.p2align	4, 0x90
	.type	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_,@function
_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_: # @_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_
.Lfunc_begin105:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end105:
	.size	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_, .Lfunc_end105-_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,"axG",@progbits,_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,comdat
	.weak	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_ # -- Begin function _ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.p2align	4, 0x90
	.type	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_,@function
_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_: # @_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
.Lfunc_begin106:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS8_
	movq	%rax, %rdi
	callq	_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_ # TAILCALL
.Lfunc_end106:
	.size	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_, .Lfunc_end106-_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2EOS8_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_,"axG",@progbits,_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_,comdat
	.weak	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_ # -- Begin function _ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_
	.p2align	4, 0x90
	.type	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_,@function
_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_: # @_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_
.Lfunc_begin107:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end107:
	.size	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_, .Lfunc_end107-_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m,"axG",@progbits,_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m,comdat
	.weak	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m # -- Begin function _ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m
	.p2align	4, 0x90
	.type	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m,@function
_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m: # @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m
.Lfunc_begin108:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	%eax, %edx
	popq	%rbp
	jmp	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv # TAILCALL
.Lfunc_end108:
	.size	_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m, .Lfunc_end108-_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEEE8allocateERSD_m
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv # -- Begin function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv
	.p2align	4, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv
.Lfunc_begin109:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
	movq	-8(%rbp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rax
	jae	.LBB109_2
# %bb.1:
	callq	_ZSt17__throw_bad_allocv
.LBB109_2:
	movq	-8(%rbp), %rax          # 8-byte Reload
	shlq	$3, %rax
	leaq	(%rax,%rax,8), %rdi
	addq	$16, %rsp
	popq	%rbp
	jmp	_Znwm                   # TAILCALL
.Lfunc_end109:
	.size	_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv, .Lfunc_end109-_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8allocateEmPKv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv # -- Begin function _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
	.p2align	4, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
.Lfunc_begin110:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$256204778801521550, %rax # imm = 0x38E38E38E38E38E
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end110:
	.size	_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv, .Lfunc_end110-_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEE8max_sizeEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_,"axG",@progbits,_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_,comdat
	.weak	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_ # -- Begin function _ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_
	.p2align	4, 0x90
	.type	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_,@function
_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_: # @_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_
.Lfunc_begin111:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC2ES7_ # TAILCALL
.Lfunc_end111:
	.size	_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_, .Lfunc_end111-_ZNSt11_Tuple_implILm0EJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ES7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_,"axG",@progbits,_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_,comdat
	.weak	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_ # -- Begin function _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	.p2align	4, 0x90
	.type	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_,@function
_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_: # @_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
.Lfunc_begin112:
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
	.cfi_lsda 3, .Lexception7
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
.Ltmp443:
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_
.Ltmp444:
	movl	%eax, -4(%rbp)          # 4-byte Spill
	jmp	.LBB112_1
.LBB112_1:
	movl	-4(%rbp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	setl	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB112_2:
.Ltmp445:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -8(%rbp)          # 4-byte Spill
	callq	__clang_call_terminate
.Lfunc_end112:
	.size	_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_, .Lfunc_end112-_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2
GCC_except_table112:
.Lexception7:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	21                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	13                      # Call site table length
	.long	.Ltmp443-.Lfunc_begin112 # >> Call Site 1 <<
	.long	.Ltmp444-.Ltmp443       #   Call between .Ltmp443 and .Ltmp444
	.long	.Ltmp445-.Lfunc_begin112 #     jumps to .Ltmp445
	.byte	1                       #   On action: 1
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.p2align	2
                                        # -- End function
	.section	.text._ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv,"axG",@progbits,_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv,comdat
	.weak	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv # -- Begin function _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv
	.p2align	4, 0x90
	.type	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv,@function
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv: # @_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv
.Lfunc_begin113:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	popq	%rbp
	retq
.Lfunc_end113:
	.size	_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv, .Lfunc_end113-_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8key_compEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_
.Lfunc_begin114:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	-16(%rbp), %rcx         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_ # TAILCALL
.Lfunc_end114:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_, .Lfunc_end114-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11lower_boundERS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
.Lfunc_begin115:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	cmpq	$0, %rsi
	movq	%rdx, %rax
	movq	%rdx, -16(%rbp)         # 8-byte Spill
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB115_6
# %bb.1:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -64(%rbp)         # 8-byte Spill
.LBB115_2:                              # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	-40(%rbp), %rdx         # 8-byte Reload
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB115_4
# %bb.3:                                #   in Loop: Header=BB115_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB115_5
.LBB115_4:                              #   in Loop: Header=BB115_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB115_5:                              #   in Loop: Header=BB115_2 Depth=1
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	$0, %rax
	movq	%rcx, %rdx
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jne	.LBB115_2
.LBB115_6:
	movq	-48(%rbp), %rax         # 8-byte Reload
	leaq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end115:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_, .Lfunc_end115-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
.Lfunc_begin116:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	addq	$8, %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEC2EPSt18_Rb_tree_node_base
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end116:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv, .Lfunc_end116-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_,"axG",@progbits,_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_,comdat
	.weak	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_ # -- Begin function _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_
	.p2align	4, 0x90
	.type	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_,@function
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_: # @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_
.Lfunc_begin117:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	-40(%rbp), %rcx         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_
	leaq	-16(%rbp), %rcx
	leaq	-8(%rbp), %rdx
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -16(%rbp)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEeqERKSB_
	testb	$1, %al
	jne	.LBB117_2
# %bb.1:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	testb	$1, %al
	jne	.LBB117_2
	jmp	.LBB117_3
.LBB117_2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB117_4
.LBB117_3:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	%rcx, -72(%rbp)         # 8-byte Spill
.LBB117_4:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end117:
	.size	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_, .Lfunc_end117-_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_
	.cfi_endproc
                                        # -- End function
	.text
	.globl	trace_logger_register_labelmap # -- Begin function trace_logger_register_labelmap
	.p2align	4, 0x90
	.type	trace_logger_register_labelmap,@function
trace_logger_register_labelmap:         # @trace_logger_register_labelmap
.Lfunc_begin118:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$_Z12labelmap_strB5cxx11, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rcx, %rdi
	movq	-8(%rbp), %rcx          # 8-byte Reload
	movq	%rsi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rsi
	movq	-16(%rbp), %rdx         # 8-byte Reload
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm # TAILCALL
.Lfunc_end118:
	.size	trace_logger_register_labelmap, .Lfunc_end118-trace_logger_register_labelmap
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_init       # -- Begin function trace_logger_init
	.p2align	4, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
.Lfunc_begin119:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$lock, %rdi
	xorl	%eax, %eax
	movl	%eax, %esi
	callq	pthread_mutex_init
	cmpl	$0, %eax
	je	.LBB119_2
# %bb.1:
	movabsq	$.L.str.9.513, %rdi
	callq	perror
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB119_2:
	movq	default_trace_name(%rip), %rdi
	callq	_Z12create_tracePKc
	movl	$_Z8fin_mainv, %eax
	movl	%eax, %edi
	popq	%rbp
	jmp	atexit                  # TAILCALL
.Lfunc_end119:
	.size	trace_logger_init, .Lfunc_end119-trace_logger_init
	.cfi_endproc
                                        # -- End function
	.globl	_Z8fin_mainv            # -- Begin function _Z8fin_mainv
	.p2align	4, 0x90
	.type	_Z8fin_mainv,@function
_Z8fin_mainv:                           # @_Z8fin_mainv
.Lfunc_begin120:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB120_2
# %bb.1:
	callq	_Z12fin_toplevelv
.LBB120_2:
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	leaq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	leaq	-16(%rbp), %rcx
	movq	%rax, -8(%rbp)
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	movq	%rax, -16(%rbp)
	movq	%rcx, %rsi
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	testb	$1, %al
	jne	.LBB120_3
	jmp	.LBB120_4
.LBB120_3:
	jmp	.LBB120_5
.LBB120_4:
	addq	$64, %rsp
	popq	%rbp
	retq
.LBB120_5:                              # =>This Inner Loop Header: Depth=1
	leaq	-8(%rbp), %rdi
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
	movq	32(%rax), %rdi
	callq	gzclose
	leaq	-8(%rbp), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEppEv
	movabsq	$_Z8gz_filesB5cxx11, %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE3endEv
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	callq	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEneERKSB_
	testb	$1, %al
	jne	.LBB120_5
	jmp	.LBB120_4
.Lfunc_end120:
	.size	_Z8fin_mainv, .Lfunc_end120-_Z8fin_mainv
	.cfi_endproc
                                        # -- End function
	.globl	_Z12fin_toplevelv       # -- Begin function _Z12fin_toplevelv
	.p2align	4, 0x90
	.type	_Z12fin_toplevelv,@function
_Z12fin_toplevelv:                      # @_Z12fin_toplevelv
.Lfunc_begin121:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	je	.LBB121_2
# %bb.1:
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_ZN10trace_infoD2Ev
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_ZdlPv
.LBB121_2:
	callq	_ZTW5trace
	movq	$0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end121:
	.size	_Z12fin_toplevelv, .Lfunc_end121-_Z12fin_toplevelv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv,"axG",@progbits,_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv,comdat
	.weak	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv # -- Begin function _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
	.p2align	4, 0x90
	.type	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv,@function
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv: # @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
.Lfunc_begin122:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P8gzFile_sESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv # TAILCALL
.Lfunc_end122:
	.size	_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv, .Lfunc_end122-_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sSt4lessIS5_ESaISt4pairIKS5_S7_EEE5beginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv,"axG",@progbits,_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv,comdat
	.weak	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv # -- Begin function _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
	.p2align	4, 0x90
	.type	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv,@function
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv: # @_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
.Lfunc_begin123:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	(%rdi), %rdi
	popq	%rbp
	jmp	_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEE9_M_valptrEv # TAILCALL
.Lfunc_end123:
	.size	_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv, .Lfunc_end123-_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP8gzFile_sEEptEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN10trace_infoD2Ev,"axG",@progbits,_ZN10trace_infoD2Ev,comdat
	.weak	_ZN10trace_infoD2Ev     # -- Begin function _ZN10trace_infoD2Ev
	.p2align	4, 0x90
	.type	_ZN10trace_infoD2Ev,@function
_ZN10trace_infoD2Ev:                    # @_ZN10trace_infoD2Ev
.Lfunc_begin124:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	addq	$48, %rax
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev
	movq	-8(%rbp), %rax          # 8-byte Reload
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbp
	jmp	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev # TAILCALL
.Lfunc_end124:
	.size	_ZN10trace_infoD2Ev, .Lfunc_end124-_ZN10trace_infoD2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	llvmtracer_set_trace_name # -- Begin function llvmtracer_set_trace_name
	.p2align	4, 0x90
	.type	llvmtracer_set_trace_name,@function
llvmtracer_set_trace_name:              # @llvmtracer_set_trace_name
.Lfunc_begin125:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	jne	.LBB125_2
# %bb.1:
	movq	-8(%rbp), %rdi          # 8-byte Reload
	callq	_Z12create_tracePKc
	jmp	.LBB125_3
.LBB125_2:
	callq	_ZTW5trace
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi          # 8-byte Reload
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
	movq	%rax, -16(%rbp)         # 8-byte Spill
.LBB125_3:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end125:
	.size	llvmtracer_set_trace_name, .Lfunc_end125-llvmtracer_set_trace_name
	.cfi_endproc
                                        # -- End function
	.globl	_Z10log_or_notbbiPc     # -- Begin function _Z10log_or_notbbiPc
	.p2align	4, 0x90
	.type	_Z10log_or_notbbiPc,@function
_Z10log_or_notbbiPc:                    # @_Z10log_or_notbbiPc
.Lfunc_begin126:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, -4(%rbp)          # 4-byte Spill
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movb	%al, -17(%rbp)          # 1-byte Spill
	jne	.LBB126_2
	jmp	.LBB126_1
.LBB126_1:
	movb	-17(%rbp), %al          # 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -24(%rbp)         # 4-byte Spill
	jmp	.LBB126_9
.LBB126_2:
	movb	-17(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB126_4
	jmp	.LBB126_3
.LBB126_3:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movl	80(%rax), %ecx
	movl	%ecx, -24(%rbp)         # 4-byte Spill
	jmp	.LBB126_9
.LBB126_4:
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, -24(%rbp)         # 4-byte Spill
	jne	.LBB126_9
# %bb.5:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv
	cmpq	$0, %rax
	jne	.LBB126_7
# %bb.6:
	movabsq	$.L.str.10.514, %rdi
	movabsq	$.L.str.4.503, %rsi
	movl	$132, %edx
	movabsq	$.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc, %rcx
	callq	__assert_fail
.LBB126_7:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movl	$1, %ecx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	-28(%rbp), %eax         # 4-byte Reload
	movl	%eax, -24(%rbp)         # 4-byte Spill
	je	.LBB126_9
# %bb.8:
	movabsq	$.L.str.11.515, %rdi
	movabsq	$.L.str.4.503, %rsi
	movl	$137, %edx
	movabsq	$.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc, %rcx
	callq	__assert_fail
.LBB126_9:
	movl	-24(%rbp), %eax         # 4-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end126:
	.size	_Z10log_or_notbbiPc, .Lfunc_end126-_Z10log_or_notbbiPc
	.cfi_endproc
                                        # -- End function
	.globl	_Z20convert_bytes_to_hexPcPhi # -- Begin function _Z20convert_bytes_to_hexPcPhi
	.p2align	4, 0x90
	.type	_Z20convert_bytes_to_hexPcPhi,@function
_Z20convert_bytes_to_hexPcPhi:          # @_Z20convert_bytes_to_hexPcPhi
.Lfunc_begin127:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movw	.L.str.12.516, %ax
	movw	%ax, (%rdi)
	movb	.L.str.12.516+2, %cl
	movb	%cl, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rdi, %r8
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	movl	%edx, -12(%rbp)         # 4-byte Spill
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	jle	.LBB127_2
# %bb.1:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	-12(%rbp), %eax         # 4-byte Reload
	movl	%eax, %edx
	movl	%edx, %esi
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	jmp	.LBB127_3
.LBB127_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	addq	$80, %rsp
	popq	%rbp
	retq
.LBB127_3:                              # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movabsq	$.L.str.13.517, %rsi
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movq	%rax, %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movb	$0, %al
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	%rcx, %rsi
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movq	-40(%rbp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rcx
	movq	%rsi, %r8
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%r8, -32(%rbp)          # 8-byte Spill
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	je	.LBB127_2
	jmp	.LBB127_3
.Lfunc_end127:
	.size	_Z20convert_bytes_to_hexPcPhi, .Lfunc_end127-_Z20convert_bytes_to_hexPcPhi
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_update_status # -- Begin function trace_logger_update_status
	.p2align	4, 0x90
	.type	trace_logger_update_status,@function
trace_logger_update_status:             # @trace_logger_update_status
.Lfunc_begin128:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movb	%cl, %al
	movb	%dl, %r8b
	movl	%esi, -4(%rbp)          # 4-byte Spill
	movb	%al, -5(%rbp)           # 1-byte Spill
	movb	%r8b, -6(%rbp)          # 1-byte Spill
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	jne	.LBB128_3
# %bb.1:
	movb	-6(%rbp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB128_2
	jmp	.LBB128_13
.LBB128_2:
	movq	default_trace_name, %rdi
	callq	_Z12create_tracePKc
.LBB128_3:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movl	80(%rax), %ecx
	movb	-5(%rbp), %dl           # 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %edi
	movb	-6(%rbp), %dl           # 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	-4(%rbp), %edx          # 4-byte Reload
	movq	-16(%rbp), %rax         # 8-byte Reload
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	movq	%rax, %rcx
	callq	_Z10log_or_notbbiPc
	movl	%eax, -24(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movl	-24(%rbp), %edx         # 4-byte Reload
	movl	%edx, 80(%rax)
	movl	-20(%rbp), %esi         # 4-byte Reload
	testl	%esi, %esi
	je	.LBB128_4
	jmp	.LBB128_14
.LBB128_14:
	movl	-20(%rbp), %eax         # 4-byte Reload
	subl	$1, %eax
	movl	%eax, -28(%rbp)         # 4-byte Spill
	je	.LBB128_6
	jmp	.LBB128_8
.LBB128_4:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	jne	.LBB128_8
# %bb.5:
	callq	_ZTW5trace
	movq	(%rax), %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movabsq	$.L.str.14.520, %rdi
	movq	(%rax), %rax
	movq	40(%rax), %rdx
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	fflush
	movl	%eax, -48(%rbp)         # 4-byte Spill
	jmp	.LBB128_8
.LBB128_6:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	je	.LBB128_8
# %bb.7:
	callq	_ZTW5trace
	movq	(%rax), %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movabsq	$.L.str.15.521, %rdi
	movq	(%rax), %rax
	movq	40(%rax), %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	fflush
	movl	%eax, -64(%rbp)         # 4-byte Spill
.LBB128_8:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv
	cmpq	$0, %rax
	jne	.LBB128_11
# %bb.9:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$0, 80(%rax)
	jne	.LBB128_11
# %bb.10:
	callq	_ZTW5trace
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	movq	-16(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB128_13
.LBB128_11:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	jne	.LBB128_13
# %bb.12:
	callq	_ZTW5trace
	movabsq	$.L.str.16.522, %rsi
	movq	(%rax), %rax
	addq	$48, %rax
	movq	%rax, %rdi
	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_Z12fin_toplevelv
.LBB128_13:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end128:
	.size	trace_logger_update_status, .Lfunc_end128-trace_logger_update_status
	.cfi_endproc
                                        # -- End function
	.globl	_Z10do_not_logv         # -- Begin function _Z10do_not_logv
	.p2align	4, 0x90
	.type	_Z10do_not_logv,@function
_Z10do_not_logv:                        # @_Z10do_not_logv
.Lfunc_begin129:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	_ZTW5trace
	movb	$1, %cl
	cmpq	$0, (%rax)
	movb	%cl, -1(%rbp)           # 1-byte Spill
	je	.LBB129_2
# %bb.1:
	callq	_ZTW5trace
	movq	(%rax), %rax
	cmpl	$1, 80(%rax)
	sete	%cl
	movb	%cl, -1(%rbp)           # 1-byte Spill
.LBB129_2:
	movb	-1(%rbp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end129:
	.size	_Z10do_not_logv, .Lfunc_end129-_Z10do_not_logv
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_entry  # -- Begin function trace_logger_log_entry
	.p2align	4, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
.Lfunc_begin130:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)          # 8-byte Spill
	movl	%esi, -12(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	jne	.LBB130_2
# %bb.1:
	movq	default_trace_name, %rdi
	callq	_Z12create_tracePKc
.LBB130_2:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB130_4
# %bb.3:
	callq	_Z15open_trace_filev
	callq	_ZTW5trace
	movabsq	$.L.str.17.525, %rsi
	movq	(%rax), %rax
	movq	32(%rax), %rdi
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movl	-12(%rbp), %ecx         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -16(%rbp)         # 4-byte Spill
.LBB130_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end130:
	.size	trace_logger_log_entry, .Lfunc_end130-trace_logger_log_entry
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log0       # -- Begin function trace_logger_log0
	.p2align	4, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
.Lfunc_begin131:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rsi, -8(%rbp)          # 8-byte Spill
	movl	%r8d, -12(%rbp)         # 4-byte Spill
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movl	%edi, -36(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB131_3
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB131_3
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rdi
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	callq	_ZTW5trace
	movabsq	$.L.str.18.528, %rsi
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	-36(%rbp), %edx         # 4-byte Reload
	movq	-8(%rbp), %rcx          # 8-byte Reload
	movq	-32(%rbp), %r8          # 8-byte Reload
	movq	-24(%rbp), %r9          # 8-byte Reload
	movl	-12(%rbp), %r10d        # 4-byte Reload
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -52(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	40(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 40(%rax)
.LBB131_3:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end131:
	.size	trace_logger_log0, .Lfunc_end131-trace_logger_log0
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_int    # -- Begin function trace_logger_log_int
	.p2align	4, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
.Lfunc_begin132:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB132_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB132_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB132_3
	jmp	.LBB132_13
.LBB132_13:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB132_4
	jmp	.LBB132_5
.LBB132_3:
	movabsq	$.L.str.19.531, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB132_6
.LBB132_4:
	movabsq	$.L.str.20.532, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB132_6
.LBB132_5:
	movabsq	$.L.str.21.533, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-40(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB132_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB132_8
# %bb.7:
	movabsq	$.L.str.22.534, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB132_9
.LBB132_8:
	movabsq	$.L.str.23.535, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB132_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB132_11
# %bb.10:
	movabsq	$.L.str.24.536, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB132_12
.LBB132_11:
	movabsq	$.L.str.25.537, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB132_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end132:
	.size	trace_logger_log_int, .Lfunc_end132-trace_logger_log_int
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_ptr    # -- Begin function trace_logger_log_ptr
	.p2align	4, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
.Lfunc_begin133:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB133_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB133_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB133_3
	jmp	.LBB133_13
.LBB133_13:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB133_4
	jmp	.LBB133_5
.LBB133_3:
	movabsq	$.L.str.26.540, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB133_6
.LBB133_4:
	movabsq	$.L.str.27.541, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB133_6
.LBB133_5:
	movabsq	$.L.str.28.542, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-40(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB133_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB133_8
# %bb.7:
	movabsq	$.L.str.22.534, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB133_9
.LBB133_8:
	movabsq	$.L.str.23.535, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB133_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB133_11
# %bb.10:
	movabsq	$.L.str.24.536, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB133_12
.LBB133_11:
	movabsq	$.L.str.25.537, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB133_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end133:
	.size	trace_logger_log_ptr, .Lfunc_end133-trace_logger_log_ptr
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_string # -- Begin function trace_logger_log_string
	.p2align	4, 0x90
	.type	trace_logger_log_string,@function
trace_logger_log_string:                # @trace_logger_log_string
.Lfunc_begin134:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB134_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB134_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB134_3
	jmp	.LBB134_13
.LBB134_13:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB134_4
	jmp	.LBB134_5
.LBB134_3:
	movabsq	$.L.str.29.545, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB134_6
.LBB134_4:
	movabsq	$.L.str.30.546, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB134_6
.LBB134_5:
	movabsq	$.L.str.31.547, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-40(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB134_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB134_8
# %bb.7:
	movabsq	$.L.str.22.534, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB134_9
.LBB134_8:
	movabsq	$.L.str.23.535, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB134_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB134_11
# %bb.10:
	movabsq	$.L.str.24.536, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB134_12
.LBB134_11:
	movabsq	$.L.str.25.537, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB134_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end134:
	.size	trace_logger_log_string, .Lfunc_end134-trace_logger_log_string
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_double # -- Begin function trace_logger_log_double
	.p2align	4, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
.Lfunc_begin135:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	%r8d, -4(%rbp)          # 4-byte Spill
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	movl	%edx, -20(%rbp)         # 4-byte Spill
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, -36(%rbp)         # 4-byte Spill
	movl	%edi, -40(%rbp)         # 4-byte Spill
	movq	%r9, -48(%rbp)          # 8-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB135_12
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB135_12
# %bb.2:
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-40(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	je	.LBB135_3
	jmp	.LBB135_13
.LBB135_13:
	movl	-40(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -64(%rbp)         # 4-byte Spill
	je	.LBB135_4
	jmp	.LBB135_5
.LBB135_3:
	movabsq	$.L.str.32.550, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-36(%rbp), %edx         # 4-byte Reload
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-20(%rbp), %ecx         # 4-byte Reload
	movb	$1, %al
	callq	gzprintf
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB135_6
.LBB135_4:
	movabsq	$.L.str.33.551, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-36(%rbp), %edx         # 4-byte Reload
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-20(%rbp), %ecx         # 4-byte Reload
	movb	$1, %al
	callq	gzprintf
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB135_6
.LBB135_5:
	movabsq	$.L.str.34.552, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	-40(%rbp), %edx         # 4-byte Reload
	movl	-36(%rbp), %ecx         # 4-byte Reload
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-20(%rbp), %r8d         # 4-byte Reload
	movb	$1, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB135_6:
	movl	-20(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB135_8
# %bb.7:
	movabsq	$.L.str.22.534, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-16(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB135_9
.LBB135_8:
	movabsq	$.L.str.23.535, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB135_9:
	movl	-4(%rbp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB135_11
# %bb.10:
	movabsq	$.L.str.24.536, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB135_12
.LBB135_11:
	movabsq	$.L.str.25.537, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB135_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end135:
	.size	trace_logger_log_double, .Lfunc_end135-trace_logger_log_double
	.cfi_endproc
                                        # -- End function
	.globl	trace_logger_log_vector # -- Begin function trace_logger_log_vector
	.p2align	4, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
.Lfunc_begin136:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	16(%rbp), %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	callq	_ZTW5trace
	cmpq	$0, (%rax)
	je	.LBB136_13
# %bb.1:
	callq	_Z10do_not_logv
	testb	$1, %al
	jne	.LBB136_13
# %bb.2:
	movl	-44(%rbp), %eax         # 4-byte Reload
	sarl	$31, %eax
	movl	%eax, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	movabsq	$8589934576, %r8        # imm = 0x1FFFFFFF0
	andq	%r8, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	shrl	$29, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	addl	%eax, %ecx
	sarl	$3, %ecx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%ecx, %edx
	movq	%r8, -64(%rbp)          # 8-byte Spill
	callq	_Z20convert_bytes_to_hexPcPhi
	callq	_ZTW5trace
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	subl	$19134, %ecx            # imm = 0x4ABE
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	je	.LBB136_3
	jmp	.LBB136_14
.LBB136_14:
	movl	-48(%rbp), %eax         # 4-byte Reload
	subl	$24601, %eax            # imm = 0x6019
	movl	%eax, -80(%rbp)         # 4-byte Spill
	je	.LBB136_4
	jmp	.LBB136_5
.LBB136_3:
	movabsq	$.L.str.29.545, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB136_6
.LBB136_4:
	movabsq	$.L.str.30.546, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB136_6
.LBB136_5:
	movabsq	$.L.str.31.547, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB136_6:
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB136_8
# %bb.7:
	movabsq	$.L.str.22.534, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
	jmp	.LBB136_9
.LBB136_8:
	movabsq	$.L.str.23.535, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -100(%rbp)        # 4-byte Spill
.LBB136_9:
	movl	-12(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB136_11
# %bb.10:
	movabsq	$.L.str.24.536, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -104(%rbp)        # 4-byte Spill
	jmp	.LBB136_12
.LBB136_11:
	movabsq	$.L.str.25.537, %rsi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
.LBB136_12:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB136_13:
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end136:
	.size	trace_logger_log_vector, .Lfunc_end136-trace_logger_log_vector
	.cfi_endproc
                                        # -- End function
	.type	.L.str.33,@object       # @.str.33
	.section	.rodata,"a",@progbits
.L.str.33:
	.asciz	"work_x"
	.size	.L.str.33, 7

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"phi"
	.size	.L.str.5, 4

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"work_y"
	.size	.L.str.38, 7

	.type	.L.str.268,@object      # @.str.268
.L.str.268:
	.asciz	"DATA_x"
	.size	.L.str.268, 7

	.type	.L.str.273,@object      # @.str.273
.L.str.273:
	.asciz	"DATA_y"
	.size	.L.str.273, 7

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"data_x"
	.size	.L.str.6, 7

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"data_y"
	.size	.L.str.8, 7

	.type	.L.str.281,@object      # @.str.281
.L.str.281:
	.asciz	"smem"
	.size	.L.str.281, 5

	.type	.L.str.282,@object      # @.str.282
.L.str.282:
	.asciz	"reversed"
	.size	.L.str.282, 9

	.type	.L.str.283,@object      # @.str.283
.L.str.283:
	.asciz	"sin_64"
	.size	.L.str.283, 7

	.type	.L.str.284,@object      # @.str.284
.L.str.284:
	.asciz	"cos_64"
	.size	.L.str.284, 7

	.type	.L.str.241,@object      # @.str.241
.L.str.241:
	.asciz	"sin_512"
	.size	.L.str.241, 8

	.type	.L.str.237,@object      # @.str.237
.L.str.237:
	.asciz	"cos_512"
	.size	.L.str.237, 8

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"step1"
	.size	.L.str.1, 6

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"0:0"
	.size	.L.str.2, 4

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"arrayidx12"
	.size	.L.str.3, 11

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.zero	1
	.size	.L.str.4, 1

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"arrayidx15"
	.size	.L.str.7, 11

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"arrayidx24"
	.size	.L.str.9, 11

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"arrayidx26"
	.size	.L.str.10, 11

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"arrayidx27"
	.size	.L.str.11, 11

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"arrayidx30"
	.size	.L.str.12, 11

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"arrayidx40"
	.size	.L.str.13, 11

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"arrayidx42"
	.size	.L.str.14, 11

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"arrayidx43"
	.size	.L.str.15, 11

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"arrayidx46"
	.size	.L.str.16, 11

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"arrayidx56"
	.size	.L.str.17, 11

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"arrayidx58"
	.size	.L.str.18, 11

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"arrayidx59"
	.size	.L.str.19, 11

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"arrayidx62"
	.size	.L.str.20, 11

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"0:0-14"
	.size	.L.str.21, 7

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"1:1"
	.size	.L.str.22, 4

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"indvars.iv608"
	.size	.L.str.23, 14

	.type	.L.str.24,@object       # @.str.24
	.p2align	4
.L.str.24:
	.asciz	"indvars.iv.next609"
	.size	.L.str.24, 19

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"106:1"
	.size	.L.str.25, 6

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"1:1-2"
	.size	.L.str.26, 6

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"2:2"
	.size	.L.str.27, 4

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"indvars.iv"
	.size	.L.str.28, 11

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"indvars.iv.next"
	.size	.L.str.29, 16

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"3"
	.size	.L.str.30, 2

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"4"
	.size	.L.str.31, 2

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"arrayidx"
	.size	.L.str.32, 9

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"5"
	.size	.L.str.34, 2

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	"arrayidx3"
	.size	.L.str.35, 10

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"2:2-1"
	.size	.L.str.36, 6

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"arrayidx7"
	.size	.L.str.37, 10

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"6"
	.size	.L.str.39, 2

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"arrayidx9"
	.size	.L.str.40, 10

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"2:2-2"
	.size	.L.str.41, 6

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"exitcond"
	.size	.L.str.42, 9

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"2:2-3"
	.size	.L.str.43, 6

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"7:1"
	.size	.L.str.44, 4

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"c0_x"
	.size	.L.str.45, 5

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"c0_y"
	.size	.L.str.46, 5

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"10"
	.size	.L.str.47, 3

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"add13"
	.size	.L.str.48, 6

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"7:1-8"
	.size	.L.str.49, 6

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"11"
	.size	.L.str.50, 3

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"add16"
	.size	.L.str.51, 6

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"7:1-9"
	.size	.L.str.52, 6

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"12"
	.size	.L.str.53, 3

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"sub"
	.size	.L.str.54, 4

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	"7:1-10"
	.size	.L.str.55, 7

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"13"
	.size	.L.str.56, 3

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"sub21"
	.size	.L.str.57, 6

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"7:1-11"
	.size	.L.str.58, 7

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"16"
	.size	.L.str.59, 3

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"add28"
	.size	.L.str.60, 6

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"7:1-14"
	.size	.L.str.61, 7

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"17"
	.size	.L.str.62, 3

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"add31"
	.size	.L.str.63, 6

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"7:1-15"
	.size	.L.str.64, 7

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"18"
	.size	.L.str.65, 3

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"sub34"
	.size	.L.str.66, 6

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	"7:1-16"
	.size	.L.str.67, 7

	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"19"
	.size	.L.str.68, 3

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"sub37"
	.size	.L.str.69, 6

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"7:1-17"
	.size	.L.str.70, 7

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"22"
	.size	.L.str.71, 3

	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	"add44"
	.size	.L.str.72, 6

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"7:1-20"
	.size	.L.str.73, 7

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	"23"
	.size	.L.str.74, 3

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"add47"
	.size	.L.str.75, 6

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"7:1-21"
	.size	.L.str.76, 7

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"24"
	.size	.L.str.77, 3

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"sub50"
	.size	.L.str.78, 6

	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"7:1-22"
	.size	.L.str.79, 7

	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	"25"
	.size	.L.str.80, 3

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"sub53"
	.size	.L.str.81, 6

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"7:1-23"
	.size	.L.str.82, 7

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"28"
	.size	.L.str.83, 3

	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"add60"
	.size	.L.str.84, 6

	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"7:1-26"
	.size	.L.str.85, 7

	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"29"
	.size	.L.str.86, 3

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"add63"
	.size	.L.str.87, 6

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"7:1-27"
	.size	.L.str.88, 7

	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"30"
	.size	.L.str.89, 3

	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"sub66"
	.size	.L.str.90, 6

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"7:1-28"
	.size	.L.str.91, 7

	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"31"
	.size	.L.str.92, 3

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"sub69"
	.size	.L.str.93, 6

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"7:1-29"
	.size	.L.str.94, 7

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"tmp_1"
	.size	.L.str.95, 6

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"33"
	.size	.L.str.96, 3

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"sub76"
	.size	.L.str.97, 6

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"conv"
	.size	.L.str.98, 5

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"mul77"
	.size	.L.str.99, 6

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"conv78"
	.size	.L.str.100, 7

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	"7:1-31"
	.size	.L.str.101, 7

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"34"
	.size	.L.str.102, 3

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"add83"
	.size	.L.str.103, 6

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"conv84"
	.size	.L.str.104, 7

	.type	.L.str.105,@object      # @.str.105
.L.str.105:
	.asciz	"mul85"
	.size	.L.str.105, 6

	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"conv86"
	.size	.L.str.106, 7

	.type	.L.str.107,@object      # @.str.107
.L.str.107:
	.asciz	"7:1-32"
	.size	.L.str.107, 7

	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"36"
	.size	.L.str.108, 3

	.type	.L.str.109,@object      # @.str.109
.L.str.109:
	.asciz	"7:1-34"
	.size	.L.str.109, 7

	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"mul95"
	.size	.L.str.110, 6

	.type	.L.str.111,@object      # @.str.111
.L.str.111:
	.asciz	"tid"
	.size	.L.str.111, 4

	.type	.L.str.112,@object      # @.str.112
.L.str.112:
	.asciz	"7:1-35"
	.size	.L.str.112, 7

	.type	.L.str.113,@object      # @.str.113
.L.str.113:
	.asciz	"38"
	.size	.L.str.113, 3

	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"sub105"
	.size	.L.str.114, 7

	.type	.L.str.115,@object      # @.str.115
.L.str.115:
	.asciz	"conv106"
	.size	.L.str.115, 8

	.type	.L.str.116,@object      # @.str.116
.L.str.116:
	.asciz	"mul107"
	.size	.L.str.116, 7

	.type	.L.str.117,@object      # @.str.117
.L.str.117:
	.asciz	"conv108"
	.size	.L.str.117, 8

	.type	.L.str.118,@object      # @.str.118
.L.str.118:
	.asciz	"7:1-37"
	.size	.L.str.118, 7

	.type	.L.str.119,@object      # @.str.119
.L.str.119:
	.asciz	"39"
	.size	.L.str.119, 3

	.type	.L.str.120,@object      # @.str.120
.L.str.120:
	.asciz	"40"
	.size	.L.str.120, 3

	.type	.L.str.121,@object      # @.str.121
.L.str.121:
	.asciz	"add113"
	.size	.L.str.121, 7

	.type	.L.str.122,@object      # @.str.122
.L.str.122:
	.asciz	"conv114"
	.size	.L.str.122, 8

	.type	.L.str.123,@object      # @.str.123
.L.str.123:
	.asciz	"mul115"
	.size	.L.str.123, 7

	.type	.L.str.124,@object      # @.str.124
.L.str.124:
	.asciz	"conv116"
	.size	.L.str.124, 8

	.type	.L.str.125,@object      # @.str.125
.L.str.125:
	.asciz	"7:1-38"
	.size	.L.str.125, 7

	.type	.L.str.126,@object      # @.str.126
.L.str.126:
	.asciz	"43"
	.size	.L.str.126, 3

	.type	.L.str.127,@object      # @.str.127
.L.str.127:
	.asciz	"add123"
	.size	.L.str.127, 7

	.type	.L.str.128,@object      # @.str.128
.L.str.128:
	.asciz	"7:1-43"
	.size	.L.str.128, 7

	.type	.L.str.129,@object      # @.str.129
.L.str.129:
	.asciz	"44"
	.size	.L.str.129, 3

	.type	.L.str.130,@object      # @.str.130
.L.str.130:
	.asciz	"add126"
	.size	.L.str.130, 7

	.type	.L.str.131,@object      # @.str.131
.L.str.131:
	.asciz	"7:1-44"
	.size	.L.str.131, 7

	.type	.L.str.132,@object      # @.str.132
.L.str.132:
	.asciz	"45"
	.size	.L.str.132, 3

	.type	.L.str.133,@object      # @.str.133
.L.str.133:
	.asciz	"sub129"
	.size	.L.str.133, 7

	.type	.L.str.134,@object      # @.str.134
.L.str.134:
	.asciz	"7:1-45"
	.size	.L.str.134, 7

	.type	.L.str.135,@object      # @.str.135
.L.str.135:
	.asciz	"46"
	.size	.L.str.135, 3

	.type	.L.str.136,@object      # @.str.136
.L.str.136:
	.asciz	"sub132"
	.size	.L.str.136, 7

	.type	.L.str.137,@object      # @.str.137
.L.str.137:
	.asciz	"7:1-46"
	.size	.L.str.137, 7

	.type	.L.str.138,@object      # @.str.138
.L.str.138:
	.asciz	"49"
	.size	.L.str.138, 3

	.type	.L.str.139,@object      # @.str.139
.L.str.139:
	.asciz	"add139"
	.size	.L.str.139, 7

	.type	.L.str.140,@object      # @.str.140
.L.str.140:
	.asciz	"7:1-49"
	.size	.L.str.140, 7

	.type	.L.str.141,@object      # @.str.141
.L.str.141:
	.asciz	"50"
	.size	.L.str.141, 3

	.type	.L.str.142,@object      # @.str.142
.L.str.142:
	.asciz	"add142"
	.size	.L.str.142, 7

	.type	.L.str.143,@object      # @.str.143
.L.str.143:
	.asciz	"7:1-50"
	.size	.L.str.143, 7

	.type	.L.str.144,@object      # @.str.144
.L.str.144:
	.asciz	"51"
	.size	.L.str.144, 3

	.type	.L.str.145,@object      # @.str.145
.L.str.145:
	.asciz	"sub145"
	.size	.L.str.145, 7

	.type	.L.str.146,@object      # @.str.146
.L.str.146:
	.asciz	"7:1-51"
	.size	.L.str.146, 7

	.type	.L.str.147,@object      # @.str.147
.L.str.147:
	.asciz	"52"
	.size	.L.str.147, 3

	.type	.L.str.148,@object      # @.str.148
.L.str.148:
	.asciz	"sub148"
	.size	.L.str.148, 7

	.type	.L.str.149,@object      # @.str.149
.L.str.149:
	.asciz	"7:1-52"
	.size	.L.str.149, 7

	.type	.L.str.150,@object      # @.str.150
.L.str.150:
	.asciz	"tmp"
	.size	.L.str.150, 4

	.type	.L.str.151,@object      # @.str.151
.L.str.151:
	.asciz	"7:1-54"
	.size	.L.str.151, 7

	.type	.L.str.152,@object      # @.str.152
.L.str.152:
	.asciz	"mul157"
	.size	.L.str.152, 7

	.type	.L.str.153,@object      # @.str.153
.L.str.153:
	.asciz	"7:1-55"
	.size	.L.str.153, 7

	.type	.L.str.154,@object      # @.str.154
.L.str.154:
	.asciz	"56"
	.size	.L.str.154, 3

	.type	.L.str.155,@object      # @.str.155
.L.str.155:
	.asciz	"add167"
	.size	.L.str.155, 7

	.type	.L.str.156,@object      # @.str.156
.L.str.156:
	.asciz	"7:1-58"
	.size	.L.str.156, 7

	.type	.L.str.157,@object      # @.str.157
.L.str.157:
	.asciz	"57"
	.size	.L.str.157, 3

	.type	.L.str.158,@object      # @.str.158
.L.str.158:
	.asciz	"add170"
	.size	.L.str.158, 7

	.type	.L.str.159,@object      # @.str.159
.L.str.159:
	.asciz	"7:1-59"
	.size	.L.str.159, 7

	.type	.L.str.160,@object      # @.str.160
.L.str.160:
	.asciz	"58"
	.size	.L.str.160, 3

	.type	.L.str.161,@object      # @.str.161
.L.str.161:
	.asciz	"sub173"
	.size	.L.str.161, 7

	.type	.L.str.162,@object      # @.str.162
.L.str.162:
	.asciz	"7:1-60"
	.size	.L.str.162, 7

	.type	.L.str.163,@object      # @.str.163
.L.str.163:
	.asciz	"59"
	.size	.L.str.163, 3

	.type	.L.str.164,@object      # @.str.164
.L.str.164:
	.asciz	"sub176"
	.size	.L.str.164, 7

	.type	.L.str.165,@object      # @.str.165
.L.str.165:
	.asciz	"7:1-61"
	.size	.L.str.165, 7

	.type	.L.str.166,@object      # @.str.166
.L.str.166:
	.asciz	"62"
	.size	.L.str.166, 3

	.type	.L.str.167,@object      # @.str.167
.L.str.167:
	.asciz	"add183"
	.size	.L.str.167, 7

	.type	.L.str.168,@object      # @.str.168
.L.str.168:
	.asciz	"7:1-64"
	.size	.L.str.168, 7

	.type	.L.str.169,@object      # @.str.169
.L.str.169:
	.asciz	"63"
	.size	.L.str.169, 3

	.type	.L.str.170,@object      # @.str.170
.L.str.170:
	.asciz	"add186"
	.size	.L.str.170, 7

	.type	.L.str.171,@object      # @.str.171
.L.str.171:
	.asciz	"7:1-65"
	.size	.L.str.171, 7

	.type	.L.str.172,@object      # @.str.172
.L.str.172:
	.asciz	"64"
	.size	.L.str.172, 3

	.type	.L.str.173,@object      # @.str.173
.L.str.173:
	.asciz	"sub189"
	.size	.L.str.173, 7

	.type	.L.str.174,@object      # @.str.174
.L.str.174:
	.asciz	"7:1-66"
	.size	.L.str.174, 7

	.type	.L.str.175,@object      # @.str.175
.L.str.175:
	.asciz	"65"
	.size	.L.str.175, 3

	.type	.L.str.176,@object      # @.str.176
.L.str.176:
	.asciz	"sub192"
	.size	.L.str.176, 7

	.type	.L.str.177,@object      # @.str.177
.L.str.177:
	.asciz	"7:1-67"
	.size	.L.str.177, 7

	.type	.L.str.178,@object      # @.str.178
.L.str.178:
	.asciz	"68"
	.size	.L.str.178, 3

	.type	.L.str.179,@object      # @.str.179
.L.str.179:
	.asciz	"add202"
	.size	.L.str.179, 7

	.type	.L.str.180,@object      # @.str.180
.L.str.180:
	.asciz	"7:1-72"
	.size	.L.str.180, 7

	.type	.L.str.181,@object      # @.str.181
.L.str.181:
	.asciz	"69"
	.size	.L.str.181, 3

	.type	.L.str.182,@object      # @.str.182
.L.str.182:
	.asciz	"add205"
	.size	.L.str.182, 7

	.type	.L.str.183,@object      # @.str.183
.L.str.183:
	.asciz	"7:1-73"
	.size	.L.str.183, 7

	.type	.L.str.184,@object      # @.str.184
.L.str.184:
	.asciz	"70"
	.size	.L.str.184, 3

	.type	.L.str.185,@object      # @.str.185
.L.str.185:
	.asciz	"sub208"
	.size	.L.str.185, 7

	.type	.L.str.186,@object      # @.str.186
.L.str.186:
	.asciz	"7:1-74"
	.size	.L.str.186, 7

	.type	.L.str.187,@object      # @.str.187
.L.str.187:
	.asciz	"71"
	.size	.L.str.187, 3

	.type	.L.str.188,@object      # @.str.188
.L.str.188:
	.asciz	"sub211"
	.size	.L.str.188, 7

	.type	.L.str.189,@object      # @.str.189
.L.str.189:
	.asciz	"7:1-75"
	.size	.L.str.189, 7

	.type	.L.str.190,@object      # @.str.190
.L.str.190:
	.asciz	"74"
	.size	.L.str.190, 3

	.type	.L.str.191,@object      # @.str.191
.L.str.191:
	.asciz	"add218"
	.size	.L.str.191, 7

	.type	.L.str.192,@object      # @.str.192
.L.str.192:
	.asciz	"7:1-78"
	.size	.L.str.192, 7

	.type	.L.str.193,@object      # @.str.193
.L.str.193:
	.asciz	"75"
	.size	.L.str.193, 3

	.type	.L.str.194,@object      # @.str.194
.L.str.194:
	.asciz	"add221"
	.size	.L.str.194, 7

	.type	.L.str.195,@object      # @.str.195
.L.str.195:
	.asciz	"7:1-79"
	.size	.L.str.195, 7

	.type	.L.str.196,@object      # @.str.196
.L.str.196:
	.asciz	"76"
	.size	.L.str.196, 3

	.type	.L.str.197,@object      # @.str.197
.L.str.197:
	.asciz	"sub224"
	.size	.L.str.197, 7

	.type	.L.str.198,@object      # @.str.198
.L.str.198:
	.asciz	"7:1-80"
	.size	.L.str.198, 7

	.type	.L.str.199,@object      # @.str.199
.L.str.199:
	.asciz	"77"
	.size	.L.str.199, 3

	.type	.L.str.200,@object      # @.str.200
.L.str.200:
	.asciz	"sub227"
	.size	.L.str.200, 7

	.type	.L.str.201,@object      # @.str.201
.L.str.201:
	.asciz	"7:1-81"
	.size	.L.str.201, 7

	.type	.L.str.202,@object      # @.str.202
.L.str.202:
	.asciz	"7:1-83"
	.size	.L.str.202, 7

	.type	.L.str.203,@object      # @.str.203
.L.str.203:
	.asciz	"mul236"
	.size	.L.str.203, 7

	.type	.L.str.204,@object      # @.str.204
.L.str.204:
	.asciz	"7:1-84"
	.size	.L.str.204, 7

	.type	.L.str.205,@object      # @.str.205
.L.str.205:
	.asciz	"81"
	.size	.L.str.205, 3

	.type	.L.str.206,@object      # @.str.206
.L.str.206:
	.asciz	"add246"
	.size	.L.str.206, 7

	.type	.L.str.207,@object      # @.str.207
.L.str.207:
	.asciz	"7:1-87"
	.size	.L.str.207, 7

	.type	.L.str.208,@object      # @.str.208
.L.str.208:
	.asciz	"82"
	.size	.L.str.208, 3

	.type	.L.str.209,@object      # @.str.209
.L.str.209:
	.asciz	"add249"
	.size	.L.str.209, 7

	.type	.L.str.210,@object      # @.str.210
.L.str.210:
	.asciz	"7:1-88"
	.size	.L.str.210, 7

	.type	.L.str.211,@object      # @.str.211
.L.str.211:
	.asciz	"83"
	.size	.L.str.211, 3

	.type	.L.str.212,@object      # @.str.212
.L.str.212:
	.asciz	"sub252"
	.size	.L.str.212, 7

	.type	.L.str.213,@object      # @.str.213
.L.str.213:
	.asciz	"7:1-89"
	.size	.L.str.213, 7

	.type	.L.str.214,@object      # @.str.214
.L.str.214:
	.asciz	"84"
	.size	.L.str.214, 3

	.type	.L.str.215,@object      # @.str.215
.L.str.215:
	.asciz	"sub255"
	.size	.L.str.215, 7

	.type	.L.str.216,@object      # @.str.216
.L.str.216:
	.asciz	"7:1-90"
	.size	.L.str.216, 7

	.type	.L.str.217,@object      # @.str.217
.L.str.217:
	.asciz	"87"
	.size	.L.str.217, 3

	.type	.L.str.218,@object      # @.str.218
.L.str.218:
	.asciz	"add262"
	.size	.L.str.218, 7

	.type	.L.str.219,@object      # @.str.219
.L.str.219:
	.asciz	"7:1-93"
	.size	.L.str.219, 7

	.type	.L.str.220,@object      # @.str.220
.L.str.220:
	.asciz	"88"
	.size	.L.str.220, 3

	.type	.L.str.221,@object      # @.str.221
.L.str.221:
	.asciz	"add265"
	.size	.L.str.221, 7

	.type	.L.str.222,@object      # @.str.222
.L.str.222:
	.asciz	"7:1-94"
	.size	.L.str.222, 7

	.type	.L.str.223,@object      # @.str.223
.L.str.223:
	.asciz	"89"
	.size	.L.str.223, 3

	.type	.L.str.224,@object      # @.str.224
.L.str.224:
	.asciz	"sub268"
	.size	.L.str.224, 7

	.type	.L.str.225,@object      # @.str.225
.L.str.225:
	.asciz	"7:1-95"
	.size	.L.str.225, 7

	.type	.L.str.226,@object      # @.str.226
.L.str.226:
	.asciz	"90"
	.size	.L.str.226, 3

	.type	.L.str.227,@object      # @.str.227
.L.str.227:
	.asciz	"sub271"
	.size	.L.str.227, 7

	.type	.L.str.228,@object      # @.str.228
.L.str.228:
	.asciz	"7:1-96"
	.size	.L.str.228, 7

	.type	.L.str.229,@object      # @.str.229
.L.str.229:
	.asciz	"91"
	.size	.L.str.229, 3

	.type	.L.str.230,@object      # @.str.230
.L.str.230:
	.asciz	"92"
	.size	.L.str.230, 3

	.type	.L.str.231,@object      # @.str.231
.L.str.231:
	.asciz	"7:1-98"
	.size	.L.str.231, 7

	.type	.L.str.232,@object      # @.str.232
.L.str.232:
	.asciz	"93:2"
	.size	.L.str.232, 5

	.type	.L.str.233,@object      # @.str.233
.L.str.233:
	.asciz	"indvars.iv600"
	.size	.L.str.233, 14

	.type	.L.str.234,@object      # @.str.234
	.p2align	4
.L.str.234:
	.asciz	"indvars.iv.next601"
	.size	.L.str.234, 19

	.type	.L.str.235,@object      # @.str.235
.L.str.235:
	.asciz	"94"
	.size	.L.str.235, 3

	.type	.L.str.236,@object      # @.str.236
.L.str.236:
	.asciz	"arrayidx280"
	.size	.L.str.236, 12

	.type	.L.str.238,@object      # @.str.238
.L.str.238:
	.asciz	"95"
	.size	.L.str.238, 3

	.type	.L.str.239,@object      # @.str.239
.L.str.239:
	.asciz	"conv281"
	.size	.L.str.239, 8

	.type	.L.str.240,@object      # @.str.240
.L.str.240:
	.asciz	"arrayidx286"
	.size	.L.str.240, 12

	.type	.L.str.242,@object      # @.str.242
.L.str.242:
	.asciz	"96"
	.size	.L.str.242, 3

	.type	.L.str.243,@object      # @.str.243
.L.str.243:
	.asciz	"conv287"
	.size	.L.str.243, 8

	.type	.L.str.244,@object      # @.str.244
.L.str.244:
	.asciz	"arrayidx289"
	.size	.L.str.244, 12

	.type	.L.str.245,@object      # @.str.245
.L.str.245:
	.asciz	"mul292"
	.size	.L.str.245, 7

	.type	.L.str.246,@object      # @.str.246
.L.str.246:
	.asciz	"arrayidx294"
	.size	.L.str.246, 12

	.type	.L.str.247,@object      # @.str.247
.L.str.247:
	.asciz	"98"
	.size	.L.str.247, 3

	.type	.L.str.248,@object      # @.str.248
.L.str.248:
	.asciz	"mul295"
	.size	.L.str.248, 7

	.type	.L.str.249,@object      # @.str.249
.L.str.249:
	.asciz	"sub296"
	.size	.L.str.249, 7

	.type	.L.str.250,@object      # @.str.250
.L.str.250:
	.asciz	"93:2-4"
	.size	.L.str.250, 7

	.type	.L.str.251,@object      # @.str.251
.L.str.251:
	.asciz	"mul299"
	.size	.L.str.251, 7

	.type	.L.str.252,@object      # @.str.252
.L.str.252:
	.asciz	"99"
	.size	.L.str.252, 3

	.type	.L.str.253,@object      # @.str.253
.L.str.253:
	.asciz	"mul302"
	.size	.L.str.253, 7

	.type	.L.str.254,@object      # @.str.254
.L.str.254:
	.asciz	"add303"
	.size	.L.str.254, 7

	.type	.L.str.255,@object      # @.str.255
.L.str.255:
	.asciz	"93:2-5"
	.size	.L.str.255, 7

	.type	.L.str.256,@object      # @.str.256
.L.str.256:
	.asciz	"exitcond603"
	.size	.L.str.256, 12

	.type	.L.str.257,@object      # @.str.257
.L.str.257:
	.asciz	"93:2-6"
	.size	.L.str.257, 7

	.type	.L.str.258,@object      # @.str.258
.L.str.258:
	.asciz	"100:1"
	.size	.L.str.258, 6

	.type	.L.str.259,@object      # @.str.259
.L.str.259:
	.asciz	"101"
	.size	.L.str.259, 4

	.type	.L.str.260,@object      # @.str.260
.L.str.260:
	.asciz	"100:1-1"
	.size	.L.str.260, 8

	.type	.L.str.261,@object      # @.str.261
.L.str.261:
	.asciz	"102:2"
	.size	.L.str.261, 6

	.type	.L.str.262,@object      # @.str.262
.L.str.262:
	.asciz	"indvars.iv604"
	.size	.L.str.262, 14

	.type	.L.str.263,@object      # @.str.263
	.p2align	4
.L.str.263:
	.asciz	"indvars.iv.next605"
	.size	.L.str.263, 19

	.type	.L.str.264,@object      # @.str.264
.L.str.264:
	.asciz	"arrayidx310"
	.size	.L.str.264, 12

	.type	.L.str.265,@object      # @.str.265
.L.str.265:
	.asciz	"103"
	.size	.L.str.265, 4

	.type	.L.str.266,@object      # @.str.266
.L.str.266:
	.asciz	"104"
	.size	.L.str.266, 4

	.type	.L.str.267,@object      # @.str.267
.L.str.267:
	.asciz	"arrayidx314"
	.size	.L.str.267, 12

	.type	.L.str.269,@object      # @.str.269
.L.str.269:
	.asciz	"102:2-1"
	.size	.L.str.269, 8

	.type	.L.str.270,@object      # @.str.270
.L.str.270:
	.asciz	"arrayidx316"
	.size	.L.str.270, 12

	.type	.L.str.271,@object      # @.str.271
.L.str.271:
	.asciz	"105"
	.size	.L.str.271, 4

	.type	.L.str.272,@object      # @.str.272
.L.str.272:
	.asciz	"arrayidx320"
	.size	.L.str.272, 12

	.type	.L.str.274,@object      # @.str.274
.L.str.274:
	.asciz	"102:2-2"
	.size	.L.str.274, 8

	.type	.L.str.275,@object      # @.str.275
.L.str.275:
	.asciz	"exitcond607"
	.size	.L.str.275, 12

	.type	.L.str.276,@object      # @.str.276
.L.str.276:
	.asciz	"102:2-3"
	.size	.L.str.276, 8

	.type	.L.str.277,@object      # @.str.277
.L.str.277:
	.asciz	"exitcond613"
	.size	.L.str.277, 12

	.type	.L.str.278,@object      # @.str.278
.L.str.278:
	.asciz	"106:1-0"
	.size	.L.str.278, 8

	.type	.L.str.279,@object      # @.str.279
.L.str.279:
	.asciz	"107:0"
	.size	.L.str.279, 6

	.type	.L.str.280,@object      # @.str.280
.L.str.280:
	.asciz	"107:0-0"
	.size	.L.str.280, 8

	.type	.L.str.285,@object      # @.str.285
.L.str.285:
	.asciz	"step2"
	.size	.L.str.285, 6

	.type	.L.str.286,@object      # @.str.286
.L.str.286:
	.asciz	"arrayidx20"
	.size	.L.str.286, 11

	.type	.L.str.287,@object      # @.str.287
.L.str.287:
	.asciz	"arrayidx28"
	.size	.L.str.287, 11

	.type	.L.str.288,@object      # @.str.288
.L.str.288:
	.asciz	"arrayidx36"
	.size	.L.str.288, 11

	.type	.L.str.289,@object      # @.str.289
.L.str.289:
	.asciz	"arrayidx44"
	.size	.L.str.289, 11

	.type	.L.str.290,@object      # @.str.290
.L.str.290:
	.asciz	"arrayidx52"
	.size	.L.str.290, 11

	.type	.L.str.291,@object      # @.str.291
.L.str.291:
	.asciz	"arrayidx60"
	.size	.L.str.291, 11

	.type	.L.str.292,@object      # @.str.292
.L.str.292:
	.asciz	"indvars.iv121"
	.size	.L.str.292, 14

	.type	.L.str.293,@object      # @.str.293
	.p2align	4
.L.str.293:
	.asciz	"indvars.iv.next122"
	.size	.L.str.293, 19

	.type	.L.str.294,@object      # @.str.294
.L.str.294:
	.asciz	"6:1"
	.size	.L.str.294, 4

	.type	.L.str.295,@object      # @.str.295
.L.str.295:
	.asciz	"2"
	.size	.L.str.295, 2

	.type	.L.str.296,@object      # @.str.296
.L.str.296:
	.asciz	"3:2"
	.size	.L.str.296, 4

	.type	.L.str.297,@object      # @.str.297
.L.str.297:
	.asciz	"3:2-1"
	.size	.L.str.297, 6

	.type	.L.str.298,@object      # @.str.298
.L.str.298:
	.asciz	"3:2-2"
	.size	.L.str.298, 6

	.type	.L.str.299,@object      # @.str.299
.L.str.299:
	.asciz	"7"
	.size	.L.str.299, 2

	.type	.L.str.300,@object      # @.str.300
.L.str.300:
	.asciz	"and"
	.size	.L.str.300, 4

	.type	.L.str.301,@object      # @.str.301
.L.str.301:
	.asciz	"8"
	.size	.L.str.301, 2

	.type	.L.str.302,@object      # @.str.302
.L.str.302:
	.asciz	"idxprom5"
	.size	.L.str.302, 9

	.type	.L.str.303,@object      # @.str.303
.L.str.303:
	.asciz	"arrayidx6"
	.size	.L.str.303, 10

	.type	.L.str.304,@object      # @.str.304
.L.str.304:
	.asciz	"9"
	.size	.L.str.304, 2

	.type	.L.str.305,@object      # @.str.305
.L.str.305:
	.asciz	"arrayidx11"
	.size	.L.str.305, 11

	.type	.L.str.306,@object      # @.str.306
.L.str.306:
	.asciz	"6:1-0"
	.size	.L.str.306, 6

	.type	.L.str.307,@object      # @.str.307
.L.str.307:
	.asciz	"idxprom13"
	.size	.L.str.307, 10

	.type	.L.str.308,@object      # @.str.308
.L.str.308:
	.asciz	"arrayidx14"
	.size	.L.str.308, 11

	.type	.L.str.309,@object      # @.str.309
.L.str.309:
	.asciz	"arrayidx19"
	.size	.L.str.309, 11

	.type	.L.str.310,@object      # @.str.310
.L.str.310:
	.asciz	"6:1-1"
	.size	.L.str.310, 6

	.type	.L.str.311,@object      # @.str.311
.L.str.311:
	.asciz	"idxprom21"
	.size	.L.str.311, 10

	.type	.L.str.312,@object      # @.str.312
.L.str.312:
	.asciz	"arrayidx22"
	.size	.L.str.312, 11

	.type	.L.str.313,@object      # @.str.313
.L.str.313:
	.asciz	"14"
	.size	.L.str.313, 3

	.type	.L.str.314,@object      # @.str.314
.L.str.314:
	.asciz	"15"
	.size	.L.str.314, 3

	.type	.L.str.315,@object      # @.str.315
.L.str.315:
	.asciz	"6:1-2"
	.size	.L.str.315, 6

	.type	.L.str.316,@object      # @.str.316
.L.str.316:
	.asciz	"idxprom29"
	.size	.L.str.316, 10

	.type	.L.str.317,@object      # @.str.317
.L.str.317:
	.asciz	"arrayidx35"
	.size	.L.str.317, 11

	.type	.L.str.318,@object      # @.str.318
.L.str.318:
	.asciz	"6:1-3"
	.size	.L.str.318, 6

	.type	.L.str.319,@object      # @.str.319
.L.str.319:
	.asciz	"idxprom37"
	.size	.L.str.319, 10

	.type	.L.str.320,@object      # @.str.320
.L.str.320:
	.asciz	"arrayidx38"
	.size	.L.str.320, 11

	.type	.L.str.321,@object      # @.str.321
.L.str.321:
	.asciz	"20"
	.size	.L.str.321, 3

	.type	.L.str.322,@object      # @.str.322
.L.str.322:
	.asciz	"add40"
	.size	.L.str.322, 6

	.type	.L.str.323,@object      # @.str.323
.L.str.323:
	.asciz	"add41"
	.size	.L.str.323, 6

	.type	.L.str.324,@object      # @.str.324
.L.str.324:
	.asciz	"6:1-4"
	.size	.L.str.324, 6

	.type	.L.str.325,@object      # @.str.325
.L.str.325:
	.asciz	"21"
	.size	.L.str.325, 3

	.type	.L.str.326,@object      # @.str.326
.L.str.326:
	.asciz	"idxprom45"
	.size	.L.str.326, 10

	.type	.L.str.327,@object      # @.str.327
.L.str.327:
	.asciz	"arrayidx51"
	.size	.L.str.327, 11

	.type	.L.str.328,@object      # @.str.328
.L.str.328:
	.asciz	"6:1-5"
	.size	.L.str.328, 6

	.type	.L.str.329,@object      # @.str.329
.L.str.329:
	.asciz	"idxprom53"
	.size	.L.str.329, 10

	.type	.L.str.330,@object      # @.str.330
.L.str.330:
	.asciz	"arrayidx54"
	.size	.L.str.330, 11

	.type	.L.str.331,@object      # @.str.331
.L.str.331:
	.asciz	"26"
	.size	.L.str.331, 3

	.type	.L.str.332,@object      # @.str.332
.L.str.332:
	.asciz	"6:1-6"
	.size	.L.str.332, 6

	.type	.L.str.333,@object      # @.str.333
.L.str.333:
	.asciz	"27"
	.size	.L.str.333, 3

	.type	.L.str.334,@object      # @.str.334
.L.str.334:
	.asciz	"idxprom61"
	.size	.L.str.334, 10

	.type	.L.str.335,@object      # @.str.335
.L.str.335:
	.asciz	"arrayidx67"
	.size	.L.str.335, 11

	.type	.L.str.336,@object      # @.str.336
.L.str.336:
	.asciz	"6:1-7"
	.size	.L.str.336, 6

	.type	.L.str.337,@object      # @.str.337
.L.str.337:
	.asciz	"exitcond130"
	.size	.L.str.337, 12

	.type	.L.str.338,@object      # @.str.338
.L.str.338:
	.asciz	"6:1-8"
	.size	.L.str.338, 6

	.type	.L.str.339,@object      # @.str.339
.L.str.339:
	.asciz	"30:0"
	.size	.L.str.339, 5

	.type	.L.str.340,@object      # @.str.340
.L.str.340:
	.asciz	"30:0-0"
	.size	.L.str.340, 7

	.type	.L.str.341,@object      # @.str.341
.L.str.341:
	.asciz	"step3"
	.size	.L.str.341, 6

	.type	.L.str.342,@object      # @.str.342
.L.str.342:
	.asciz	"arrayidx21"
	.size	.L.str.342, 11

	.type	.L.str.343,@object      # @.str.343
.L.str.343:
	.asciz	"arrayidx33"
	.size	.L.str.343, 11

	.type	.L.str.344,@object      # @.str.344
.L.str.344:
	.asciz	"arrayidx39"
	.size	.L.str.344, 11

	.type	.L.str.345,@object      # @.str.345
.L.str.345:
	.asciz	"arrayidx45"
	.size	.L.str.345, 11

	.type	.L.str.346,@object      # @.str.346
.L.str.346:
	.asciz	"indvars.iv118"
	.size	.L.str.346, 14

	.type	.L.str.347,@object      # @.str.347
	.p2align	4
.L.str.347:
	.asciz	"indvars.iv.next119"
	.size	.L.str.347, 19

	.type	.L.str.348,@object      # @.str.348
.L.str.348:
	.asciz	"30:1"
	.size	.L.str.348, 5

	.type	.L.str.349,@object      # @.str.349
.L.str.349:
	.asciz	"hi"
	.size	.L.str.349, 3

	.type	.L.str.350,@object      # @.str.350
.L.str.350:
	.asciz	"mul4"
	.size	.L.str.350, 5

	.type	.L.str.351,@object      # @.str.351
.L.str.351:
	.asciz	"add6"
	.size	.L.str.351, 5

	.type	.L.str.352,@object      # @.str.352
.L.str.352:
	.asciz	"arrayidx8"
	.size	.L.str.352, 10

	.type	.L.str.353,@object      # @.str.353
.L.str.353:
	.asciz	"add11"
	.size	.L.str.353, 6

	.type	.L.str.354,@object      # @.str.354
.L.str.354:
	.asciz	"add12"
	.size	.L.str.354, 6

	.type	.L.str.355,@object      # @.str.355
.L.str.355:
	.asciz	"add17"
	.size	.L.str.355, 6

	.type	.L.str.356,@object      # @.str.356
.L.str.356:
	.asciz	"add18"
	.size	.L.str.356, 6

	.type	.L.str.357,@object      # @.str.357
.L.str.357:
	.asciz	"add23"
	.size	.L.str.357, 6

	.type	.L.str.358,@object      # @.str.358
.L.str.358:
	.asciz	"add24"
	.size	.L.str.358, 6

	.type	.L.str.359,@object      # @.str.359
.L.str.359:
	.asciz	"add29"
	.size	.L.str.359, 6

	.type	.L.str.360,@object      # @.str.360
.L.str.360:
	.asciz	"add30"
	.size	.L.str.360, 6

	.type	.L.str.361,@object      # @.str.361
.L.str.361:
	.asciz	"arrayidx32"
	.size	.L.str.361, 11

	.type	.L.str.362,@object      # @.str.362
.L.str.362:
	.asciz	"add35"
	.size	.L.str.362, 6

	.type	.L.str.363,@object      # @.str.363
.L.str.363:
	.asciz	"add36"
	.size	.L.str.363, 6

	.type	.L.str.364,@object      # @.str.364
.L.str.364:
	.asciz	"add42"
	.size	.L.str.364, 6

	.type	.L.str.365,@object      # @.str.365
.L.str.365:
	.asciz	"add48"
	.size	.L.str.365, 6

	.type	.L.str.366,@object      # @.str.366
.L.str.366:
	.asciz	"arrayidx50"
	.size	.L.str.366, 11

	.type	.L.str.367,@object      # @.str.367
.L.str.367:
	.asciz	"6:1-9"
	.size	.L.str.367, 6

	.type	.L.str.368,@object      # @.str.368
.L.str.368:
	.asciz	"6:1-11"
	.size	.L.str.368, 7

	.type	.L.str.369,@object      # @.str.369
.L.str.369:
	.asciz	"27:2"
	.size	.L.str.369, 5

	.type	.L.str.370,@object      # @.str.370
.L.str.370:
	.asciz	"indvars.iv114"
	.size	.L.str.370, 14

	.type	.L.str.371,@object      # @.str.371
	.p2align	4
.L.str.371:
	.asciz	"indvars.iv.next115"
	.size	.L.str.371, 19

	.type	.L.str.372,@object      # @.str.372
.L.str.372:
	.asciz	"27:2-1"
	.size	.L.str.372, 7

	.type	.L.str.373,@object      # @.str.373
.L.str.373:
	.asciz	"exitcond117"
	.size	.L.str.373, 12

	.type	.L.str.374,@object      # @.str.374
.L.str.374:
	.asciz	"27:2-2"
	.size	.L.str.374, 7

	.type	.L.str.375,@object      # @.str.375
.L.str.375:
	.asciz	"exitcond122"
	.size	.L.str.375, 12

	.type	.L.str.376,@object      # @.str.376
.L.str.376:
	.asciz	"30:1-0"
	.size	.L.str.376, 7

	.type	.L.str.377,@object      # @.str.377
.L.str.377:
	.asciz	"31:0"
	.size	.L.str.377, 5

	.type	.L.str.378,@object      # @.str.378
.L.str.378:
	.asciz	"31:0-0"
	.size	.L.str.378, 7

	.type	.L.str.379,@object      # @.str.379
.L.str.379:
	.asciz	"step4"
	.size	.L.str.379, 6

	.type	.L.str.380,@object      # @.str.380
.L.str.380:
	.asciz	"step5"
	.size	.L.str.380, 6

	.type	.L.str.381,@object      # @.str.381
.L.str.381:
	.asciz	"step6"
	.size	.L.str.381, 6

	.type	.L.str.382,@object      # @.str.382
.L.str.382:
	.asciz	"107:1"
	.size	.L.str.382, 6

	.type	.L.str.383,@object      # @.str.383
.L.str.383:
	.asciz	"3:2-3"
	.size	.L.str.383, 6

	.type	.L.str.384,@object      # @.str.384
.L.str.384:
	.asciz	"mul276"
	.size	.L.str.384, 7

	.type	.L.str.385,@object      # @.str.385
.L.str.385:
	.asciz	"add277"
	.size	.L.str.385, 7

	.type	.L.str.386,@object      # @.str.386
.L.str.386:
	.asciz	"exp_1_8_y"
	.size	.L.str.386, 10

	.type	.L.str.387,@object      # @.str.387
.L.str.387:
	.asciz	"93"
	.size	.L.str.387, 3

	.type	.L.str.388,@object      # @.str.388
.L.str.388:
	.asciz	"7:1-99"
	.size	.L.str.388, 7

	.type	.L.str.389,@object      # @.str.389
.L.str.389:
	.asciz	"94:2"
	.size	.L.str.389, 5

	.type	.L.str.390,@object      # @.str.390
.L.str.390:
	.asciz	"97"
	.size	.L.str.390, 3

	.type	.L.str.391,@object      # @.str.391
.L.str.391:
	.asciz	"94:2-4"
	.size	.L.str.391, 7

	.type	.L.str.392,@object      # @.str.392
.L.str.392:
	.asciz	"100"
	.size	.L.str.392, 4

	.type	.L.str.393,@object      # @.str.393
.L.str.393:
	.asciz	"94:2-5"
	.size	.L.str.393, 7

	.type	.L.str.394,@object      # @.str.394
.L.str.394:
	.asciz	"94:2-6"
	.size	.L.str.394, 7

	.type	.L.str.395,@object      # @.str.395
.L.str.395:
	.asciz	"101:1"
	.size	.L.str.395, 6

	.type	.L.str.396,@object      # @.str.396
.L.str.396:
	.asciz	"102"
	.size	.L.str.396, 4

	.type	.L.str.397,@object      # @.str.397
.L.str.397:
	.asciz	"101:1-1"
	.size	.L.str.397, 8

	.type	.L.str.398,@object      # @.str.398
.L.str.398:
	.asciz	"103:2"
	.size	.L.str.398, 6

	.type	.L.str.399,@object      # @.str.399
.L.str.399:
	.asciz	"103:2-1"
	.size	.L.str.399, 8

	.type	.L.str.400,@object      # @.str.400
.L.str.400:
	.asciz	"106"
	.size	.L.str.400, 4

	.type	.L.str.401,@object      # @.str.401
.L.str.401:
	.asciz	"103:2-2"
	.size	.L.str.401, 8

	.type	.L.str.402,@object      # @.str.402
.L.str.402:
	.asciz	"103:2-3"
	.size	.L.str.402, 8

	.type	.L.str.403,@object      # @.str.403
.L.str.403:
	.asciz	"exitcond612"
	.size	.L.str.403, 12

	.type	.L.str.404,@object      # @.str.404
.L.str.404:
	.asciz	"107:1-0"
	.size	.L.str.404, 8

	.type	.L.str.405,@object      # @.str.405
.L.str.405:
	.asciz	"108:0"
	.size	.L.str.405, 6

	.type	.L.str.406,@object      # @.str.406
.L.str.406:
	.asciz	"108:0-0"
	.size	.L.str.406, 8

	.type	.L.str.407,@object      # @.str.407
.L.str.407:
	.asciz	"step7"
	.size	.L.str.407, 6

	.type	.L.str.408,@object      # @.str.408
.L.str.408:
	.asciz	"add25"
	.size	.L.str.408, 6

	.type	.L.str.409,@object      # @.str.409
.L.str.409:
	.asciz	"add32"
	.size	.L.str.409, 6

	.type	.L.str.410,@object      # @.str.410
.L.str.410:
	.asciz	"add33"
	.size	.L.str.410, 6

	.type	.L.str.411,@object      # @.str.411
.L.str.411:
	.asciz	"add49"
	.size	.L.str.411, 6

	.type	.L.str.412,@object      # @.str.412
.L.str.412:
	.asciz	"add56"
	.size	.L.str.412, 6

	.type	.L.str.413,@object      # @.str.413
.L.str.413:
	.asciz	"add57"
	.size	.L.str.413, 6

	.type	.L.str.414,@object      # @.str.414
.L.str.414:
	.asciz	"add64"
	.size	.L.str.414, 6

	.type	.L.str.415,@object      # @.str.415
.L.str.415:
	.asciz	"add65"
	.size	.L.str.415, 6

	.type	.L.str.416,@object      # @.str.416
.L.str.416:
	.asciz	"32"
	.size	.L.str.416, 3

	.type	.L.str.417,@object      # @.str.417
.L.str.417:
	.asciz	"exitcond124"
	.size	.L.str.417, 12

	.type	.L.str.418,@object      # @.str.418
.L.str.418:
	.asciz	"33:0"
	.size	.L.str.418, 5

	.type	.L.str.419,@object      # @.str.419
.L.str.419:
	.asciz	"33:0-0"
	.size	.L.str.419, 7

	.type	.L.str.420,@object      # @.str.420
.L.str.420:
	.asciz	"step8"
	.size	.L.str.420, 6

	.type	.L.str.421,@object      # @.str.421
.L.str.421:
	.asciz	"step9"
	.size	.L.str.421, 6

	.type	.L.str.422,@object      # @.str.422
.L.str.422:
	.asciz	"step10"
	.size	.L.str.422, 7

	.type	.L.str.423,@object      # @.str.423
.L.str.423:
	.asciz	"step11"
	.size	.L.str.423, 7

	.type	.L.str.424,@object      # @.str.424
.L.str.424:
	.asciz	"indvars.iv552"
	.size	.L.str.424, 14

	.type	.L.str.425,@object      # @.str.425
	.p2align	4
.L.str.425:
	.asciz	"indvars.iv.next553"
	.size	.L.str.425, 19

	.type	.L.str.426,@object      # @.str.426
.L.str.426:
	.asciz	"98:1"
	.size	.L.str.426, 5

	.type	.L.str.427,@object      # @.str.427
.L.str.427:
	.asciz	"91:2"
	.size	.L.str.427, 5

	.type	.L.str.428,@object      # @.str.428
.L.str.428:
	.asciz	"indvars.iv547"
	.size	.L.str.428, 14

	.type	.L.str.429,@object      # @.str.429
	.p2align	4
.L.str.429:
	.asciz	"indvars.iv.next548"
	.size	.L.str.429, 19

	.type	.L.str.430,@object      # @.str.430
.L.str.430:
	.asciz	"arrayidx276"
	.size	.L.str.430, 12

	.type	.L.str.431,@object      # @.str.431
.L.str.431:
	.asciz	"idxprom277"
	.size	.L.str.431, 11

	.type	.L.str.432,@object      # @.str.432
.L.str.432:
	.asciz	"arrayidx278"
	.size	.L.str.432, 12

	.type	.L.str.433,@object      # @.str.433
.L.str.433:
	.asciz	"arrayidx282"
	.size	.L.str.433, 12

	.type	.L.str.434,@object      # @.str.434
.L.str.434:
	.asciz	"91:2-1"
	.size	.L.str.434, 7

	.type	.L.str.435,@object      # @.str.435
.L.str.435:
	.asciz	"idxprom285"
	.size	.L.str.435, 11

	.type	.L.str.436,@object      # @.str.436
.L.str.436:
	.asciz	"arrayidx290"
	.size	.L.str.436, 12

	.type	.L.str.437,@object      # @.str.437
.L.str.437:
	.asciz	"91:2-2"
	.size	.L.str.437, 7

	.type	.L.str.438,@object      # @.str.438
.L.str.438:
	.asciz	"exitcond551"
	.size	.L.str.438, 12

	.type	.L.str.439,@object      # @.str.439
.L.str.439:
	.asciz	"91:2-3"
	.size	.L.str.439, 7

	.type	.L.str.440,@object      # @.str.440
.L.str.440:
	.asciz	"exitcond555"
	.size	.L.str.440, 12

	.type	.L.str.441,@object      # @.str.441
.L.str.441:
	.asciz	"98:1-0"
	.size	.L.str.441, 7

	.type	.L.str.442,@object      # @.str.442
.L.str.442:
	.asciz	"99:0"
	.size	.L.str.442, 5

	.type	.L.str.443,@object      # @.str.443
.L.str.443:
	.asciz	"99:0-0"
	.size	.L.str.443, 7

	.type	.L.str.444,@object      # @.str.444
.L.str.444:
	.asciz	"fft1D_512"
	.size	.L.str.444, 10

	.type	.L.str.445,@object      # @.str.445
.L.str.445:
	.asciz	"0:0-13"
	.size	.L.str.445, 7

	.type	.L.str.446,@object      # @.str.446
.L.str.446:
	.asciz	"0:0-15"
	.size	.L.str.446, 7

	.type	.L.str.447,@object      # @.str.447
.L.str.447:
	.asciz	"0:0-16"
	.size	.L.str.447, 7

	.type	.L.str.448,@object      # @.str.448
.L.str.448:
	.asciz	"0:0-17"
	.size	.L.str.448, 7

	.type	.L.str.449,@object      # @.str.449
.L.str.449:
	.asciz	"0:0-18"
	.size	.L.str.449, 7

	.type	.L.str.450,@object      # @.str.450
.L.str.450:
	.asciz	"0:0-19"
	.size	.L.str.450, 7

	.type	.L.str.451,@object      # @.str.451
.L.str.451:
	.asciz	"0:0-20"
	.size	.L.str.451, 7

	.type	.L.str.452,@object      # @.str.452
.L.str.452:
	.asciz	"0:0-21"
	.size	.L.str.452, 7

	.type	.L.str.453,@object      # @.str.453
.L.str.453:
	.asciz	"0:0-22"
	.size	.L.str.453, 7

	.type	.L.str.454,@object      # @.str.454
.L.str.454:
	.asciz	"0:0-23"
	.size	.L.str.454, 7

	.type	.L.str.455,@object      # @.str.455
.L.str.455:
	.asciz	"0:0-24"
	.size	.L.str.455, 7

	.type	.L.str.500,@object      # @.str.500
	.p2align	4
.L.str.500:
	.asciz	"step1/load 22\nstep1/outer 20\nstep1/store 40\nstep1/twiddles 30\nstep10/load 271\nstep10/outer 270\nstep10/store 278\nstep11/load 299\nstep11/outer 297\nstep11/store 308\nstep2/load 58\nstep2/outer 57\nstep3/load 80\nstep3/outer 79\nstep3/store 87\nstep4/load 105\nstep4/outer 104\nstep5/load 127\nstep5/outer 126\nstep5/store 134\nstep6/load 155\nstep6/outer 153\nstep6/save 178\nstep6/twiddles 168\nstep7/load 198\nstep7/outer 197\nstep8/load 221\nstep8/outer 220\nstep8/store 228\nstep9/load 248\nstep9/outer 247\n"
	.size	.L.str.500, 488

	.type	.L.str.456,@object      # @.str.456
.L.str.456:
	.asciz	"main"
	.size	.L.str.456, 5

	.type	.L.str.457,@object      # @.str.457
.L.str.457:
	.asciz	"a_x"
	.size	.L.str.457, 4

	.type	.L.str.458,@object      # @.str.458
.L.str.458:
	.asciz	"a_y"
	.size	.L.str.458, 4

	.type	.L.str.459,@object      # @.str.459
.L.str.459:
	.asciz	"1"
	.size	.L.str.459, 2

	.type	.L.str.460,@object      # @.str.460
.L.str.460:
	.asciz	"0:0-5"
	.size	.L.str.460, 6

	.type	.L.str.461,@object      # @.str.461
.L.str.461:
	.asciz	"3:1"
	.size	.L.str.461, 4

	.type	.L.str.462,@object      # @.str.462
.L.str.462:
	.asciz	"indvars.iv31"
	.size	.L.str.462, 13

	.type	.L.str.463,@object      # @.str.463
	.p2align	4
.L.str.463:
	.asciz	"indvars.iv.next32"
	.size	.L.str.463, 18

	.type	.L.str.464,@object      # @.str.464
.L.str.464:
	.asciz	"3:1-1"
	.size	.L.str.464, 6

	.type	.L.str.465,@object      # @.str.465
.L.str.465:
	.asciz	"arrayidx2"
	.size	.L.str.465, 10

	.type	.L.str.466,@object      # @.str.466
.L.str.466:
	.asciz	"3:1-2"
	.size	.L.str.466, 6

	.type	.L.str.467,@object      # @.str.467
.L.str.467:
	.asciz	"i"
	.size	.L.str.467, 2

	.type	.L.str.468,@object      # @.str.468
.L.str.468:
	.asciz	"exitcond33"
	.size	.L.str.468, 11

	.type	.L.str.469,@object      # @.str.469
.L.str.469:
	.asciz	"3:1-3"
	.size	.L.str.469, 6

	.type	.L.str.470,@object      # @.str.470
.L.str.470:
	.asciz	"5:0"
	.size	.L.str.470, 4

	.type	.L.str.471,@object      # @.str.471
.L.str.471:
	.asciz	"5:0-2"
	.size	.L.str.471, 6

	.type	.L.str.472,@object      # @.str.472
	.p2align	4
.L.str.472:
	.asciz	"llvm.memcpy.p0i8.p0i8.i64"
	.size	.L.str.472, 26

	.type	.Lmain.sin_64,@object   # @main.sin_64
	.p2align	4
.Lmain.sin_64:
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	3200511751              # float -0.382683009
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3184049443              # float -0.0980169996
	.long	3203488499              # float -0.471397012
	.long	3197411388              # float -0.290284991
	.long	3206702996              # float -0.634392977
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3192374700              # float -0.195089996
	.long	3210009400              # float -0.831470012
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	3211559782              # float -0.923879981
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	3197411388              # float -0.290284991
	.long	3212756082              # float -0.995185017
	.long	3209028604              # float -0.773010015
	.long	3210855827              # float -0.881920993
	.long	3212836864              # float -1
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	3203488499              # float -0.471397012
	.long	3206702996              # float -0.634392977
	.long	3212756082              # float -0.995185017
	.long	1049927740              # float 0.290284991
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	3205380566              # float -0.555570006
	.long	3192374700              # float -0.195089996
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3200511751              # float -0.382683009
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3206702996              # float -0.634392977
	.long	1049927740              # float 0.290284991
	.long	3210855827              # float -0.881920993
	.long	1065272434              # float 0.995185017
	.long	2147483648              # float -0
	.long	3212836864              # float -1
	.long	1065353216              # float 1
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3209028604              # float -0.773010015
	.long	1064630789              # float 0.956939995
	.long	3203488499              # float -0.471397012
	.long	1036565795              # float 0.0980169996
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	3210009400              # float -0.831470012
	.long	1065030842              # float 0.980785012
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	1064076134              # float 0.923879981
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	3210855827              # float -0.881920993
	.long	1061544956              # float 0.773010015
	.long	1036565795              # float 0.0980169996
	.long	3212114437              # float -0.956939995
	.long	1065353216              # float 1
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	1064076134              # float 0.923879981
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	3212114437              # float -0.956939995
	.long	3184049443              # float -0.0980169996
	.long	1059219348              # float 0.634392977
	.long	3203488499              # float -0.471397012
	.long	1060439287              # float 0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3212514490              # float -0.980785012
	.long	3205380566              # float -0.555570006
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	1053028103              # float 0.382683009
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3212756082              # float -0.995185017
	.long	3210855827              # float -0.881920993
	.long	1064630789              # float 0.956939995
	.long	1061544956              # float 0.773010015
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	3200511751              # float -0.382683009
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	3212756082              # float -0.995185017
	.long	3210855827              # float -0.881920993
	.long	1064630789              # float 0.956939995
	.long	1061544956              # float 0.773010015
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	3212514490              # float -0.980785012
	.long	3205380566              # float -0.555570006
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	3211559782              # float -0.923879981
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	3212114437              # float -0.956939995
	.long	3184049443              # float -0.0980169996
	.long	1059219348              # float 0.634392977
	.long	3203488499              # float -0.471397012
	.long	3212836864              # float -1
	.long	1060439287              # float 0.707107007
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	3211559782              # float -0.923879981
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	3210855827              # float -0.881920993
	.long	1061544956              # float 0.773010015
	.long	1036565795              # float 0.0980169996
	.long	3212114437              # float -0.956939995
	.long	3207922935              # float -0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	3210009400              # float -0.831470012
	.long	1065030842              # float 0.980785012
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3200511751              # float -0.382683009
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	3209028604              # float -0.773010015
	.long	1064630789              # float 0.956939995
	.long	3203488499              # float -0.471397012
	.long	1036565795              # float 0.0980169996
	.long	2147483648              # float -0
	.long	1065353216              # float 1
	.long	3212836864              # float -1
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	3206702996              # float -0.634392977
	.long	1049927740              # float 0.290284991
	.long	3210855827              # float -0.881920993
	.long	1065272434              # float 0.995185017
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	3205380566              # float -0.555570006
	.long	3192374700              # float -0.195089996
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	1064076134              # float 0.923879981
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	3203488499              # float -0.471397012
	.long	3206702996              # float -0.634392977
	.long	3212756082              # float -0.995185017
	.long	1049927740              # float 0.290284991
	.long	1065353216              # float 1
	.long	1060439287              # float 0.707107007
	.long	1060439287              # float 0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	3197411388              # float -0.290284991
	.long	3212756082              # float -0.995185017
	.long	3209028604              # float -0.773010015
	.long	3210855827              # float -0.881920993
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	3192374700              # float -0.195089996
	.long	3210009400              # float -0.831470012
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	1053028103              # float 0.382683009
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	3184049443              # float -0.0980169996
	.long	3203488499              # float -0.471397012
	.long	3197411388              # float -0.290284991
	.long	3206702996              # float -0.634392977
	.long	0                       # float 0
	.long	0                       # float 0
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	3200511751              # float -0.382683009
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	1036565795              # float 0.0980169996
	.long	1056004851              # float 0.471397012
	.long	1049927740              # float 0.290284991
	.long	1059219348              # float 0.634392977
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	1044891052              # float 0.195089996
	.long	1062525752              # float 0.831470012
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	3211559782              # float -0.923879981
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	1049927740              # float 0.290284991
	.long	1065272434              # float 0.995185017
	.long	1061544956              # float 0.773010015
	.long	1063372179              # float 0.881920993
	.long	3212836864              # float -1
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	1056004851              # float 0.471397012
	.long	1059219348              # float 0.634392977
	.long	1065272434              # float 0.995185017
	.long	3197411388              # float -0.290284991
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	1057896918              # float 0.555570006
	.long	1044891052              # float 0.195089996
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	3200511751              # float -0.382683009
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	1059219348              # float 0.634392977
	.long	3197411388              # float -0.290284991
	.long	1063372179              # float 0.881920993
	.long	3212756082              # float -0.995185017
	.long	2147483648              # float -0
	.long	3212836864              # float -1
	.long	1065353216              # float 1
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	1061544956              # float 0.773010015
	.long	3212114437              # float -0.956939995
	.long	1056004851              # float 0.471397012
	.long	3184049443              # float -0.0980169996
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	1062525752              # float 0.831470012
	.long	3212514490              # float -0.980785012
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	1064076134              # float 0.923879981
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	1063372179              # float 0.881920993
	.long	3209028604              # float -0.773010015
	.long	3184049443              # float -0.0980169996
	.long	1064630789              # float 0.956939995
	.long	1065353216              # float 1
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	1064076134              # float 0.923879981
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	1064630789              # float 0.956939995
	.long	1036565795              # float 0.0980169996
	.long	3206702996              # float -0.634392977
	.long	1056004851              # float 0.471397012
	.long	1060439287              # float 0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	1065030842              # float 0.980785012
	.long	1057896918              # float 0.555570006
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	1053028103              # float 0.382683009
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	1065272434              # float 0.995185017
	.long	1063372179              # float 0.881920993
	.long	3212114437              # float -0.956939995
	.long	3209028604              # float -0.773010015
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	3200511751              # float -0.382683009
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	1065272434              # float 0.995185017
	.long	1063372179              # float 0.881920993
	.long	3212114437              # float -0.956939995
	.long	3209028604              # float -0.773010015
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	1065030842              # float 0.980785012
	.long	1057896918              # float 0.555570006
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	3211559782              # float -0.923879981
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	1064630789              # float 0.956939995
	.long	1036565795              # float 0.0980169996
	.long	3206702996              # float -0.634392977
	.long	1056004851              # float 0.471397012
	.long	3212836864              # float -1
	.long	1060439287              # float 0.707107007
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	3211559782              # float -0.923879981
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	1063372179              # float 0.881920993
	.long	3209028604              # float -0.773010015
	.long	3184049443              # float -0.0980169996
	.long	1064630789              # float 0.956939995
	.long	3207922935              # float -0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	1062525752              # float 0.831470012
	.long	3212514490              # float -0.980785012
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	3200511751              # float -0.382683009
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	1061544956              # float 0.773010015
	.long	3212114437              # float -0.956939995
	.long	1056004851              # float 0.471397012
	.long	3184049443              # float -0.0980169996
	.long	2147483648              # float -0
	.long	1065353216              # float 1
	.long	3212836864              # float -1
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	1059219348              # float 0.634392977
	.long	3197411388              # float -0.290284991
	.long	1063372179              # float 0.881920993
	.long	3212756082              # float -0.995185017
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	1057896918              # float 0.555570006
	.long	1044891052              # float 0.195089996
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	1064076134              # float 0.923879981
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	1056004851              # float 0.471397012
	.long	1059219348              # float 0.634392977
	.long	1065272434              # float 0.995185017
	.long	3197411388              # float -0.290284991
	.long	1065353216              # float 1
	.long	1060439287              # float 0.707107007
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	1049927740              # float 0.290284991
	.long	1065272434              # float 0.995185017
	.long	1061544956              # float 0.773010015
	.long	1063372179              # float 0.881920993
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	1044891052              # float 0.195089996
	.long	1062525752              # float 0.831470012
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	1053028103              # float 0.382683009
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	1036565795              # float 0.0980169996
	.long	1056004851              # float 0.471397012
	.long	1049927740              # float 0.290284991
	.long	1059219348              # float 0.634392977
	.size	.Lmain.sin_64, 1792

	.type	.L.str.473,@object      # @.str.473
.L.str.473:
	.asciz	"5:0-5"
	.size	.L.str.473, 6

	.type	.Lmain.sin_512,@object  # @main.sin_512
	.p2align	4
.Lmain.sin_512:
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	3175676807              # float -0.0490680002
	.long	3167291957              # float -0.0245409999
	.long	3180767551              # float -0.0735649988
	.long	3158904960              # float -0.0122720003
	.long	3178965947              # float -0.0613210015
	.long	3172385520              # float -0.0368070006
	.long	3182409302              # float -0.085796997
	.long	3184049443              # float -0.0980169996
	.long	3175676807              # float -0.0490680002
	.long	3189129316              # float -0.146730006
	.long	3167291957              # float -0.0245409999
	.long	3187323550              # float -0.122410998
	.long	3180767551              # float -0.0735649988
	.long	3190755498              # float -0.170962006
	.long	3189129316              # float -0.146730006
	.long	3180767551              # float -0.0735649988
	.long	3193986051              # float -0.219100997
	.long	3172385520              # float -0.0368070006
	.long	3191566038              # float -0.183039993
	.long	3185687570              # float -0.110221997
	.long	3196222924              # float -0.254866004
	.long	3192374700              # float -0.195089996
	.long	3184049443              # float -0.0980169996
	.long	3197411388              # float -0.290284991
	.long	3175676807              # float -0.0490680002
	.long	3195588544              # float -0.242980003
	.long	3189129316              # float -0.146730006
	.long	3198975193              # float -0.336890012
	.long	3195588544              # float -0.242980003
	.long	3187323550              # float -0.122410998
	.long	3199747112              # float -0.359894991
	.long	3178965947              # float -0.0613210015
	.long	3197804680              # float -0.302006006
	.long	3191566038              # float -0.183039993
	.long	3201644112              # float -0.416429996
	.long	3197411388              # float -0.290284991
	.long	3189129316              # float -0.146730006
	.long	3202017405              # float -0.427554995
	.long	3180767551              # float -0.0735649988
	.long	3199747112              # float -0.359894991
	.long	3193986051              # float -0.219100997
	.long	3204209952              # float -0.492897987
	.long	3198975193              # float -0.336890012
	.long	3190755498              # float -0.170962006
	.long	3204209952              # float -0.492897987
	.long	3182409302              # float -0.085796997
	.long	3201644112              # float -0.416429996
	.long	3196222924              # float -0.254866004
	.long	3205551056              # float -0.565732002
	.long	3200511751              # float -0.382683009
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3184049443              # float -0.0980169996
	.long	3203488499              # float -0.471397012
	.long	3197411388              # float -0.290284991
	.long	3206702996              # float -0.634392977
	.long	3202017405              # float -0.427554995
	.long	3193986051              # float -0.219100997
	.long	3206381528              # float -0.61523199
	.long	3185687570              # float -0.110221997
	.long	3204860808              # float -0.524590015
	.long	3198586632              # float -0.325309992
	.long	3207776453              # float -0.698375999
	.long	3203488499              # float -0.471397012
	.long	3195588544              # float -0.242980003
	.long	3207326538              # float -0.671558976
	.long	3187323550              # float -0.122410998
	.long	3205720103              # float -0.575807989
	.long	3199747112              # float -0.359894991
	.long	3208763507              # float -0.757209002
	.long	3204684865              # float -0.514102995
	.long	3196620443              # float -0.266712993
	.long	3208210496              # float -0.724246978
	.long	3188314010              # float -0.134581
	.long	3206543042              # float -0.624858975
	.long	3200891218              # float -0.393992007
	.long	3209656860              # float -0.810456991
	.long	3205380566              # float -0.555570006
	.long	3197411388              # float -0.290284991
	.long	3209028604              # float -0.773010015
	.long	3189129316              # float -0.146730006
	.long	3207326538              # float -0.671558976
	.long	3202017405              # float -0.427554995
	.long	3210449953              # float -0.857729017
	.long	3206053819              # float -0.595699012
	.long	3198196461              # float -0.31368199
	.long	3209776448              # float -0.817584991
	.long	3189943212              # float -0.158858001
	.long	3208067622              # float -0.715731025
	.long	3203124165              # float -0.460539013
	.long	3211136896              # float -0.898674011
	.long	3206702996              # float -0.634392977
	.long	3198975193              # float -0.336890012
	.long	3210449953              # float -0.857729017
	.long	3190755498              # float -0.170962006
	.long	3208763507              # float -0.757209002
	.long	3204209952              # float -0.492897987
	.long	3211712673              # float -0.932992994
	.long	3207326538              # float -0.671558976
	.long	3199747112              # float -0.359894991
	.long	3211045460              # float -0.893224001
	.long	3191566038              # float -0.183039993
	.long	3209411577              # float -0.795836985
	.long	3204860808              # float -0.524590015
	.long	3212173006              # float -0.960430979
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3192374700              # float -0.195089996
	.long	3210009400              # float -0.831470012
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	3208490743              # float -0.740951001
	.long	3201268672              # float -0.405241013
	.long	3211990084              # float -0.949527978
	.long	3193181416              # float -0.207111001
	.long	3210554710              # float -0.863973021
	.long	3205887708              # float -0.585798025
	.long	3212734640              # float -0.993906974
	.long	3209028604              # float -0.773010015
	.long	3202017405              # float -0.427554995
	.long	3212334068              # float -0.970031023
	.long	3193986051              # float -0.219100997
	.long	3211045460              # float -0.893224001
	.long	3206381528              # float -0.61523199
	.long	3212831814              # float -0.999698996
	.long	3209535242              # float -0.803207993
	.long	3202757482              # float -0.449611008
	.long	3212589870              # float -0.98527801
	.long	3194788472              # float -0.231058002
	.long	3211479822              # float -0.919113993
	.long	3206861357              # float -0.643832027
	.long	3212805289              # float -0.998117983
	.long	3210009400              # float -0.831470012
	.long	3203488499              # float -0.471397012
	.long	3212756082              # float -0.995185017
	.long	3195588544              # float -0.242980003
	.long	3211856135              # float -0.941543996
	.long	3207326538              # float -0.671558976
	.long	3212655284              # float -0.989176988
	.long	3210449953              # float -0.857729017
	.long	3204209952              # float -0.492897987
	.long	3212831814              # float -0.999698996
	.long	3196222924              # float -0.254866004
	.long	3212173006              # float -0.960430979
	.long	3207776453              # float -0.698375999
	.long	3212382873              # float -0.972940027
	.long	3210855827              # float -0.881920993
	.long	3204684865              # float -0.514102995
	.long	3212816647              # float -0.998794972
	.long	3196620443              # float -0.266712993
	.long	3212429211              # float -0.975701987
	.long	3208210496              # float -0.724246978
	.long	3211990084              # float -0.949527978
	.long	3211226067              # float -0.903989017
	.long	3205035425              # float -0.534998
	.long	3212710699              # float -0.992479979
	.long	3197016620              # float -0.278519988
	.long	3212623810              # float -0.987300992
	.long	3208628064              # float -0.749135971
	.long	3211479822              # float -0.919113993
	.long	3211559782              # float -0.923879981
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	3197411388              # float -0.290284991
	.long	3212756082              # float -0.995185017
	.long	3209028604              # float -0.773010015
	.long	3210855827              # float -0.881920993
	.long	3211856135              # float -0.941543996
	.long	3205720103              # float -0.575807989
	.long	3212229126              # float -0.963775992
	.long	3197804680              # float -0.302006006
	.long	3212825489              # float -0.999321997
	.long	3209411577              # float -0.795836985
	.long	3210122730              # float -0.838225007
	.long	3212114437              # float -0.956939995
	.long	3206053819              # float -0.595699012
	.long	3211856135              # float -0.941543996
	.long	3198196461              # float -0.31368199
	.long	3212831814              # float -0.999698996
	.long	3209776448              # float -0.817584991
	.long	3209285899              # float -0.788345992
	.long	3212334068              # float -0.970031023
	.long	3206381528              # float -0.61523199
	.long	3211397547              # float -0.914210021
	.long	3198586632              # float -0.325309992
	.long	3212775006              # float -0.996312975
	.long	3210122730              # float -0.838225007
	.long	3208351542              # float -0.732653975
	.long	3212514490              # float -0.980785012
	.long	3206702996              # float -0.634392977
	.long	3210855827              # float -0.881920993
	.long	3198975193              # float -0.336890012
	.long	3212655284              # float -0.989176988
	.long	3210449953              # float -0.857729017
	.long	3207326538              # float -0.671558976
	.long	3212655284              # float -0.989176988
	.long	3207018073              # float -0.653173029
	.long	3210233946              # float -0.844853997
	.long	3199362042              # float -0.348419011
	.long	3212473084              # float -0.978317022
	.long	3210757664              # float -0.876070023
	.long	3206218437              # float -0.605511009
	.long	3212756082              # float -0.995185017
	.long	3207326538              # float -0.671558976
	.long	3209535242              # float -0.803207993
	.long	3199747112              # float -0.359894991
	.long	3212229126              # float -0.963775992
	.long	3211045460              # float -0.893224001
	.long	3205035425              # float -0.534998
	.long	3212816647              # float -0.998794972
	.long	3207628226              # float -0.689540982
	.long	3208763507              # float -0.757209002
	.long	3200130371              # float -0.371316999
	.long	3211924301              # float -0.945607006
	.long	3211312956              # float -0.909168005
	.long	3203124165              # float -0.460539013
	.long	3212836864              # float -1
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	3212816647              # float -0.998794972
	.long	3208210496              # float -0.724246978
	.long	3207018073              # float -0.653173029
	.long	3200891218              # float -0.393992007
	.long	3211136896              # float -0.898674011
	.long	3211785587              # float -0.937339007
	.long	3197804680              # float -0.302006006
	.long	3212756082              # float -0.995185017
	.long	3208490743              # float -0.740951001
	.long	3206053819              # float -0.595699012
	.long	3201268672              # float -0.405241013
	.long	3210657286              # float -0.870087027
	.long	3211990084              # float -0.949527978
	.long	3193986051              # float -0.219100997
	.long	3212655284              # float -0.989176988
	.long	3208763507              # float -0.757209002
	.long	3205035425              # float -0.534998
	.long	3201644112              # float -0.416429996
	.long	3210122730              # float -0.838225007
	.long	3212173006              # float -0.960430979
	.long	3188314010              # float -0.134581
	.long	3212514490              # float -0.980785012
	.long	3209028604              # float -0.773010015
	.long	3203488499              # float -0.471397012
	.long	3202017405              # float -0.427554995
	.long	3209535242              # float -0.803207993
	.long	3212334068              # float -0.970031023
	.long	3175676807              # float -0.0490680002
	.long	3212334068              # float -0.970031023
	.long	3209285899              # float -0.788345992
	.long	3201268672              # float -0.405241013
	.long	3202388551              # float -0.438616008
	.long	3208897020              # float -0.765166998
	.long	3212473084              # float -0.978317022
	.long	1024901872              # float 0.0368070006
	.long	3212114437              # float -0.956939995
	.long	3209535242              # float -0.803207993
	.long	3198975193              # float -0.336890012
	.long	3202757482              # float -0.449611008
	.long	3208210496              # float -0.724246978
	.long	3212589870              # float -0.98527801
	.long	1039839902              # float 0.122410998
	.long	3211856135              # float -0.941543996
	.long	3209776448              # float -0.817584991
	.long	3196620443              # float -0.266712993
	.long	3203124165              # float -0.460539013
	.long	3207478238              # float -0.680601001
	.long	3212684242              # float -0.990903019
	.long	1045697768              # float 0.207111001
	.long	3211559782              # float -0.923879981
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	3203488499              # float -0.471397012
	.long	3206702996              # float -0.634392977
	.long	3212756082              # float -0.995185017
	.long	1049927740              # float 0.290284991
	.long	3211226067              # float -0.903989017
	.long	3210233946              # float -0.844853997
	.long	3187323550              # float -0.122410998
	.long	3203850450              # float -0.482183993
	.long	3205887708              # float -0.585798025
	.long	3212805289              # float -0.998117983
	.long	1052646723              # float 0.371316999
	.long	3210855827              # float -0.881920993
	.long	3210449953              # float -0.857729017
	.long	3175676807              # float -0.0490680002
	.long	3204209952              # float -0.492897987
	.long	3205035425              # float -0.534998
	.long	3212831814              # float -0.999698996
	.long	1055273834              # float 0.449611008
	.long	3210449953              # float -0.857729017
	.long	3210657286              # float -0.870087027
	.long	1019808309              # float 0.0245409999
	.long	3204507614              # float -0.503538013
	.long	3203850450              # float -0.482183993
	.long	3212835606              # float -0.999925017
	.long	1057377160              # float 0.524590015
	.long	3210009400              # float -0.831470012
	.long	3210855827              # float -0.881920993
	.long	1036565795              # float 0.0980169996
	.long	3204684865              # float -0.514102995
	.long	3202017405              # float -0.427554995
	.long	3212816647              # float -0.998794972
	.long	1058570171              # float 0.595699012
	.long	3209535242              # float -0.803207993
	.long	3211045460              # float -0.893224001
	.long	1043271850              # float 0.170962006
	.long	3204860808              # float -0.524590015
	.long	3200130371              # float -0.371316999
	.long	3212775006              # float -0.996312975
	.long	1059689496              # float 0.662415981
	.long	3209028604              # float -0.773010015
	.long	3211226067              # float -0.903989017
	.long	1048104896              # float 0.242980003
	.long	3205035425              # float -0.534998
	.long	3198196461              # float -0.31368199
	.long	3212710699              # float -0.992479979
	.long	1060726848              # float 0.724246978
	.long	3208490743              # float -0.740951001
	.long	3211397547              # float -0.914210021
	.long	1050712813              # float 0.31368199
	.long	3205208683              # float -0.545324981
	.long	3196222924              # float -0.254866004
	.long	3212623810              # float -0.987300992
	.long	1061674593              # float 0.780736982
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	3205380566              # float -0.555570006
	.long	3192374700              # float -0.195089996
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3207326538              # float -0.671558976
	.long	3211712673              # float -0.932992994
	.long	1055273834              # float 0.449611008
	.long	3205551056              # float -0.565732002
	.long	3188314010              # float -0.134581
	.long	3212382873              # float -0.972940027
	.long	1063274016              # float 0.876070023
	.long	3206702996              # float -0.634392977
	.long	3211856135              # float -0.941543996
	.long	1057201217              # float 0.514102995
	.long	3205720103              # float -0.575807989
	.long	3180767551              # float -0.0735649988
	.long	3212229126              # float -0.963775992
	.long	1063913899              # float 0.914210021
	.long	3206053819              # float -0.595699012
	.long	3211990084              # float -0.949527978
	.long	1058236455              # float 0.575807989
	.long	3205887708              # float -0.585798025
	.long	3158904960              # float -0.0122720003
	.long	3212053469              # float -0.953306019
	.long	1064440653              # float 0.945607006
	.long	3205380566              # float -0.555570006
	.long	3212114437              # float -0.956939995
	.long	1059219348              # float 0.634392977
	.long	3206053819              # float -0.595699012
	.long	1028193159              # float 0.0490680002
	.long	3211856135              # float -0.941543996
	.long	1064850420              # float 0.970031023
	.long	3204684865              # float -0.514102995
	.long	3212229126              # float -0.963775992
	.long	1060144578              # float 0.689540982
	.long	3206218437              # float -0.605511009
	.long	1038203922              # float 0.110221997
	.long	3211637394              # float -0.928506016
	.long	1065140162              # float 0.987300992
	.long	3203488499              # float -0.471397012
	.long	3212334068              # float -0.970031023
	.long	1061007095              # float 0.740951001
	.long	3206381528              # float -0.61523199
	.long	1043271850              # float 0.170962006
	.long	3211397547              # float -0.914210021
	.long	1065307750              # float 0.997290015
	.long	3202017405              # float -0.427554995
	.long	3212429211              # float -0.975701987
	.long	1061802251              # float 0.788345992
	.long	3206543042              # float -0.624858975
	.long	1047304824              # float 0.231058002
	.long	3211136896              # float -0.898674011
	.long	1065351958              # float 0.999925017
	.long	3200511751              # float -0.382683009
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3206702996              # float -0.634392977
	.long	1049927740              # float 0.290284991
	.long	3210855827              # float -0.881920993
	.long	1065272434              # float 0.995185017
	.long	3198975193              # float -0.336890012
	.long	3212589870              # float -0.98527801
	.long	1063173638              # float 0.870087027
	.long	3206861357              # float -0.643832027
	.long	1051878394              # float 0.348419011
	.long	3210554710              # float -0.863973021
	.long	1065069765              # float 0.983105003
	.long	3197411388              # float -0.290284991
	.long	3212655284              # float -0.989176988
	.long	1063742419              # float 0.903989017
	.long	3207018073              # float -0.653173029
	.long	1053785024              # float 0.405241013
	.long	3210233946              # float -0.844853997
	.long	1064745478              # float 0.963775992
	.long	3195588544              # float -0.242980003
	.long	3212710699              # float -0.992479979
	.long	1064229025              # float 0.932992994
	.long	3207173144              # float -0.662415981
	.long	1055640517              # float 0.460539013
	.long	3209893956              # float -0.824589014
	.long	1064301939              # float 0.937339007
	.long	3192374700              # float -0.195089996
	.long	3212756082              # float -0.995185017
	.long	1064630789              # float 0.956939995
	.long	3207326538              # float -0.671558976
	.long	1057201217              # float 0.514102995
	.long	3209535242              # float -0.803207993
	.long	1063742419              # float 0.903989017
	.long	3189129316              # float -0.146730006
	.long	3212791398              # float -0.997290015
	.long	1064945563              # float 0.975701987
	.long	3207478238              # float -0.680601001
	.long	1058067408              # float 0.565732002
	.long	3209158241              # float -0.780736982
	.long	1063071062              # float 0.863973021
	.long	3184049443              # float -0.0980169996
	.long	3212816647              # float -0.998794972
	.long	1065171636              # float 0.989176988
	.long	3207628226              # float -0.689540982
	.long	1058897880              # float 0.61523199
	.long	3208763507              # float -0.757209002
	.long	1062292800              # float 0.817584991
	.long	3175676807              # float -0.0490680002
	.long	3212831814              # float -0.999698996
	.long	1065307750              # float 0.997290015
	.long	3207776453              # float -0.698375999
	.long	1059689496              # float 0.662415981
	.long	3208351542              # float -0.732653975
	.long	1061413372              # float 0.765166998
	.size	.Lmain.sin_512, 1792

	.type	.L.str.474,@object      # @.str.474
.L.str.474:
	.asciz	"5:0-8"
	.size	.L.str.474, 6

	.type	.Lmain.cos_64,@object   # @main.cos_64
	.p2align	4
.Lmain.cos_64:
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1064076134              # float 0.923879981
	.long	1065030842              # float 0.980785012
	.long	1062525752              # float 0.831470012
	.long	1065272434              # float 0.995185017
	.long	1063372179              # float 0.881920993
	.long	1064630789              # float 0.956939995
	.long	1061544956              # float 0.773010015
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	1065030842              # float 0.980785012
	.long	1057896918              # float 0.555570006
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	1053028103              # float 0.382683009
	.long	1062525752              # float 0.831470012
	.long	3192374700              # float -0.195089996
	.long	1064630789              # float 0.956939995
	.long	1036565795              # float 0.0980169996
	.long	1059219348              # float 0.634392977
	.long	3203488499              # float -0.471397012
	.long	0                       # float 0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	1057896918              # float 0.555570006
	.long	3212514490              # float -0.980785012
	.long	1063372179              # float 0.881920993
	.long	3209028604              # float -0.773010015
	.long	1036565795              # float 0.0980169996
	.long	3212114437              # float -0.956939995
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	1062525752              # float 0.831470012
	.long	3212514490              # float -0.980785012
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3211559782              # float -0.923879981
	.long	1044891052              # float 0.195089996
	.long	3205380566              # float -0.555570006
	.long	1061544956              # float 0.773010015
	.long	3212114437              # float -0.956939995
	.long	3203488499              # float -0.471397012
	.long	1036565795              # float 0.0980169996
	.long	3212836864              # float -1
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	3192374700              # float -0.195089996
	.long	1057896918              # float 0.555570006
	.long	1059219348              # float 0.634392977
	.long	3197411388              # float -0.290284991
	.long	3210855827              # float -0.881920993
	.long	1065272434              # float 0.995185017
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	1057896918              # float 0.555570006
	.long	1044891052              # float 0.195089996
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3200511751              # float -0.382683009
	.long	3205380566              # float -0.555570006
	.long	1065030842              # float 0.980785012
	.long	1056004851              # float 0.471397012
	.long	1059219348              # float 0.634392977
	.long	3212756082              # float -0.995185017
	.long	1049927740              # float 0.290284991
	.long	2147483648              # float -0
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	1053028103              # float 0.382683009
	.long	3210009400              # float -0.831470012
	.long	1044891052              # float 0.195089996
	.long	1049927740              # float 0.290284991
	.long	1065272434              # float 0.995185017
	.long	3209028604              # float -0.773010015
	.long	3210855827              # float -0.881920993
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	1044891052              # float 0.195089996
	.long	1062525752              # float 0.831470012
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	1064076134              # float 0.923879981
	.long	3212514490              # float -0.980785012
	.long	3210009400              # float -0.831470012
	.long	1036565795              # float 0.0980169996
	.long	1056004851              # float 0.471397012
	.long	3197411388              # float -0.290284991
	.long	3206702996              # float -0.634392977
	.long	1065353216              # float 1
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	0                       # float 0
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	1064076134              # float 0.923879981
	.long	3212514490              # float -0.980785012
	.long	3210009400              # float -0.831470012
	.long	3184049443              # float -0.0980169996
	.long	3203488499              # float -0.471397012
	.long	1049927740              # float 0.290284991
	.long	1059219348              # float 0.634392977
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	3192374700              # float -0.195089996
	.long	3210009400              # float -0.831470012
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	1053028103              # float 0.382683009
	.long	3210009400              # float -0.831470012
	.long	1044891052              # float 0.195089996
	.long	3197411388              # float -0.290284991
	.long	3212756082              # float -0.995185017
	.long	1061544956              # float 0.773010015
	.long	1063372179              # float 0.881920993
	.long	0                       # float 0
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	3200511751              # float -0.382683009
	.long	3205380566              # float -0.555570006
	.long	1065030842              # float 0.980785012
	.long	3203488499              # float -0.471397012
	.long	3206702996              # float -0.634392977
	.long	1065272434              # float 0.995185017
	.long	3197411388              # float -0.290284991
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	3205380566              # float -0.555570006
	.long	3192374700              # float -0.195089996
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	3211559782              # float -0.923879981
	.long	3192374700              # float -0.195089996
	.long	1057896918              # float 0.555570006
	.long	3206702996              # float -0.634392977
	.long	1049927740              # float 0.290284991
	.long	1063372179              # float 0.881920993
	.long	3212756082              # float -0.995185017
	.long	3212836864              # float -1
	.long	2147483648              # float -0
	.long	0                       # float 0
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1044891052              # float 0.195089996
	.long	3205380566              # float -0.555570006
	.long	3209028604              # float -0.773010015
	.long	1064630789              # float 0.956939995
	.long	1056004851              # float 0.471397012
	.long	3184049443              # float -0.0980169996
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	3210009400              # float -0.831470012
	.long	1065030842              # float 0.980785012
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	3200511751              # float -0.382683009
	.long	1057896918              # float 0.555570006
	.long	3212514490              # float -0.980785012
	.long	3210855827              # float -0.881920993
	.long	1061544956              # float 0.773010015
	.long	3184049443              # float -0.0980169996
	.long	1064630789              # float 0.956939995
	.long	2147483648              # float -0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	1062525752              # float 0.831470012
	.long	3192374700              # float -0.195089996
	.long	3212114437              # float -0.956939995
	.long	3184049443              # float -0.0980169996
	.long	3206702996              # float -0.634392977
	.long	1056004851              # float 0.471397012
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	3212514490              # float -0.980785012
	.long	3205380566              # float -0.555570006
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	1064076134              # float 0.923879981
	.long	1065030842              # float 0.980785012
	.long	1062525752              # float 0.831470012
	.long	3212756082              # float -0.995185017
	.long	3210855827              # float -0.881920993
	.long	3212114437              # float -0.956939995
	.long	3209028604              # float -0.773010015
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	1064076134              # float 0.923879981
	.long	1065030842              # float 0.980785012
	.long	1062525752              # float 0.831470012
	.long	3212756082              # float -0.995185017
	.long	3210855827              # float -0.881920993
	.long	3212114437              # float -0.956939995
	.long	3209028604              # float -0.773010015
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	3212514490              # float -0.980785012
	.long	3205380566              # float -0.555570006
	.long	3210009400              # float -0.831470012
	.long	3192374700              # float -0.195089996
	.long	1053028103              # float 0.382683009
	.long	1062525752              # float 0.831470012
	.long	3192374700              # float -0.195089996
	.long	3212114437              # float -0.956939995
	.long	3184049443              # float -0.0980169996
	.long	3206702996              # float -0.634392977
	.long	1056004851              # float 0.471397012
	.long	0                       # float 0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	1057896918              # float 0.555570006
	.long	3212514490              # float -0.980785012
	.long	3210855827              # float -0.881920993
	.long	1061544956              # float 0.773010015
	.long	3184049443              # float -0.0980169996
	.long	1064630789              # float 0.956939995
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	3210009400              # float -0.831470012
	.long	1065030842              # float 0.980785012
	.long	1044891052              # float 0.195089996
	.long	1057896918              # float 0.555570006
	.long	3211559782              # float -0.923879981
	.long	1044891052              # float 0.195089996
	.long	3205380566              # float -0.555570006
	.long	3209028604              # float -0.773010015
	.long	1064630789              # float 0.956939995
	.long	1056004851              # float 0.471397012
	.long	3184049443              # float -0.0980169996
	.long	3212836864              # float -1
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	3211559782              # float -0.923879981
	.long	3192374700              # float -0.195089996
	.long	1057896918              # float 0.555570006
	.long	3206702996              # float -0.634392977
	.long	1049927740              # float 0.290284991
	.long	1063372179              # float 0.881920993
	.long	3212756082              # float -0.995185017
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	3205380566              # float -0.555570006
	.long	3192374700              # float -0.195089996
	.long	1065030842              # float 0.980785012
	.long	3210009400              # float -0.831470012
	.long	3200511751              # float -0.382683009
	.long	3205380566              # float -0.555570006
	.long	1065030842              # float 0.980785012
	.long	3203488499              # float -0.471397012
	.long	3206702996              # float -0.634392977
	.long	1065272434              # float 0.995185017
	.long	3197411388              # float -0.290284991
	.long	2147483648              # float -0
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3200511751              # float -0.382683009
	.long	3211559782              # float -0.923879981
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	1053028103              # float 0.382683009
	.long	3210009400              # float -0.831470012
	.long	1044891052              # float 0.195089996
	.long	3197411388              # float -0.290284991
	.long	3212756082              # float -0.995185017
	.long	1061544956              # float 0.773010015
	.long	1063372179              # float 0.881920993
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	3192374700              # float -0.195089996
	.long	3210009400              # float -0.831470012
	.long	1057896918              # float 0.555570006
	.long	1065030842              # float 0.980785012
	.long	1064076134              # float 0.923879981
	.long	3212514490              # float -0.980785012
	.long	3210009400              # float -0.831470012
	.long	3184049443              # float -0.0980169996
	.long	3203488499              # float -0.471397012
	.long	1049927740              # float 0.290284991
	.long	1059219348              # float 0.634392977
	.long	1065353216              # float 1
	.long	3212836864              # float -1
	.long	3212836864              # float -1
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	0                       # float 0
	.long	2147483648              # float -0
	.long	1064076134              # float 0.923879981
	.long	3212514490              # float -0.980785012
	.long	3210009400              # float -0.831470012
	.long	1036565795              # float 0.0980169996
	.long	1056004851              # float 0.471397012
	.long	3197411388              # float -0.290284991
	.long	3206702996              # float -0.634392977
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	1044891052              # float 0.195089996
	.long	1062525752              # float 0.831470012
	.long	3205380566              # float -0.555570006
	.long	3212514490              # float -0.980785012
	.long	1053028103              # float 0.382683009
	.long	3210009400              # float -0.831470012
	.long	1044891052              # float 0.195089996
	.long	1049927740              # float 0.290284991
	.long	1065272434              # float 0.995185017
	.long	3209028604              # float -0.773010015
	.long	3210855827              # float -0.881920993
	.long	2147483648              # float -0
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	1053028103              # float 0.382683009
	.long	1064076134              # float 0.923879981
	.long	3211559782              # float -0.923879981
	.long	3200511751              # float -0.382683009
	.long	3200511751              # float -0.382683009
	.long	3205380566              # float -0.555570006
	.long	1065030842              # float 0.980785012
	.long	1056004851              # float 0.471397012
	.long	1059219348              # float 0.634392977
	.long	3212756082              # float -0.995185017
	.long	1049927740              # float 0.290284991
	.long	3207922935              # float -0.707107007
	.long	3200511751              # float -0.382683009
	.long	1064076134              # float 0.923879981
	.long	1057896918              # float 0.555570006
	.long	1044891052              # float 0.195089996
	.long	3212514490              # float -0.980785012
	.long	1062525752              # float 0.831470012
	.long	3211559782              # float -0.923879981
	.long	3192374700              # float -0.195089996
	.long	1057896918              # float 0.555570006
	.long	1059219348              # float 0.634392977
	.long	3197411388              # float -0.290284991
	.long	3210855827              # float -0.881920993
	.long	1065272434              # float 0.995185017
	.long	3212836864              # float -1
	.long	2147483648              # float -0
	.long	2147483648              # float -0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	3207922935              # float -0.707107007
	.long	1060439287              # float 0.707107007
	.long	3211559782              # float -0.923879981
	.long	1044891052              # float 0.195089996
	.long	3205380566              # float -0.555570006
	.long	1061544956              # float 0.773010015
	.long	3212114437              # float -0.956939995
	.long	3203488499              # float -0.471397012
	.long	1036565795              # float 0.0980169996
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	1062525752              # float 0.831470012
	.long	3212514490              # float -0.980785012
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3200511751              # float -0.382683009
	.long	1057896918              # float 0.555570006
	.long	3212514490              # float -0.980785012
	.long	1063372179              # float 0.881920993
	.long	3209028604              # float -0.773010015
	.long	1036565795              # float 0.0980169996
	.long	3212114437              # float -0.956939995
	.long	2147483648              # float -0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	1053028103              # float 0.382683009
	.long	1062525752              # float 0.831470012
	.long	3192374700              # float -0.195089996
	.long	1064630789              # float 0.956939995
	.long	1036565795              # float 0.0980169996
	.long	1059219348              # float 0.634392977
	.long	3203488499              # float -0.471397012
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	1065030842              # float 0.980785012
	.long	1057896918              # float 0.555570006
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	1064076134              # float 0.923879981
	.long	1065030842              # float 0.980785012
	.long	1062525752              # float 0.831470012
	.long	1065272434              # float 0.995185017
	.long	1063372179              # float 0.881920993
	.long	1064630789              # float 0.956939995
	.long	1061544956              # float 0.773010015
	.size	.Lmain.cos_64, 1792

	.type	.L.str.475,@object      # @.str.475
.L.str.475:
	.asciz	"5:0-11"
	.size	.L.str.475, 7

	.type	.Lmain.cos_512,@object  # @main.cos_512
	.p2align	4
.Lmain.cos_512:
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065353216              # float 1
	.long	1065332999              # float 0.998794972
	.long	1065348166              # float 0.999698996
	.long	1065307750              # float 0.997290015
	.long	1065351958              # float 0.999925017
	.long	1065321641              # float 0.998117983
	.long	1065341841              # float 0.999321997
	.long	1065291358              # float 0.996312975
	.long	1065272434              # float 0.995185017
	.long	1065332999              # float 0.998794972
	.long	1065171636              # float 0.989176988
	.long	1065348166              # float 0.999698996
	.long	1065227051              # float 0.992479979
	.long	1065307750              # float 0.997290015
	.long	1065106222              # float 0.98527801
	.long	1065171636              # float 0.989176988
	.long	1065307750              # float 0.997290015
	.long	1064945563              # float 0.975701987
	.long	1065341841              # float 0.999321997
	.long	1065069765              # float 0.983105003
	.long	1065250992              # float 0.993906974
	.long	1064799165              # float 0.966975986
	.long	1065030842              # float 0.980785012
	.long	1065272434              # float 0.995185017
	.long	1064630789              # float 0.956939995
	.long	1065332999              # float 0.998794972
	.long	1064850420              # float 0.970031023
	.long	1065171636              # float 0.989176988
	.long	1064372487              # float 0.941543996
	.long	1064850420              # float 0.970031023
	.long	1065227051              # float 0.992479979
	.long	1064229025              # float 0.932992994
	.long	1065321641              # float 0.998117983
	.long	1064569821              # float 0.953306019
	.long	1065069765              # float 0.983105003
	.long	1063829308              # float 0.909168005
	.long	1064630789              # float 0.956939995
	.long	1065171636              # float 0.989176988
	.long	1063742419              # float 0.903989017
	.long	1065307750              # float 0.997290015
	.long	1064229025              # float 0.932992994
	.long	1064945563              # float 0.975701987
	.long	1063173638              # float 0.870087027
	.long	1064372487              # float 0.941543996
	.long	1065106222              # float 0.98527801
	.long	1063173638              # float 0.870087027
	.long	1065291358              # float 0.996312975
	.long	1063829308              # float 0.909168005
	.long	1064799165              # float 0.966975986
	.long	1062410308              # float 0.824589014
	.long	1064076134              # float 0.923879981
	.long	1065030842              # float 0.980785012
	.long	1062525752              # float 0.831470012
	.long	1065272434              # float 0.995185017
	.long	1063372179              # float 0.881920993
	.long	1064630789              # float 0.956939995
	.long	1061544956              # float 0.773010015
	.long	1063742419              # float 0.903989017
	.long	1064945563              # float 0.975701987
	.long	1061802251              # float 0.788345992
	.long	1065250992              # float 0.993906974
	.long	1062859367              # float 0.851355016
	.long	1064440653              # float 0.945607006
	.long	1060583974              # float 0.715731025
	.long	1063372179              # float 0.881920993
	.long	1064850420              # float 0.970031023
	.long	1061007095              # float 0.740951001
	.long	1065227051              # float 0.992479979
	.long	1062292800              # float 0.817584991
	.long	1064229025              # float 0.932992994
	.long	1059534425              # float 0.653173029
	.long	1062966305              # float 0.857729017
	.long	1064745478              # float 0.963775992
	.long	1060144578              # float 0.689540982
	.long	1065200594              # float 0.990903019
	.long	1061674593              # float 0.780736982
	.long	1063996174              # float 0.919113993
	.long	1058404060              # float 0.585798025
	.long	1062525752              # float 0.831470012
	.long	1064630789              # float 0.956939995
	.long	1059219348              # float 0.634392977
	.long	1065171636              # float 0.989176988
	.long	1061007095              # float 0.740951001
	.long	1063742419              # float 0.903989017
	.long	1057201217              # float 0.514102995
	.long	1062051594              # float 0.803207993
	.long	1064506436              # float 0.949527978
	.long	1058236455              # float 0.575807989
	.long	1065140162              # float 0.987300992
	.long	1060292805              # float 0.698375999
	.long	1063468128              # float 0.887639999
	.long	1054904903              # float 0.438616008
	.long	1061544956              # float 0.773010015
	.long	1064372487              # float 0.941543996
	.long	1057201217              # float 0.514102995
	.long	1065106222              # float 0.98527801
	.long	1059534425              # float 0.653173029
	.long	1063173638              # float 0.870087027
	.long	1052263464              # float 0.359894991
	.long	1061007095              # float 0.740951001
	.long	1064229025              # float 0.932992994
	.long	1055273834              # float 0.449611008
	.long	1065069765              # float 0.983105003
	.long	1058734789              # float 0.605511009
	.long	1062859367              # float 0.851355016
	.long	1049532972              # float 0.278519988
	.long	1060439287              # float 0.707107007
	.long	1064076134              # float 0.923879981
	.long	1053028103              # float 0.382683009
	.long	1065030842              # float 0.980785012
	.long	1057896918              # float 0.555570006
	.long	1062525752              # float 0.831470012
	.long	1044891052              # float 0.195089996
	.long	1059842890              # float 0.671558976
	.long	1063913899              # float 0.914210021
	.long	1050712813              # float 0.31368199
	.long	1064989436              # float 0.978317022
	.long	1057023966              # float 0.503538013
	.long	1062173212              # float 0.810456991
	.long	1038203922              # float 0.110221997
	.long	1059219348              # float 0.634392977
	.long	1063742419              # float 0.903989017
	.long	1048104896              # float 0.242980003
	.long	1064945563              # float 0.975701987
	.long	1055273834              # float 0.449611008
	.long	1061802251              # float 0.788345992
	.long	1019808309              # float 0.0245409999
	.long	1058570171              # float 0.595699012
	.long	1063561812              # float 0.893224001
	.long	1043271850              # float 0.170962006
	.long	1064899225              # float 0.972940027
	.long	1053407570              # float 0.393992007
	.long	1061413372              # float 0.765166998
	.long	3178965947              # float -0.0613210015
	.long	1057896918              # float 0.555570006
	.long	1063372179              # float 0.881920993
	.long	1036565795              # float 0.0980169996
	.long	1064850420              # float 0.970031023
	.long	1051491545              # float 0.336890012
	.long	1061007095              # float 0.740951001
	.long	3189129316              # float -0.146730006
	.long	1057201217              # float 0.514102995
	.long	1063173638              # float 0.870087027
	.long	1019808309              # float 0.0245409999
	.long	1064799165              # float 0.966975986
	.long	1049532972              # float 0.278519988
	.long	1060583974              # float 0.715731025
	.long	3194788472              # float -0.231058002
	.long	1056004851              # float 0.471397012
	.long	1062966305              # float 0.857729017
	.long	3175676807              # float -0.0490680002
	.long	1064745478              # float 0.963775992
	.long	1046502403              # float 0.219100997
	.long	1060144578              # float 0.689540982
	.long	3198196461              # float -0.31368199
	.long	1054533757              # float 0.427554995
	.long	1062750298              # float 0.844853997
	.long	3187323550              # float -0.122410998
	.long	1064689358              # float 0.960430979
	.long	1042459564              # float 0.158858001
	.long	1059689496              # float 0.662415981
	.long	3200891218              # float -0.393992007
	.long	1053028103              # float 0.382683009
	.long	1062525752              # float 0.831470012
	.long	3192374700              # float -0.195089996
	.long	1064630789              # float 0.956939995
	.long	1036565795              # float 0.0980169996
	.long	1059219348              # float 0.634392977
	.long	3203488499              # float -0.471397012
	.long	1051491545              # float 0.336890012
	.long	1062292800              # float 0.817584991
	.long	3196620443              # float -0.266712993
	.long	1064569821              # float 0.953306019
	.long	1024901872              # float 0.0368070006
	.long	1058734789              # float 0.605511009
	.long	3205208683              # float -0.545324981
	.long	1049927740              # float 0.290284991
	.long	1062051594              # float 0.803207993
	.long	3198975193              # float -0.336890012
	.long	1064506436              # float 0.949527978
	.long	3167291957              # float -0.0245409999
	.long	1058236455              # float 0.575807989
	.long	3206381528              # float -0.61523199
	.long	1048104896              # float 0.242980003
	.long	1061802251              # float 0.788345992
	.long	3201268672              # float -0.405241013
	.long	1064440653              # float 0.945607006
	.long	3182409302              # float -0.085796997
	.long	1057725035              # float 0.545324981
	.long	3207478238              # float -0.680601001
	.long	1044891052              # float 0.195089996
	.long	1061544956              # float 0.773010015
	.long	3203488499              # float -0.471397012
	.long	1064372487              # float 0.941543996
	.long	3189129316              # float -0.146730006
	.long	1057201217              # float 0.514102995
	.long	3208490743              # float -0.740951001
	.long	1041645668              # float 0.146730006
	.long	1061279859              # float 0.757209002
	.long	3205035425              # float -0.534998
	.long	1064301939              # float 0.937339007
	.long	3193181416              # float -0.207111001
	.long	1056366802              # float 0.482183993
	.long	3209411577              # float -0.795836985
	.long	1036565795              # float 0.0980169996
	.long	1061007095              # float 0.740951001
	.long	3206053819              # float -0.595699012
	.long	1064229025              # float 0.932992994
	.long	3196620443              # float -0.266712993
	.long	1055273834              # float 0.449611008
	.long	3210233946              # float -0.844853997
	.long	1028193159              # float 0.0490680002
	.long	1060726848              # float 0.724246978
	.long	3207018073              # float -0.653173029
	.long	1064153746              # float 0.928506016
	.long	3198586632              # float -0.325309992
	.long	1054160464              # float 0.416429996
	.long	3210951776              # float -0.887639999
	.long	0                       # float 0
	.long	1060439287              # float 0.707107007
	.long	3207922935              # float -0.707107007
	.long	1064076134              # float 0.923879981
	.long	3200511751              # float -0.382683009
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	3175676807              # float -0.0490680002
	.long	1060144578              # float 0.689540982
	.long	3208763507              # float -0.757209002
	.long	1063996174              # float 0.919113993
	.long	3202388551              # float -0.438616008
	.long	1051878394              # float 0.348419011
	.long	3212053469              # float -0.953306019
	.long	3184049443              # float -0.0980169996
	.long	1059842890              # float 0.671558976
	.long	3209535242              # float -0.803207993
	.long	1063913899              # float 0.914210021
	.long	3204209952              # float -0.492897987
	.long	1050712813              # float 0.31368199
	.long	3212429211              # float -0.975701987
	.long	3189129316              # float -0.146730006
	.long	1059534425              # float 0.653173029
	.long	3210233946              # float -0.844853997
	.long	1063829308              # float 0.909168005
	.long	3205208683              # float -0.545324981
	.long	1049532972              # float 0.278519988
	.long	3212684242              # float -0.990903019
	.long	3192374700              # float -0.195089996
	.long	1059219348              # float 0.634392977
	.long	3210855827              # float -0.881920993
	.long	1063742419              # float 0.903989017
	.long	3206053819              # float -0.595699012
	.long	1048104896              # float 0.242980003
	.long	3212816647              # float -0.998794972
	.long	3195588544              # float -0.242980003
	.long	1058897880              # float 0.61523199
	.long	3211397547              # float -0.914210021
	.long	1063653248              # float 0.898674011
	.long	3206861357              # float -0.643832027
	.long	1045697768              # float 0.207111001
	.long	3212825489              # float -0.999321997
	.long	3197411388              # float -0.290284991
	.long	1058570171              # float 0.595699012
	.long	3211856135              # float -0.941543996
	.long	1063561812              # float 0.893224001
	.long	3207628226              # float -0.689540982
	.long	1043271850              # float 0.170962006
	.long	3212710699              # float -0.992479979
	.long	3198975193              # float -0.336890012
	.long	1058236455              # float 0.575807989
	.long	3212229126              # float -0.963775992
	.long	1063468128              # float 0.887639999
	.long	3208351542              # float -0.732653975
	.long	1040830362              # float 0.134581
	.long	3212473084              # float -0.978317022
	.long	3200511751              # float -0.382683009
	.long	1057896918              # float 0.555570006
	.long	3212514490              # float -0.980785012
	.long	1063372179              # float 0.881920993
	.long	3209028604              # float -0.773010015
	.long	1036565795              # float 0.0980169996
	.long	3212114437              # float -0.956939995
	.long	3202017405              # float -0.427554995
	.long	1057551777              # float 0.534998
	.long	3212710699              # float -0.992479979
	.long	1063274016              # float 0.876070023
	.long	3209656860              # float -0.810456991
	.long	1031482299              # float 0.0613210015
	.long	3211637394              # float -0.928506016
	.long	3203488499              # float -0.471397012
	.long	1057201217              # float 0.514102995
	.long	3212816647              # float -0.998794972
	.long	1063173638              # float 0.870087027
	.long	3210233946              # float -0.844853997
	.long	1019808309              # float 0.0245409999
	.long	3211045460              # float -0.893224001
	.long	3204684865              # float -0.514102995
	.long	1056726304              # float 0.492897987
	.long	3212831814              # float -0.999698996
	.long	1063071062              # float 0.863973021
	.long	3210757664              # float -0.876070023
	.long	3158904960              # float -0.0122720003
	.long	3210343015              # float -0.851355016
	.long	3205380566              # float -0.555570006
	.long	1056004851              # float 0.471397012
	.long	3212756082              # float -0.995185017
	.long	1062966305              # float 0.857729017
	.long	3211226067              # float -0.903989017
	.long	3175676807              # float -0.0490680002
	.long	3209535242              # float -0.803207993
	.long	3206053819              # float -0.595699012
	.long	1055273834              # float 0.449611008
	.long	3212589870              # float -0.98527801
	.long	1062859367              # float 0.851355016
	.long	3211637394              # float -0.928506016
	.long	3182409302              # float -0.085796997
	.long	3208628064              # float -0.749135971
	.long	3206702996              # float -0.634392977
	.long	1054533757              # float 0.427554995
	.long	3212334068              # float -0.970031023
	.long	1062750298              # float 0.844853997
	.long	3211990084              # float -0.949527978
	.long	3187323550              # float -0.122410998
	.long	3207628226              # float -0.689540982
	.long	3207326538              # float -0.671558976
	.long	1053785024              # float 0.405241013
	.long	3211990084              # float -0.949527978
	.long	1062639082              # float 0.838225007
	.long	3212282813              # float -0.966975986
	.long	3189943212              # float -0.158858001
	.long	3206543042              # float -0.624858975
	.long	3207922935              # float -0.707107007
	.long	1053028103              # float 0.382683009
	.long	3211559782              # float -0.923879981
	.long	1062525752              # float 0.831470012
	.long	3212514490              # float -0.980785012
	.long	3192374700              # float -0.195089996
	.long	3205380566              # float -0.555570006
	.long	3208490743              # float -0.740951001
	.long	1052263464              # float 0.359894991
	.long	3211045460              # float -0.893224001
	.long	1062410308              # float 0.824589014
	.long	3212684242              # float -0.990903019
	.long	3194788472              # float -0.231058002
	.long	3203850450              # float -0.482183993
	.long	3209028604              # float -0.773010015
	.long	1051491545              # float 0.336890012
	.long	3210449953              # float -0.857729017
	.long	1062292800              # float 0.817584991
	.long	3212791398              # float -0.997290015
	.long	3196620443              # float -0.266712993
	.long	3201268672              # float -0.405241013
	.long	3209535242              # float -0.803207993
	.long	1050712813              # float 0.31368199
	.long	3209776448              # float -0.817584991
	.long	1062173212              # float 0.810456991
	.long	3212835606              # float -0.999925017
	.long	3197804680              # float -0.302006006
	.long	3198586632              # float -0.325309992
	.long	3210009400              # float -0.831470012
	.long	1049927740              # float 0.290284991
	.long	3209028604              # float -0.773010015
	.long	1062051594              # float 0.803207993
	.long	3212816647              # float -0.998794972
	.long	3198975193              # float -0.336890012
	.long	3195588544              # float -0.242980003
	.long	3210449953              # float -0.857729017
	.long	1049136795              # float 0.266712993
	.long	3208210496              # float -0.724246978
	.long	1061927929              # float 0.795836985
	.long	3212734640              # float -0.993906974
	.long	3200130371              # float -0.371316999
	.long	3189943212              # float -0.158858001
	.long	3210855827              # float -0.881920993
	.long	1048104896              # float 0.242980003
	.long	3207326538              # float -0.671558976
	.long	1061802251              # float 0.788345992
	.long	3212589870              # float -0.98527801
	.long	3201268672              # float -0.405241013
	.long	3180767551              # float -0.0735649988
	.long	3211226067              # float -0.903989017
	.long	1046502403              # float 0.219100997
	.long	3206381528              # float -0.61523199
	.long	1061674593              # float 0.780736982
	.long	3212382873              # float -0.972940027
	.long	3202388551              # float -0.438616008
	.long	1011421312              # float 0.0122720003
	.long	3211559782              # float -0.923879981
	.long	1044891052              # float 0.195089996
	.long	3205380566              # float -0.555570006
	.long	1061544956              # float 0.773010015
	.long	3212114437              # float -0.956939995
	.long	3203488499              # float -0.471397012
	.long	1036565795              # float 0.0980169996
	.long	3211856135              # float -0.941543996
	.long	1043271850              # float 0.170962006
	.long	3204209952              # float -0.492897987
	.long	1061413372              # float 0.765166998
	.long	3211785587              # float -0.937339007
	.long	3204507614              # float -0.503538013
	.long	1044082390              # float 0.183039993
	.long	3212114437              # float -0.956939995
	.long	1041645668              # float 0.146730006
	.long	3202017405              # float -0.427554995
	.long	1061279859              # float 0.757209002
	.long	3211397547              # float -0.914210021
	.long	3205035425              # float -0.534998
	.long	1049136795              # float 0.266712993
	.long	3212334068              # float -0.970031023
	.long	1039839902              # float 0.122410998
	.long	3199747112              # float -0.359894991
	.long	1061144416              # float 0.749135971
	.long	3210951776              # float -0.887639999
	.long	3205551056              # float -0.565732002
	.long	1051878394              # float 0.348419011
	.long	3212514490              # float -0.980785012
	.long	1036565795              # float 0.0980169996
	.long	3197411388              # float -0.290284991
	.long	1061007095              # float 0.740951001
	.long	3210449953              # float -0.857729017
	.long	3206053819              # float -0.595699012
	.long	1054533757              # float 0.427554995
	.long	3212655284              # float -0.989176988
	.long	1033283903              # float 0.0735649988
	.long	3193986051              # float -0.219100997
	.long	1060867894              # float 0.732653975
	.long	3209893956              # float -0.824589014
	.long	3206543042              # float -0.624858975
	.long	1057023966              # float 0.503538013
	.long	3212756082              # float -0.995185017
	.long	1028193159              # float 0.0490680002
	.long	3189129316              # float -0.146730006
	.long	1060726848              # float 0.724246978
	.long	3209285899              # float -0.788345992
	.long	3207018073              # float -0.653173029
	.long	1058236455              # float 0.575807989
	.long	3212816647              # float -0.998794972
	.long	1019808309              # float 0.0245409999
	.long	3180767551              # float -0.0735649988
	.long	1060583974              # float 0.715731025
	.long	3208628064              # float -0.749135971
	.long	3207478238              # float -0.680601001
	.long	1059377709              # float 0.643832027
	.size	.Lmain.cos_512, 1792

	.type	.L.str.476,@object      # @.str.476
.L.str.476:
	.asciz	"5:0-24"
	.size	.L.str.476, 7

	.type	.Lmain.reversed,@object # @main.reversed
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.Lmain.reversed:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	6                       # 0x6
	.long	1                       # 0x1
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	7                       # 0x7
	.size	.Lmain.reversed, 32

	.type	.L.str.477,@object      # @.str.477
	.section	.rodata,"a",@progbits
.L.str.477:
	.asciz	"arraydecay"
	.size	.L.str.477, 11

	.type	.L.str.478,@object      # @.str.478
.L.str.478:
	.asciz	"arraydecay3"
	.size	.L.str.478, 12

	.type	.L.str.479,@object      # @.str.479
.L.str.479:
	.asciz	"arraydecay4"
	.size	.L.str.479, 12

	.type	.L.str.480,@object      # @.str.480
.L.str.480:
	.asciz	"arraydecay5"
	.size	.L.str.480, 12

	.type	.L.str.481,@object      # @.str.481
.L.str.481:
	.asciz	"arraydecay6"
	.size	.L.str.481, 12

	.type	.L.str.482,@object      # @.str.482
.L.str.482:
	.asciz	"arraydecay7"
	.size	.L.str.482, 12

	.type	.L.str.483,@object      # @.str.483
.L.str.483:
	.asciz	"arraydecay8"
	.size	.L.str.483, 12

	.type	.L.str.484,@object      # @.str.484
.L.str.484:
	.asciz	"arraydecay9"
	.size	.L.str.484, 12

	.type	.L.str.485,@object      # @.str.485
.L.str.485:
	.asciz	"arraydecay10"
	.size	.L.str.485, 13

	.type	.L.str.486,@object      # @.str.486
.L.str.486:
	.asciz	"arraydecay11"
	.size	.L.str.486, 13

	.type	.L.str.487,@object      # @.str.487
.L.str.487:
	.asciz	"arraydecay12"
	.size	.L.str.487, 13

	.type	.L.str.488,@object      # @.str.488
.L.str.488:
	.asciz	"arraydecay13"
	.size	.L.str.488, 13

	.type	.L.str.489,@object      # @.str.489
.L.str.489:
	.asciz	"5:0-25"
	.size	.L.str.489, 7

	.type	.L.str.490,@object      # @.str.490
.L.str.490:
	.asciz	"5:0-27"
	.size	.L.str.490, 7

	.type	.L.str.491,@object      # @.str.491
.L.str.491:
	.asciz	"16:1"
	.size	.L.str.491, 5

	.type	.L.str.492,@object      # @.str.492
.L.str.492:
	.asciz	"arrayidx16"
	.size	.L.str.492, 11

	.type	.L.str.493,@object      # @.str.493
.L.str.493:
	.asciz	"arrayidx18"
	.size	.L.str.493, 11

	.type	.L.str.494,@object      # @.str.494
.L.str.494:
	.asciz	"call"
	.size	.L.str.494, 5

	.type	.L.str.495,@object      # @.str.495
.L.str.495:
	.asciz	"printf"
	.size	.L.str.495, 7

	.type	.L.str.496,@object      # @.str.496
.L.str.496:
	.asciz	"x = %i y = %i \n"
	.size	.L.str.496, 16

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"x = %i y = %i \n"
	.size	.L.str, 16

	.type	.L.str.497,@object      # @.str.497
	.section	.rodata,"a",@progbits
.L.str.497:
	.asciz	"16:1-1"
	.size	.L.str.497, 7

	.type	.L.str.498,@object      # @.str.498
.L.str.498:
	.asciz	"19:0"
	.size	.L.str.498, 5

	.type	.L.str.499,@object      # @.str.499
.L.str.499:
	.asciz	"19:0-12"
	.size	.L.str.499, 8

	.type	trace,@object           # @trace
	.section	.tbss,"awT",@nobits
	.globl	trace
	.p2align	3
trace:
	.quad	0
	.size	trace, 8

	.type	_Z8gz_filesB5cxx11,@object # @_Z8gz_filesB5cxx11
	.bss
	.globl	_Z8gz_filesB5cxx11
	.p2align	3
_Z8gz_filesB5cxx11:
	.zero	48
	.size	_Z8gz_filesB5cxx11, 48

	.type	lock,@object            # @lock
	.globl	lock
	.p2align	3
lock:
	.zero	40
	.size	lock, 40

	.type	_Z12labelmap_strB5cxx11,@object # @_Z12labelmap_strB5cxx11
	.globl	_Z12labelmap_strB5cxx11
	.p2align	3
_Z12labelmap_strB5cxx11:
	.zero	32
	.size	_Z12labelmap_strB5cxx11, 32

	.type	default_trace_name,@object # @default_trace_name
	.data
	.globl	default_trace_name
	.p2align	3
default_trace_name:
	.quad	.L.str.501
	.size	default_trace_name, 8

	.type	.L.str.501,@object      # @.str.501
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.501:
	.asciz	"dynamic_trace.gz"
	.size	.L.str.501, 17

	.section	.init_array,"aw",@init_array
	.p2align	3
	.quad	_GLOBAL__sub_I_trace_logger.cpp
	.type	.L.str.3.502,@object    # @.str.3.502
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3.502:
	.asciz	"!trace && \"Trace has already been created!\""
	.size	.L.str.3.502, 44

	.type	.L.str.4.503,@object    # @.str.4.503
.L.str.4.503:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.cpp"
	.size	.L.str.4.503, 53

	.type	.L__PRETTY_FUNCTION__._Z12create_tracePKc,@object # @__PRETTY_FUNCTION__._Z12create_tracePKc
.L__PRETTY_FUNCTION__._Z12create_tracePKc:
	.asciz	"void create_trace(const char *)"
	.size	.L__PRETTY_FUNCTION__._Z12create_tracePKc, 32

	.type	.L.str.5.504,@object    # @.str.5.504
.L.str.5.504:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str.5.504, 27

	.type	.L.str.6.505,@object    # @.str.6.505
.L.str.6.505:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str.6.505, 26

	.type	.L.str.7.506,@object    # @.str.7.506
.L.str.7.506:
	.asciz	"w"
	.size	.L.str.7.506, 2

	.type	.L.str.8.507,@object    # @.str.8.507
.L.str.8.507:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str.8.507, 39

	.type	_ZStL19piecewise_construct,@object # @_ZStL19piecewise_construct
	.section	.rodata,"a",@progbits
_ZStL19piecewise_construct:
	.zero	1
	.size	_ZStL19piecewise_construct, 1

	.type	.L.str.36.508,@object   # @.str.36.508
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.36.508:
	.asciz	"map::at"
	.size	.L.str.36.508, 8

	.type	.L.str.9.513,@object    # @.str.9.513
.L.str.9.513:
	.asciz	"Failed to initialize the mutex\n"
	.size	.L.str.9.513, 32

	.type	.L.str.10.514,@object   # @.str.10.514
.L.str.10.514:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str.10.514, 75

	.type	.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc,@object # @__PRETTY_FUNCTION__._Z10log_or_notbbiPc
.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc:
	.asciz	"logging_status log_or_not(bool, bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__._Z10log_or_notbbiPc, 51

	.type	.L.str.11.515,@object   # @.str.11.515
.L.str.11.515:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str.11.515, 69

	.type	.L.str.12.516,@object   # @.str.12.516
.L.str.12.516:
	.asciz	"0x"
	.size	.L.str.12.516, 3

	.type	.L.str.13.517,@object   # @.str.13.517
.L.str.13.517:
	.asciz	"%02x"
	.size	.L.str.13.517, 5

	.type	.L.str.14.520,@object   # @.str.14.520
.L.str.14.520:
	.asciz	"%s: Stopping logging at inst %ld.\n"
	.size	.L.str.14.520, 35

	.type	.L.str.15.521,@object   # @.str.15.521
.L.str.15.521:
	.asciz	"%s: Starting to log at inst = %ld.\n"
	.size	.L.str.15.521, 36

	.type	.L.str.16.522,@object   # @.str.16.522
.L.str.16.522:
	.zero	1
	.size	.L.str.16.522, 1

	.type	.L.str.17.525,@object   # @.str.17.525
.L.str.17.525:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str.17.525, 15

	.type	.L.str.18.528,@object   # @.str.18.528
.L.str.18.528:
	.asciz	"\n0,%d,%s,%s,%s,%d,%ld\n"
	.size	.L.str.18.528, 23

	.type	.L.str.19.531,@object   # @.str.19.531
.L.str.19.531:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str.19.531, 12

	.type	.L.str.20.532,@object   # @.str.20.532
.L.str.20.532:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str.20.532, 12

	.type	.L.str.21.533,@object   # @.str.21.533
.L.str.21.533:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str.21.533, 13

	.type	.L.str.22.534,@object   # @.str.22.534
.L.str.22.534:
	.asciz	",%s"
	.size	.L.str.22.534, 4

	.type	.L.str.23.535,@object   # @.str.23.535
.L.str.23.535:
	.asciz	", "
	.size	.L.str.23.535, 3

	.type	.L.str.24.536,@object   # @.str.24.536
.L.str.24.536:
	.asciz	",%s,\n"
	.size	.L.str.24.536, 6

	.type	.L.str.25.537,@object   # @.str.25.537
.L.str.25.537:
	.asciz	",\n"
	.size	.L.str.25.537, 3

	.type	.L.str.26.540,@object   # @.str.26.540
.L.str.26.540:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str.26.540, 14

	.type	.L.str.27.541,@object   # @.str.27.541
.L.str.27.541:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str.27.541, 14

	.type	.L.str.28.542,@object   # @.str.28.542
.L.str.28.542:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str.28.542, 15

	.type	.L.str.29.545,@object   # @.str.29.545
.L.str.29.545:
	.asciz	"r,%d,%s,%d"
	.size	.L.str.29.545, 11

	.type	.L.str.30.546,@object   # @.str.30.546
.L.str.30.546:
	.asciz	"f,%d,%s,%d"
	.size	.L.str.30.546, 11

	.type	.L.str.31.547,@object   # @.str.31.547
.L.str.31.547:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str.31.547, 12

	.type	.L.str.32.550,@object   # @.str.32.550
.L.str.32.550:
	.asciz	"r,%d,%f,%d"
	.size	.L.str.32.550, 11

	.type	.L.str.33.551,@object   # @.str.33.551
.L.str.33.551:
	.asciz	"f,%d,%f,%d"
	.size	.L.str.33.551, 11

	.type	.L.str.34.552,@object   # @.str.34.552
.L.str.34.552:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str.34.552, 12

	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 6.0.0 (tags/RELEASE_600/final)" # string offset=0
.Linfo_string1:
	.asciz	"fft.c"                 # string offset=45
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/SHOC/fft" # string offset=51
.Linfo_string3:
	.asciz	"step1"                 # string offset=96
.Linfo_string4:
	.asciz	"step2"                 # string offset=102
.Linfo_string5:
	.asciz	"step3"                 # string offset=108
.Linfo_string6:
	.asciz	"step4"                 # string offset=114
.Linfo_string7:
	.asciz	"step5"                 # string offset=120
.Linfo_string8:
	.asciz	"step6"                 # string offset=126
.Linfo_string9:
	.asciz	"step7"                 # string offset=132
.Linfo_string10:
	.asciz	"step8"                 # string offset=138
.Linfo_string11:
	.asciz	"step9"                 # string offset=144
.Linfo_string12:
	.asciz	"step10"                # string offset=150
.Linfo_string13:
	.asciz	"step11"                # string offset=157
.Linfo_string14:
	.asciz	"fft1D_512"             # string offset=164
.Linfo_string15:
	.asciz	"main"                  # string offset=174
.Linfo_string16:
	.asciz	"int"                   # string offset=179
.Linfo_string17:
	.asciz	"work_x"                # string offset=183
.Linfo_string18:
	.asciz	"work_y"                # string offset=190
.Linfo_string19:
	.asciz	"DATA_x"                # string offset=197
.Linfo_string20:
	.asciz	"DATA_y"                # string offset=204
.Linfo_string21:
	.asciz	"data_x"                # string offset=211
.Linfo_string22:
	.asciz	"data_y"                # string offset=218
.Linfo_string23:
	.asciz	"smem"                  # string offset=225
.Linfo_string24:
	.asciz	"reversed"              # string offset=230
.Linfo_string25:
	.asciz	"sin_64"                # string offset=239
.Linfo_string26:
	.asciz	"float"                 # string offset=246
.Linfo_string27:
	.asciz	"cos_64"                # string offset=252
.Linfo_string28:
	.asciz	"sin_512"               # string offset=259
.Linfo_string29:
	.asciz	"cos_512"               # string offset=267
.Linfo_string30:
	.asciz	"stride"                # string offset=275
.Linfo_string31:
	.asciz	"tid"                   # string offset=282
.Linfo_string32:
	.asciz	"i"                     # string offset=286
.Linfo_string33:
	.asciz	"exp_1_8_x"             # string offset=288
.Linfo_string34:
	.asciz	"exp_1_8_y"             # string offset=298
.Linfo_string35:
	.asciz	"exp_1_4_x"             # string offset=308
.Linfo_string36:
	.asciz	"exp_1_4_y"             # string offset=318
.Linfo_string37:
	.asciz	"exp_3_8_x"             # string offset=328
.Linfo_string38:
	.asciz	"exp_3_8_y"             # string offset=338
.Linfo_string39:
	.asciz	"c0_x"                  # string offset=348
.Linfo_string40:
	.asciz	"c0_y"                  # string offset=353
.Linfo_string41:
	.asciz	"tmp_1"                 # string offset=358
.Linfo_string42:
	.asciz	"exp_1_44_x"            # string offset=364
.Linfo_string43:
	.asciz	"exp_1_44_y"            # string offset=375
.Linfo_string44:
	.asciz	"tmp"                   # string offset=386
.Linfo_string45:
	.asciz	"j"                     # string offset=390
.Linfo_string46:
	.asciz	"A_x"                   # string offset=392
.Linfo_string47:
	.asciz	"A_y"                   # string offset=396
.Linfo_string48:
	.asciz	"hi"                    # string offset=400
.Linfo_string49:
	.asciz	"lo"                    # string offset=403
.Linfo_string50:
	.asciz	"tmp_2"                 # string offset=406
.Linfo_string51:
	.asciz	"a_x"                   # string offset=412
.Linfo_string52:
	.asciz	"sizetype"              # string offset=416
.Linfo_string53:
	.asciz	"a_y"                   # string offset=425
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc1:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc3:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc5:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc7:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc10:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin0-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Ltmp1-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc13:
	.quad	.Ltmp1-.Lfunc_begin0
	.quad	.Ltmp4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp4-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -664
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Ltmp4-.Lfunc_begin0
	.quad	.Ltmp6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp6-.Lfunc_begin0
	.quad	.Ltmp64-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -728
	.byte	122                     # 
	.quad	.Ltmp64-.Lfunc_begin0
	.quad	.Ltmp67-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp67-.Lfunc_begin0
	.quad	.Ltmp70-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -8112
	.byte	64                      # 
	.quad	.Ltmp70-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -728
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc15:
	.quad	.Ltmp11-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -1092
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc16:
	.quad	.Ltmp12-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -1116
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Ltmp14-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -1524
	.byte	116                     # 
	.quad	0
	.quad	0
.Ldebug_loc18:
	.quad	.Ltmp15-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -1548
	.byte	115                     # 
	.quad	0
	.quad	0
.Ldebug_loc19:
	.quad	.Ltmp17-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -1956
	.byte	112                     # 
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Ltmp18-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -1980
	.byte	112                     # 
	.quad	0
	.quad	0
.Ldebug_loc21:
	.quad	.Ltmp20-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -2388
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc22:
	.quad	.Ltmp21-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -2412
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Ltmp23-.Lfunc_begin0
	.quad	.Ltmp24-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -2820
	.byte	105                     # 
	.quad	.Ltmp24-.Lfunc_begin0
	.quad	.Ltmp25-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -3196
	.byte	103                     # 
	.quad	.Ltmp25-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -3348
	.byte	101                     # 
	.quad	0
	.quad	0
.Ldebug_loc24:
	.quad	.Ltmp27-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -3764
	.byte	98                      # 
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Ltmp28-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	180                     # -3788
	.byte	98                      # 
	.quad	0
	.quad	0
.Ldebug_loc26:
	.quad	.Ltmp30-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	156                     # -4196
	.byte	95                      # 
	.quad	0
	.quad	0
.Ldebug_loc27:
	.quad	.Ltmp31-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -4220
	.byte	95                      # 
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp33-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -4628
	.byte	91                      # 
	.quad	0
	.quad	0
.Ldebug_loc29:
	.quad	.Ltmp35-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -4756
	.byte	90                      # 
	.quad	0
	.quad	0
.Ldebug_loc30:
	.quad	.Ltmp36-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	212                     # -4780
	.byte	90                      # 
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Ltmp38-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -5188
	.byte	87                      # 
	.quad	0
	.quad	0
.Ldebug_loc32:
	.quad	.Ltmp39-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -5212
	.byte	87                      # 
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp41-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -5620
	.byte	84                      # 
	.quad	0
	.quad	0
.Ldebug_loc34:
	.quad	.Ltmp42-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -5644
	.byte	83                      # 
	.quad	0
	.quad	0
.Ldebug_loc35:
	.quad	.Ltmp44-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -6052
	.byte	80                      # 
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp45-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -6076
	.byte	80                      # 
	.quad	0
	.quad	0
.Ldebug_loc37:
	.quad	.Ltmp47-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -6484
	.byte	77                      # 
	.quad	0
	.quad	0
.Ldebug_loc38:
	.quad	.Ltmp49-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -6612
	.byte	76                      # 
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Ltmp50-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -6636
	.byte	76                      # 
	.quad	0
	.quad	0
.Ldebug_loc40:
	.quad	.Ltmp52-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -7044
	.byte	72                      # 
	.quad	0
	.quad	0
.Ldebug_loc41:
	.quad	.Ltmp53-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	228                     # -7068
	.byte	72                      # 
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Ltmp54-.Lfunc_begin0
	.quad	.Ltmp57-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp57-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -7568
	.byte	68                      # 
	.quad	0
	.quad	0
.Ldebug_loc43:
	.quad	.Ltmp58-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -7668
	.byte	68                      # 
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Ltmp59-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -7716
	.byte	67                      # 
	.quad	0
	.quad	0
.Ldebug_loc45:
	.quad	.Ltmp60-.Lfunc_begin0
	.quad	.Lfunc_end0-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	180                     # -7756
	.byte	67                      # 
	.quad	0
	.quad	0
.Ldebug_loc46:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc48:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc49:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc51:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc52:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc53:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc54:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc56:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Lfunc_begin1-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc58:
	.quad	.Ltmp75-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc59:
	.quad	.Ltmp75-.Lfunc_begin0
	.quad	.Ltmp78-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp78-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Ltmp78-.Lfunc_begin0
	.quad	.Ltmp81-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp81-.Lfunc_begin0
	.quad	.Lfunc_end1-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc61:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc62:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc64:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc67:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc68:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc70:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc72:
	.quad	.Lfunc_begin2-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc73:
	.quad	.Ltmp93-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Ltmp93-.Lfunc_begin0
	.quad	.Ltmp96-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp96-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Ltmp96-.Lfunc_begin0
	.quad	.Ltmp99-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp99-.Lfunc_begin0
	.quad	.Ltmp107-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	.Ltmp107-.Lfunc_begin0
	.quad	.Ltmp110-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp110-.Lfunc_begin0
	.quad	.Ltmp113-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -2696
	.byte	106                     # 
	.quad	.Ltmp113-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc76:
	.quad	.Ltmp104-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -820
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Ltmp106-.Lfunc_begin0
	.quad	.Lfunc_end2-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -884
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc78:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc80:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc82:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc83:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc85:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc87:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc88:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Lfunc_begin3-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc90:
	.quad	.Ltmp118-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc91:
	.quad	.Ltmp118-.Lfunc_begin0
	.quad	.Ltmp121-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp121-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc92:
	.quad	.Ltmp121-.Lfunc_begin0
	.quad	.Ltmp124-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp124-.Lfunc_begin0
	.quad	.Lfunc_end3-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc93:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc94:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc96:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc97:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc99:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc100:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc101:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc102:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc104:
	.quad	.Lfunc_begin4-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Ltmp136-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc106:
	.quad	.Ltmp136-.Lfunc_begin0
	.quad	.Ltmp139-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp139-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Ltmp139-.Lfunc_begin0
	.quad	.Ltmp142-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp142-.Lfunc_begin0
	.quad	.Ltmp150-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	.Ltmp150-.Lfunc_begin0
	.quad	.Ltmp153-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp153-.Lfunc_begin0
	.quad	.Ltmp156-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -2696
	.byte	106                     # 
	.quad	.Ltmp156-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc108:
	.quad	.Ltmp147-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -820
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Ltmp149-.Lfunc_begin0
	.quad	.Lfunc_end4-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -884
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc110:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc112:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc114:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc115:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc117:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc120:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc121:
	.quad	.Lfunc_begin5-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Ltmp161-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc123:
	.quad	.Ltmp161-.Lfunc_begin0
	.quad	.Ltmp164-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp164-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -664
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Ltmp164-.Lfunc_begin0
	.quad	.Ltmp167-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp167-.Lfunc_begin0
	.quad	.Ltmp227-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -760
	.byte	122                     # 
	.quad	.Ltmp227-.Lfunc_begin0
	.quad	.Ltmp230-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp230-.Lfunc_begin0
	.quad	.Ltmp233-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -8208
	.byte	191                     # 
	.byte	127                     # 
	.quad	.Ltmp233-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -760
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc125:
	.quad	.Ltmp172-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -1092
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc126:
	.quad	.Ltmp173-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -1116
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc127:
	.quad	.Ltmp175-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -1524
	.byte	116                     # 
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Ltmp176-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -1548
	.byte	115                     # 
	.quad	0
	.quad	0
.Ldebug_loc129:
	.quad	.Ltmp178-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -1956
	.byte	112                     # 
	.quad	0
	.quad	0
.Ldebug_loc130:
	.quad	.Ltmp179-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -1980
	.byte	112                     # 
	.quad	0
	.quad	0
.Ldebug_loc131:
	.quad	.Ltmp181-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -2388
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc132:
	.quad	.Ltmp182-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -2412
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Ltmp184-.Lfunc_begin0
	.quad	.Ltmp185-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -2820
	.byte	105                     # 
	.quad	.Ltmp185-.Lfunc_begin0
	.quad	.Ltmp186-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -3196
	.byte	103                     # 
	.quad	.Ltmp186-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -3348
	.byte	101                     # 
	.quad	0
	.quad	0
.Ldebug_loc134:
	.quad	.Ltmp188-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -3764
	.byte	98                      # 
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Ltmp189-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	180                     # -3788
	.byte	98                      # 
	.quad	0
	.quad	0
.Ldebug_loc136:
	.quad	.Ltmp191-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	156                     # -4196
	.byte	95                      # 
	.quad	0
	.quad	0
.Ldebug_loc137:
	.quad	.Ltmp192-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -4220
	.byte	95                      # 
	.quad	0
	.quad	0
.Ldebug_loc138:
	.quad	.Ltmp194-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -4628
	.byte	91                      # 
	.quad	0
	.quad	0
.Ldebug_loc139:
	.quad	.Ltmp196-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -4756
	.byte	90                      # 
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Ltmp197-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	212                     # -4780
	.byte	90                      # 
	.quad	0
	.quad	0
.Ldebug_loc141:
	.quad	.Ltmp199-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -5188
	.byte	87                      # 
	.quad	0
	.quad	0
.Ldebug_loc142:
	.quad	.Ltmp200-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -5212
	.byte	87                      # 
	.quad	0
	.quad	0
.Ldebug_loc143:
	.quad	.Ltmp202-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -5620
	.byte	84                      # 
	.quad	0
	.quad	0
.Ldebug_loc144:
	.quad	.Ltmp203-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -5644
	.byte	83                      # 
	.quad	0
	.quad	0
.Ldebug_loc145:
	.quad	.Ltmp205-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -6052
	.byte	80                      # 
	.quad	0
	.quad	0
.Ldebug_loc146:
	.quad	.Ltmp206-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -6076
	.byte	80                      # 
	.quad	0
	.quad	0
.Ldebug_loc147:
	.quad	.Ltmp208-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -6484
	.byte	77                      # 
	.quad	0
	.quad	0
.Ldebug_loc148:
	.quad	.Ltmp210-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -6612
	.byte	76                      # 
	.quad	0
	.quad	0
.Ldebug_loc149:
	.quad	.Ltmp211-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -6636
	.byte	76                      # 
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Ltmp213-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -7044
	.byte	72                      # 
	.quad	0
	.quad	0
.Ldebug_loc151:
	.quad	.Ltmp214-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	228                     # -7068
	.byte	72                      # 
	.quad	0
	.quad	0
.Ldebug_loc152:
	.quad	.Ltmp217-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -7516
	.byte	69                      # 
	.quad	0
	.quad	0
.Ldebug_loc153:
	.quad	.Ltmp217-.Lfunc_begin0
	.quad	.Ltmp220-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp220-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -7664
	.byte	68                      # 
	.quad	0
	.quad	0
.Ldebug_loc154:
	.quad	.Ltmp221-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -7764
	.byte	67                      # 
	.quad	0
	.quad	0
.Ldebug_loc155:
	.quad	.Ltmp222-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -7812
	.byte	66                      # 
	.quad	0
	.quad	0
.Ldebug_loc156:
	.quad	.Ltmp223-.Lfunc_begin0
	.quad	.Lfunc_end5-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	212                     # -7852
	.byte	66                      # 
	.quad	0
	.quad	0
.Ldebug_loc157:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc158:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc160:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc161:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc162:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc163:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc164:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc165:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc166:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc167:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc168:
	.quad	.Lfunc_begin6-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc169:
	.quad	.Ltmp238-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc170:
	.quad	.Ltmp238-.Lfunc_begin0
	.quad	.Ltmp241-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp241-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc171:
	.quad	.Ltmp241-.Lfunc_begin0
	.quad	.Ltmp244-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp244-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc172:
	.quad	.Ltmp251-.Lfunc_begin0
	.quad	.Lfunc_end6-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -884
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc173:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc174:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc175:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc176:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc177:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc178:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc179:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc180:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc181:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc182:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc183:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc184:
	.quad	.Lfunc_begin7-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc185:
	.quad	.Ltmp257-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc186:
	.quad	.Ltmp257-.Lfunc_begin0
	.quad	.Ltmp260-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp260-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc187:
	.quad	.Ltmp260-.Lfunc_begin0
	.quad	.Ltmp263-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp263-.Lfunc_begin0
	.quad	.Ltmp271-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	.Ltmp271-.Lfunc_begin0
	.quad	.Ltmp274-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp274-.Lfunc_begin0
	.quad	.Ltmp277-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -2696
	.byte	106                     # 
	.quad	.Ltmp277-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc188:
	.quad	.Ltmp268-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -820
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc189:
	.quad	.Ltmp270-.Lfunc_begin0
	.quad	.Lfunc_end7-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -884
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc190:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc191:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc192:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc193:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc194:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc195:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc196:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc197:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc198:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc199:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc200:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc201:
	.quad	.Lfunc_begin8-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc202:
	.quad	.Ltmp282-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc203:
	.quad	.Ltmp282-.Lfunc_begin0
	.quad	.Ltmp285-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp285-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc204:
	.quad	.Ltmp285-.Lfunc_begin0
	.quad	.Ltmp288-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp288-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc205:
	.quad	.Ltmp295-.Lfunc_begin0
	.quad	.Lfunc_end8-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -884
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc206:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc207:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc208:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc209:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc210:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc211:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc212:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc213:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc214:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc215:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc216:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc217:
	.quad	.Lfunc_begin9-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc218:
	.quad	.Ltmp301-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc219:
	.quad	.Ltmp301-.Lfunc_begin0
	.quad	.Ltmp304-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp304-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	208                     # -432
	.byte	124                     # 
	.quad	0
	.quad	0
.Ldebug_loc220:
	.quad	.Ltmp304-.Lfunc_begin0
	.quad	.Ltmp307-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp307-.Lfunc_begin0
	.quad	.Ltmp315-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	.Ltmp315-.Lfunc_begin0
	.quad	.Ltmp318-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp318-.Lfunc_begin0
	.quad	.Ltmp321-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -2696
	.byte	106                     # 
	.quad	.Ltmp321-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -528
	.byte	123                     # 
	.quad	0
	.quad	0
.Ldebug_loc221:
	.quad	.Ltmp312-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -820
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc222:
	.quad	.Ltmp314-.Lfunc_begin0
	.quad	.Lfunc_end9-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -884
	.byte	121                     # 
	.quad	0
	.quad	0
.Ldebug_loc223:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc224:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc225:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc226:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc227:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc228:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc229:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc230:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -152
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc231:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc232:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc233:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	224                     # -160
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc234:
	.quad	.Lfunc_begin10-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc235:
	.quad	.Ltmp326-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc236:
	.quad	.Ltmp326-.Lfunc_begin0
	.quad	.Ltmp329-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp329-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	232                     # -664
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc237:
	.quad	.Ltmp329-.Lfunc_begin0
	.quad	.Ltmp332-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp332-.Lfunc_begin0
	.quad	.Ltmp380-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -760
	.byte	122                     # 
	.quad	.Ltmp380-.Lfunc_begin0
	.quad	.Ltmp382-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp382-.Lfunc_begin0
	.quad	.Ltmp385-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	192                     # -7488
	.byte	69                      # 
	.quad	.Ltmp385-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -760
	.byte	122                     # 
	.quad	0
	.quad	0
.Ldebug_loc238:
	.quad	.Ltmp337-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -1092
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc239:
	.quad	.Ltmp338-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -1116
	.byte	119                     # 
	.quad	0
	.quad	0
.Ldebug_loc240:
	.quad	.Ltmp340-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -1524
	.byte	116                     # 
	.quad	0
	.quad	0
.Ldebug_loc241:
	.quad	.Ltmp341-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -1548
	.byte	115                     # 
	.quad	0
	.quad	0
.Ldebug_loc242:
	.quad	.Ltmp343-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -1956
	.byte	112                     # 
	.quad	0
	.quad	0
.Ldebug_loc243:
	.quad	.Ltmp344-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -1980
	.byte	112                     # 
	.quad	0
	.quad	0
.Ldebug_loc244:
	.quad	.Ltmp346-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -2388
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc245:
	.quad	.Ltmp347-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -2412
	.byte	109                     # 
	.quad	0
	.quad	0
.Ldebug_loc246:
	.quad	.Ltmp349-.Lfunc_begin0
	.quad	.Ltmp350-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -2820
	.byte	105                     # 
	.quad	.Ltmp350-.Lfunc_begin0
	.quad	.Ltmp351-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -3196
	.byte	103                     # 
	.quad	.Ltmp351-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -3348
	.byte	101                     # 
	.quad	0
	.quad	0
.Ldebug_loc247:
	.quad	.Ltmp353-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	204                     # -3764
	.byte	98                      # 
	.quad	0
	.quad	0
.Ldebug_loc248:
	.quad	.Ltmp354-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	180                     # -3788
	.byte	98                      # 
	.quad	0
	.quad	0
.Ldebug_loc249:
	.quad	.Ltmp356-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	156                     # -4196
	.byte	95                      # 
	.quad	0
	.quad	0
.Ldebug_loc250:
	.quad	.Ltmp357-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	132                     # -4220
	.byte	95                      # 
	.quad	0
	.quad	0
.Ldebug_loc251:
	.quad	.Ltmp359-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -4628
	.byte	91                      # 
	.quad	0
	.quad	0
.Ldebug_loc252:
	.quad	.Ltmp361-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	236                     # -4756
	.byte	90                      # 
	.quad	0
	.quad	0
.Ldebug_loc253:
	.quad	.Ltmp362-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	212                     # -4780
	.byte	90                      # 
	.quad	0
	.quad	0
.Ldebug_loc254:
	.quad	.Ltmp364-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	188                     # -5188
	.byte	87                      # 
	.quad	0
	.quad	0
.Ldebug_loc255:
	.quad	.Ltmp365-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	164                     # -5212
	.byte	87                      # 
	.quad	0
	.quad	0
.Ldebug_loc256:
	.quad	.Ltmp367-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	140                     # -5620
	.byte	84                      # 
	.quad	0
	.quad	0
.Ldebug_loc257:
	.quad	.Ltmp368-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	244                     # -5644
	.byte	83                      # 
	.quad	0
	.quad	0
.Ldebug_loc258:
	.quad	.Ltmp370-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	220                     # -6052
	.byte	80                      # 
	.quad	0
	.quad	0
.Ldebug_loc259:
	.quad	.Ltmp371-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	196                     # -6076
	.byte	80                      # 
	.quad	0
	.quad	0
.Ldebug_loc260:
	.quad	.Ltmp373-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -6484
	.byte	77                      # 
	.quad	0
	.quad	0
.Ldebug_loc261:
	.quad	.Ltmp375-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	172                     # -6612
	.byte	76                      # 
	.quad	0
	.quad	0
.Ldebug_loc262:
	.quad	.Ltmp376-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	148                     # -6636
	.byte	76                      # 
	.quad	0
	.quad	0
.Ldebug_loc263:
	.quad	.Ltmp378-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	252                     # -7044
	.byte	72                      # 
	.quad	0
	.quad	0
.Ldebug_loc264:
	.quad	.Ltmp379-.Lfunc_begin0
	.quad	.Lfunc_end10-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	228                     # -7068
	.byte	72                      # 
	.quad	0
	.quad	0
.Ldebug_loc265:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
	.quad	0
	.quad	0
.Ldebug_loc266:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	2                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
	.quad	0
	.quad	0
.Ldebug_loc267:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	184                     # -72
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc268:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	176                     # -80
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc269:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	152                     # -104
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc270:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -96
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc271:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	168                     # -88
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc272:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -120
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc273:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	144                     # -112
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc274:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	240                     # -144
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc275:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	248                     # -136
	.byte	126                     # 
	.quad	0
	.quad	0
.Ldebug_loc276:
	.quad	.Lfunc_begin11-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	128                     # -128
	.byte	127                     # 
	.quad	0
	.quad	0
.Ldebug_loc277:
	.quad	.Ltmp390-.Lfunc_begin0
	.quad	.Lfunc_end11-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	192                     # 64
	.byte	0                       # DW_OP_stack_value
	.byte	159                     # 
	.quad	0
	.quad	0
.Ldebug_loc278:
	.quad	.Ltmp393-.Lfunc_begin0
	.quad	.Ltmp395-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp395-.Lfunc_begin0
	.quad	.Ltmp399-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -18296
	.byte	241                     # 
	.byte	126                     # 
	.quad	.Ltmp399-.Lfunc_begin0
	.quad	.Ltmp401-.Lfunc_begin0
	.short	3                       # Loc expr size
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
	.quad	.Ltmp401-.Lfunc_begin0
	.quad	.Ltmp404-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	160                     # -20576
	.byte	223                     # 
	.byte	126                     # 
	.quad	.Ltmp404-.Lfunc_begin0
	.quad	.Lfunc_end12-.Lfunc_begin0
	.short	4                       # Loc expr size
	.byte	118                     # DW_OP_breg6
	.byte	136                     # -18296
	.byte	241                     # 
	.byte	126                     # 
	.quad	0
	.quad	0
	.section	.debug_abbrev,"",@progbits
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\264B"                 # DW_AT_GNU_pubnames
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	55                      # DW_AT_count
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	55                      # DW_AT_count
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
	.section	.debug_info,"",@progbits
.Lcu_begin0:
	.long	6291                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.debug_abbrev           # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x188c DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.long	.Lline_table_start0     # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_GNU_pubnames
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.long	.Lfunc_end12-.Lfunc_begin0 # DW_AT_high_pc
	.byte	2                       # Abbrev [2] 0x2a:0x459 DW_TAG_subprogram
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.long	.Lfunc_end0-.Lfunc_begin0 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0x3f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc0            # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc1            # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x5d:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc2            # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	8                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x6c:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc3            # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc4            # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x8a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc5            # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x99:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc6            # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	9                       # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xa8:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc7            # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xb7:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc8            # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xc6:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc9            # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	12                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xd5:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc10           # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	13                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xe4:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc11           # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	14                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xf3:0xf DW_TAG_variable
	.long	.Ldebug_loc12           # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x102:0xf DW_TAG_variable
	.long	.Ldebug_loc13           # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x111:0xf DW_TAG_variable
	.long	.Ldebug_loc14           # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x120:0xf DW_TAG_variable
	.long	.Ldebug_loc42           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x12f:0xb DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x13a:0xb DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x145:0x302 DW_TAG_lexical_block
	.quad	.Ltmp10                 # DW_AT_low_pc
	.long	.Ltmp55-.Ltmp10         # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x152:0xc DW_TAG_variable
	.byte	1                       # DW_AT_const_value
	.long	.Linfo_string33         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x15e:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string34         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x16e:0xc DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string35         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x17a:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string36         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x18a:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string37         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x19a:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string38         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x1aa:0xf DW_TAG_variable
	.long	.Ldebug_loc23           # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x1b9:0xb DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x1c4:0x2c DW_TAG_lexical_block
	.quad	.Ltmp10                 # DW_AT_low_pc
	.long	.Ltmp13-.Ltmp10         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x1d1:0xf DW_TAG_variable
	.long	.Ldebug_loc15           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x1e0:0xf DW_TAG_variable
	.long	.Ldebug_loc16           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x1f0:0x2c DW_TAG_lexical_block
	.quad	.Ltmp13                 # DW_AT_low_pc
	.long	.Ltmp16-.Ltmp13         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x1fd:0xf DW_TAG_variable
	.long	.Ldebug_loc17           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x20c:0xf DW_TAG_variable
	.long	.Ldebug_loc18           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x21c:0x2c DW_TAG_lexical_block
	.quad	.Ltmp16                 # DW_AT_low_pc
	.long	.Ltmp19-.Ltmp16         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x229:0xf DW_TAG_variable
	.long	.Ldebug_loc19           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x238:0xf DW_TAG_variable
	.long	.Ldebug_loc20           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x248:0x2c DW_TAG_lexical_block
	.quad	.Ltmp19                 # DW_AT_low_pc
	.long	.Ltmp22-.Ltmp19         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x255:0xf DW_TAG_variable
	.long	.Ldebug_loc21           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x264:0xf DW_TAG_variable
	.long	.Ldebug_loc22           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x274:0xe9 DW_TAG_lexical_block
	.quad	.Ltmp26                 # DW_AT_low_pc
	.long	.Ltmp40-.Ltmp26         # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x281:0xc DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x28d:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x29d:0xf DW_TAG_variable
	.long	.Ldebug_loc28           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x2ac:0x2c DW_TAG_lexical_block
	.quad	.Ltmp26                 # DW_AT_low_pc
	.long	.Ltmp29-.Ltmp26         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x2b9:0xf DW_TAG_variable
	.long	.Ldebug_loc24           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x2c8:0xf DW_TAG_variable
	.long	.Ldebug_loc25           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x2d8:0x2c DW_TAG_lexical_block
	.quad	.Ltmp29                 # DW_AT_low_pc
	.long	.Ltmp32-.Ltmp29         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x2e5:0xf DW_TAG_variable
	.long	.Ldebug_loc26           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x2f4:0xf DW_TAG_variable
	.long	.Ldebug_loc27           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x304:0x2c DW_TAG_lexical_block
	.quad	.Ltmp34                 # DW_AT_low_pc
	.long	.Ltmp37-.Ltmp34         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x311:0xf DW_TAG_variable
	.long	.Ldebug_loc29           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x320:0xf DW_TAG_variable
	.long	.Ldebug_loc30           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x330:0x2c DW_TAG_lexical_block
	.quad	.Ltmp37                 # DW_AT_low_pc
	.long	.Ltmp40-.Ltmp37         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x33d:0xf DW_TAG_variable
	.long	.Ldebug_loc31           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x34c:0xf DW_TAG_variable
	.long	.Ldebug_loc32           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x35d:0xe9 DW_TAG_lexical_block
	.quad	.Ltmp40                 # DW_AT_low_pc
	.long	.Ltmp55-.Ltmp40         # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x36a:0xc DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0x376:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x386:0xf DW_TAG_variable
	.long	.Ldebug_loc37           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x395:0x2c DW_TAG_lexical_block
	.quad	.Ltmp40                 # DW_AT_low_pc
	.long	.Ltmp43-.Ltmp40         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x3a2:0xf DW_TAG_variable
	.long	.Ldebug_loc33           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x3b1:0xf DW_TAG_variable
	.long	.Ldebug_loc34           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x3c1:0x2c DW_TAG_lexical_block
	.quad	.Ltmp43                 # DW_AT_low_pc
	.long	.Ltmp46-.Ltmp43         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x3ce:0xf DW_TAG_variable
	.long	.Ldebug_loc35           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x3dd:0xf DW_TAG_variable
	.long	.Ldebug_loc36           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x3ed:0x2c DW_TAG_lexical_block
	.quad	.Ltmp48                 # DW_AT_low_pc
	.long	.Ltmp51-.Ltmp48         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x3fa:0xf DW_TAG_variable
	.long	.Ldebug_loc38           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x409:0xf DW_TAG_variable
	.long	.Ldebug_loc39           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x419:0x2c DW_TAG_lexical_block
	.quad	.Ltmp51                 # DW_AT_low_pc
	.long	.Ltmp55-.Ltmp51         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x426:0xf DW_TAG_variable
	.long	.Ldebug_loc40           # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x435:0xf DW_TAG_variable
	.long	.Ldebug_loc41           # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x447:0x3b DW_TAG_lexical_block
	.quad	.Ltmp57                 # DW_AT_low_pc
	.long	.Ltmp61-.Ltmp57         # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0x454:0xf DW_TAG_variable
	.long	.Ldebug_loc43           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x463:0xf DW_TAG_variable
	.long	.Ldebug_loc44           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x472:0xf DW_TAG_variable
	.long	.Ldebug_loc45           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x483:0x118 DW_TAG_subprogram
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.long	.Lfunc_end1-.Lfunc_begin1 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string4          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0x498:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc46           # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4a7:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc47           # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4b6:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc48           # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4c5:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc49           # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4d4:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc50           # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4e3:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc51           # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x4f2:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc52           # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x501:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc53           # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x510:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc54           # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	49                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x51f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc55           # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	50                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x52e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc56           # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x53d:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc57           # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x54c:0xf DW_TAG_variable
	.long	.Ldebug_loc58           # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x55b:0xf DW_TAG_variable
	.long	.Ldebug_loc59           # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x56a:0xf DW_TAG_variable
	.long	.Ldebug_loc60           # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x579:0xb DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x584:0xb DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x58f:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x59b:0x120 DW_TAG_subprogram
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.long	.Lfunc_end2-.Lfunc_begin2 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string5          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	68                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0x5b0:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc61           # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	68                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x5bf:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc62           # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	68                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x5ce:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc63           # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	68                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x5dd:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc64           # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x5ec:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc65           # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x5fb:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc66           # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x60a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc67           # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x619:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc68           # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	70                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x628:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc69           # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x637:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc70           # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	72                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x646:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc71           # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	73                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x655:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc72           # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x664:0xf DW_TAG_variable
	.long	.Ldebug_loc73           # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x673:0xf DW_TAG_variable
	.long	.Ldebug_loc74           # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x682:0xf DW_TAG_variable
	.long	.Ldebug_loc75           # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x691:0xf DW_TAG_variable
	.long	.Ldebug_loc76           # DW_AT_location
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x6a0:0xf DW_TAG_variable
	.long	.Ldebug_loc77           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x6af:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x6bb:0x118 DW_TAG_subprogram
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.long	.Lfunc_end3-.Lfunc_begin3 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string6          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0x6d0:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc78           # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x6df:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc79           # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x6ee:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc80           # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x6fd:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc81           # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x70c:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc82           # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x71b:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc83           # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x72a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc84           # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x739:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc85           # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	95                      # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x748:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc86           # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x757:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc87           # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	97                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x766:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc88           # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	98                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x775:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc89           # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	99                      # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x784:0xf DW_TAG_variable
	.long	.Ldebug_loc90           # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x793:0xf DW_TAG_variable
	.long	.Ldebug_loc91           # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x7a2:0xf DW_TAG_variable
	.long	.Ldebug_loc92           # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x7b1:0xb DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x7bc:0xb DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x7c7:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x7d3:0x120 DW_TAG_subprogram
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.long	.Lfunc_end4-.Lfunc_begin4 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string7          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0x7e8:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc93           # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7f7:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc94           # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x806:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc95           # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x815:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc96           # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x824:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc97           # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x833:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc98           # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x842:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc99           # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x851:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc100          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	116                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x860:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc101          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	117                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x86f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc102          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	118                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x87e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc103          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	119                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x88d:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc104          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	120                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x89c:0xf DW_TAG_variable
	.long	.Ldebug_loc105          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x8ab:0xf DW_TAG_variable
	.long	.Ldebug_loc106          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x8ba:0xf DW_TAG_variable
	.long	.Ldebug_loc107          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x8c9:0xf DW_TAG_variable
	.long	.Ldebug_loc108          # DW_AT_location
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x8d8:0xf DW_TAG_variable
	.long	.Ldebug_loc109          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x8e7:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0x8f3:0x45d DW_TAG_subprogram
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.long	.Lfunc_end5-.Lfunc_begin5 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string8          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	141                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0x908:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc110          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	141                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x917:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc111          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	141                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x926:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc112          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	141                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x935:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc113          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x944:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc114          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x953:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc115          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x962:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc116          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x971:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc117          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x980:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc118          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	144                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x98f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc119          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	145                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x99e:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc120          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	146                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x9ad:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc121          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	147                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x9bc:0xf DW_TAG_variable
	.long	.Ldebug_loc122          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	150                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x9cb:0xf DW_TAG_variable
	.long	.Ldebug_loc123          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	150                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x9da:0xf DW_TAG_variable
	.long	.Ldebug_loc124          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	150                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x9e9:0xf DW_TAG_variable
	.long	.Ldebug_loc152          # DW_AT_location
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	150                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x9f8:0xf DW_TAG_variable
	.long	.Ldebug_loc153          # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	150                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0xa07:0xb DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	150                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0xa12:0x302 DW_TAG_lexical_block
	.quad	.Ltmp171                # DW_AT_low_pc
	.long	.Ltmp215-.Ltmp171       # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xa1f:0xc DW_TAG_variable
	.byte	1                       # DW_AT_const_value
	.long	.Linfo_string33         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xa2b:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string34         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xa3b:0xc DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string35         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xa47:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string36         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xa57:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string37         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xa67:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string38         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xa77:0xf DW_TAG_variable
	.long	.Ldebug_loc133          # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0xa86:0xb DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0xa91:0x2c DW_TAG_lexical_block
	.quad	.Ltmp171                # DW_AT_low_pc
	.long	.Ltmp174-.Ltmp171       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xa9e:0xf DW_TAG_variable
	.long	.Ldebug_loc125          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xaad:0xf DW_TAG_variable
	.long	.Ldebug_loc126          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xabd:0x2c DW_TAG_lexical_block
	.quad	.Ltmp174                # DW_AT_low_pc
	.long	.Ltmp177-.Ltmp174       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xaca:0xf DW_TAG_variable
	.long	.Ldebug_loc127          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xad9:0xf DW_TAG_variable
	.long	.Ldebug_loc128          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xae9:0x2c DW_TAG_lexical_block
	.quad	.Ltmp177                # DW_AT_low_pc
	.long	.Ltmp180-.Ltmp177       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xaf6:0xf DW_TAG_variable
	.long	.Ldebug_loc129          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xb05:0xf DW_TAG_variable
	.long	.Ldebug_loc130          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xb15:0x2c DW_TAG_lexical_block
	.quad	.Ltmp180                # DW_AT_low_pc
	.long	.Ltmp183-.Ltmp180       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xb22:0xf DW_TAG_variable
	.long	.Ldebug_loc131          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xb31:0xf DW_TAG_variable
	.long	.Ldebug_loc132          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xb41:0xe9 DW_TAG_lexical_block
	.quad	.Ltmp187                # DW_AT_low_pc
	.long	.Ltmp201-.Ltmp187       # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xb4e:0xc DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xb5a:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xb6a:0xf DW_TAG_variable
	.long	.Ldebug_loc138          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0xb79:0x2c DW_TAG_lexical_block
	.quad	.Ltmp187                # DW_AT_low_pc
	.long	.Ltmp190-.Ltmp187       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xb86:0xf DW_TAG_variable
	.long	.Ldebug_loc134          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xb95:0xf DW_TAG_variable
	.long	.Ldebug_loc135          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xba5:0x2c DW_TAG_lexical_block
	.quad	.Ltmp190                # DW_AT_low_pc
	.long	.Ltmp193-.Ltmp190       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xbb2:0xf DW_TAG_variable
	.long	.Ldebug_loc136          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xbc1:0xf DW_TAG_variable
	.long	.Ldebug_loc137          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xbd1:0x2c DW_TAG_lexical_block
	.quad	.Ltmp195                # DW_AT_low_pc
	.long	.Ltmp198-.Ltmp195       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xbde:0xf DW_TAG_variable
	.long	.Ldebug_loc139          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xbed:0xf DW_TAG_variable
	.long	.Ldebug_loc140          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xbfd:0x2c DW_TAG_lexical_block
	.quad	.Ltmp198                # DW_AT_low_pc
	.long	.Ltmp201-.Ltmp198       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xc0a:0xf DW_TAG_variable
	.long	.Ldebug_loc141          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xc19:0xf DW_TAG_variable
	.long	.Ldebug_loc142          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xc2a:0xe9 DW_TAG_lexical_block
	.quad	.Ltmp201                # DW_AT_low_pc
	.long	.Ltmp215-.Ltmp201       # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xc37:0xc DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	7                       # Abbrev [7] 0xc43:0x10 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xc53:0xf DW_TAG_variable
	.long	.Ldebug_loc147          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0xc62:0x2c DW_TAG_lexical_block
	.quad	.Ltmp201                # DW_AT_low_pc
	.long	.Ltmp204-.Ltmp201       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xc6f:0xf DW_TAG_variable
	.long	.Ldebug_loc143          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xc7e:0xf DW_TAG_variable
	.long	.Ldebug_loc144          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xc8e:0x2c DW_TAG_lexical_block
	.quad	.Ltmp204                # DW_AT_low_pc
	.long	.Ltmp207-.Ltmp204       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xc9b:0xf DW_TAG_variable
	.long	.Ldebug_loc145          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xcaa:0xf DW_TAG_variable
	.long	.Ldebug_loc146          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xcba:0x2c DW_TAG_lexical_block
	.quad	.Ltmp209                # DW_AT_low_pc
	.long	.Ltmp212-.Ltmp209       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xcc7:0xf DW_TAG_variable
	.long	.Ldebug_loc148          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xcd6:0xf DW_TAG_variable
	.long	.Ldebug_loc149          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xce6:0x2c DW_TAG_lexical_block
	.quad	.Ltmp212                # DW_AT_low_pc
	.long	.Ltmp215-.Ltmp212       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xcf3:0xf DW_TAG_variable
	.long	.Ldebug_loc150          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xd02:0xf DW_TAG_variable
	.long	.Ldebug_loc151          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xd14:0x3b DW_TAG_lexical_block
	.quad	.Ltmp220                # DW_AT_low_pc
	.long	.Ltmp224-.Ltmp220       # DW_AT_high_pc
	.byte	4                       # Abbrev [4] 0xd21:0xf DW_TAG_variable
	.long	.Ldebug_loc154          # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	169                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xd30:0xf DW_TAG_variable
	.long	.Ldebug_loc155          # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	169                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xd3f:0xf DW_TAG_variable
	.long	.Ldebug_loc156          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	169                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0xd50:0x11c DW_TAG_subprogram
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.long	.Lfunc_end6-.Lfunc_begin6 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string9          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	185                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0xd65:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc157          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	185                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xd74:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc158          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	185                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xd83:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc159          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	185                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xd92:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc160          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	186                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xda1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc161          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	186                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xdb0:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc162          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	186                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xdbf:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc163          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	186                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xdce:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc164          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	187                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xddd:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc165          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	188                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xdec:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc166          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	189                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xdfb:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc167          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	190                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xe0a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc168          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	191                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xe19:0xf DW_TAG_variable
	.long	.Ldebug_loc169          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	194                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xe28:0xf DW_TAG_variable
	.long	.Ldebug_loc170          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	194                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xe37:0xf DW_TAG_variable
	.long	.Ldebug_loc171          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	194                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xe46:0xf DW_TAG_variable
	.long	.Ldebug_loc172          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	194                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0xe55:0xb DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	194                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0xe60:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	194                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0xe6c:0x120 DW_TAG_subprogram
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.long	.Lfunc_end7-.Lfunc_begin7 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string10         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0xe81:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc173          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xe90:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc174          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xe9f:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc175          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xeae:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc176          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xebd:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc177          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xecc:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc178          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xedb:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc179          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xeea:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc180          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	210                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xef9:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc181          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	211                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xf08:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc182          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xf17:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc183          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	213                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xf26:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc184          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	214                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xf35:0xf DW_TAG_variable
	.long	.Ldebug_loc185          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xf44:0xf DW_TAG_variable
	.long	.Ldebug_loc186          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xf53:0xf DW_TAG_variable
	.long	.Ldebug_loc187          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xf62:0xf DW_TAG_variable
	.long	.Ldebug_loc188          # DW_AT_location
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0xf71:0xf DW_TAG_variable
	.long	.Ldebug_loc189          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0xf80:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0xf8c:0x11c DW_TAG_subprogram
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.long	.Lfunc_end8-.Lfunc_begin8 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string11         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	235                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	3                       # Abbrev [3] 0xfa1:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc190          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	235                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xfb0:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc191          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	235                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xfbf:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc192          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	235                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xfce:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc193          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	236                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xfdd:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc194          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	236                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xfec:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc195          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	236                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0xffb:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc196          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	236                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x100a:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc197          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	237                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x1019:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc198          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	238                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x1028:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc199          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	239                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x1037:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc200          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	240                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x1046:0xf DW_TAG_formal_parameter
	.long	.Ldebug_loc201          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	241                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x1055:0xf DW_TAG_variable
	.long	.Ldebug_loc202          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x1064:0xf DW_TAG_variable
	.long	.Ldebug_loc203          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x1073:0xf DW_TAG_variable
	.long	.Ldebug_loc204          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	4                       # Abbrev [4] 0x1082:0xf DW_TAG_variable
	.long	.Ldebug_loc205          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x1091:0xb DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	5                       # Abbrev [5] 0x109c:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x10a8:0x133 DW_TAG_subprogram
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.long	.Lfunc_end9-.Lfunc_begin9 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string12         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	258                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	9                       # Abbrev [9] 0x10be:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc206          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	258                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x10ce:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc207          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	258                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x10de:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc208          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	258                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x10ee:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc209          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	259                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x10fe:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc210          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	259                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x110e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc211          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	259                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x111e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc212          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	259                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x112e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc213          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	260                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x113e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc214          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	261                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x114e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc215          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	262                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x115e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc216          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	263                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x116e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc217          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	264                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x117e:0x10 DW_TAG_variable
	.long	.Ldebug_loc218          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x118e:0x10 DW_TAG_variable
	.long	.Ldebug_loc219          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x119e:0x10 DW_TAG_variable
	.long	.Ldebug_loc220          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x11ae:0x10 DW_TAG_variable
	.long	.Ldebug_loc221          # DW_AT_location
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x11be:0x10 DW_TAG_variable
	.long	.Ldebug_loc222          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x11ce:0xc DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x11db:0x453 DW_TAG_subprogram
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.long	.Lfunc_end10-.Lfunc_begin10 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string13         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	285                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	9                       # Abbrev [9] 0x11f1:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc223          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	285                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1201:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc224          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	285                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1211:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc225          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	285                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1221:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc226          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	286                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1231:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc227          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	286                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1241:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc228          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	286                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1251:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc229          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	286                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1261:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc230          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	287                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1271:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc231          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	288                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1281:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc232          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	289                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1291:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc233          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x12a1:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc234          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	291                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x12b1:0x10 DW_TAG_variable
	.long	.Ldebug_loc235          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	295                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x12c1:0x10 DW_TAG_variable
	.long	.Ldebug_loc236          # DW_AT_location
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	295                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x12d1:0x10 DW_TAG_variable
	.long	.Ldebug_loc237          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	295                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x12e1:0xc DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	295                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x12ed:0xc DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	295                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x12f9:0xc DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	295                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x1305:0x328 DW_TAG_lexical_block
	.quad	.Ltmp336                # DW_AT_low_pc
	.long	.Ltmp380-.Ltmp336       # DW_AT_high_pc
	.byte	12                      # Abbrev [12] 0x1312:0xd DW_TAG_variable
	.byte	1                       # DW_AT_const_value
	.long	.Linfo_string33         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x131f:0x11 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string34         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1330:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string35         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x133d:0x11 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string36         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x134e:0x11 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string37         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x135f:0x11 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string38         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1370:0x10 DW_TAG_variable
	.long	.Ldebug_loc246          # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x1380:0xc DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x138c:0x2e DW_TAG_lexical_block
	.quad	.Ltmp336                # DW_AT_low_pc
	.long	.Ltmp339-.Ltmp336       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x1399:0x10 DW_TAG_variable
	.long	.Ldebug_loc238          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x13a9:0x10 DW_TAG_variable
	.long	.Ldebug_loc239          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x13ba:0x2e DW_TAG_lexical_block
	.quad	.Ltmp339                # DW_AT_low_pc
	.long	.Ltmp342-.Ltmp339       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x13c7:0x10 DW_TAG_variable
	.long	.Ldebug_loc240          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x13d7:0x10 DW_TAG_variable
	.long	.Ldebug_loc241          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x13e8:0x2e DW_TAG_lexical_block
	.quad	.Ltmp342                # DW_AT_low_pc
	.long	.Ltmp345-.Ltmp342       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x13f5:0x10 DW_TAG_variable
	.long	.Ldebug_loc242          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1405:0x10 DW_TAG_variable
	.long	.Ldebug_loc243          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x1416:0x2e DW_TAG_lexical_block
	.quad	.Ltmp345                # DW_AT_low_pc
	.long	.Ltmp348-.Ltmp345       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x1423:0x10 DW_TAG_variable
	.long	.Ldebug_loc244          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1433:0x10 DW_TAG_variable
	.long	.Ldebug_loc245          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x1444:0xf4 DW_TAG_lexical_block
	.quad	.Ltmp352                # DW_AT_low_pc
	.long	.Ltmp366-.Ltmp352       # DW_AT_high_pc
	.byte	12                      # Abbrev [12] 0x1451:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x145e:0x11 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x146f:0x10 DW_TAG_variable
	.long	.Ldebug_loc251          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x147f:0x2e DW_TAG_lexical_block
	.quad	.Ltmp352                # DW_AT_low_pc
	.long	.Ltmp355-.Ltmp352       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x148c:0x10 DW_TAG_variable
	.long	.Ldebug_loc247          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x149c:0x10 DW_TAG_variable
	.long	.Ldebug_loc248          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x14ad:0x2e DW_TAG_lexical_block
	.quad	.Ltmp355                # DW_AT_low_pc
	.long	.Ltmp358-.Ltmp355       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x14ba:0x10 DW_TAG_variable
	.long	.Ldebug_loc249          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x14ca:0x10 DW_TAG_variable
	.long	.Ldebug_loc250          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x14db:0x2e DW_TAG_lexical_block
	.quad	.Ltmp360                # DW_AT_low_pc
	.long	.Ltmp363-.Ltmp360       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x14e8:0x10 DW_TAG_variable
	.long	.Ldebug_loc252          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x14f8:0x10 DW_TAG_variable
	.long	.Ldebug_loc253          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x1509:0x2e DW_TAG_lexical_block
	.quad	.Ltmp363                # DW_AT_low_pc
	.long	.Ltmp366-.Ltmp363       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x1516:0x10 DW_TAG_variable
	.long	.Ldebug_loc254          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1526:0x10 DW_TAG_variable
	.long	.Ldebug_loc255          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x1538:0xf4 DW_TAG_lexical_block
	.quad	.Ltmp366                # DW_AT_low_pc
	.long	.Ltmp380-.Ltmp366       # DW_AT_high_pc
	.byte	12                      # Abbrev [12] 0x1545:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1552:0x11 DW_TAG_variable
	.ascii	"\377\377\377\377\017"  # DW_AT_const_value
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1563:0x10 DW_TAG_variable
	.long	.Ldebug_loc260          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	6                       # Abbrev [6] 0x1573:0x2e DW_TAG_lexical_block
	.quad	.Ltmp366                # DW_AT_low_pc
	.long	.Ltmp369-.Ltmp366       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x1580:0x10 DW_TAG_variable
	.long	.Ldebug_loc256          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1590:0x10 DW_TAG_variable
	.long	.Ldebug_loc257          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x15a1:0x2e DW_TAG_lexical_block
	.quad	.Ltmp369                # DW_AT_low_pc
	.long	.Ltmp372-.Ltmp369       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x15ae:0x10 DW_TAG_variable
	.long	.Ldebug_loc258          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x15be:0x10 DW_TAG_variable
	.long	.Ldebug_loc259          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x15cf:0x2e DW_TAG_lexical_block
	.quad	.Ltmp374                # DW_AT_low_pc
	.long	.Ltmp377-.Ltmp374       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x15dc:0x10 DW_TAG_variable
	.long	.Ldebug_loc261          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x15ec:0x10 DW_TAG_variable
	.long	.Ldebug_loc262          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0x15fd:0x2e DW_TAG_lexical_block
	.quad	.Ltmp377                # DW_AT_low_pc
	.long	.Ltmp380-.Ltmp377       # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x160a:0x10 DW_TAG_variable
	.long	.Ldebug_loc263          # DW_AT_location
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x161a:0x10 DW_TAG_variable
	.long	.Ldebug_loc264          # DW_AT_location
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	8                       # Abbrev [8] 0x162e:0x123 DW_TAG_subprogram
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.long	.Lfunc_end11-.Lfunc_begin11 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string14         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	315                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	9                       # Abbrev [9] 0x1644:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc265          # DW_AT_location
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	315                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1654:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc266          # DW_AT_location
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	315                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1664:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc267          # DW_AT_location
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	316                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1674:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc268          # DW_AT_location
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1684:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc269          # DW_AT_location
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	318                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1694:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc270          # DW_AT_location
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	319                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x16a4:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc271          # DW_AT_location
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	320                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x16b4:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc272          # DW_AT_location
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	321                     # DW_AT_decl_line
	.long	6219                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x16c4:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc273          # DW_AT_location
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	322                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x16d4:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc274          # DW_AT_location
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	323                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x16e4:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc275          # DW_AT_location
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	324                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x16f4:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc276          # DW_AT_location
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	325                     # DW_AT_decl_line
	.long	6224                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1704:0x10 DW_TAG_variable
	.long	.Ldebug_loc277          # DW_AT_location
	.long	.Linfo_string30         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x1714:0xc DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x1720:0xc DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x172c:0xc DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x1738:0xc DW_TAG_variable
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	11                      # Abbrev [11] 0x1744:0xc DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	332                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x1751:0xf3 DW_TAG_subprogram
	.quad	.Lfunc_begin12          # DW_AT_low_pc
	.long	.Lfunc_end12-.Lfunc_begin12 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string15         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	352                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
                                        # DW_AT_external
	.byte	14                      # Abbrev [14] 0x176b:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\320o"
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	353                     # DW_AT_decl_line
	.long	6236                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x177b:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\320_"
	.long	.Linfo_string53         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	354                     # DW_AT_decl_line
	.long	6236                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x178b:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\320Q"
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	6256                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x179b:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\320C"
	.long	.Linfo_string28         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	426                     # DW_AT_decl_line
	.long	6256                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x17ab:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\320\265\177"
	.long	.Linfo_string27         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	491                     # DW_AT_decl_line
	.long	6256                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x17bc:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\320\247\177"
	.long	.Linfo_string29         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	556                     # DW_AT_decl_line
	.long	6256                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x17cd:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\320\227\177"
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	622                     # DW_AT_decl_line
	.long	6236                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x17de:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\320\207\177"
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	623                     # DW_AT_decl_line
	.long	6236                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x17ef:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\260\207\177"
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	624                     # DW_AT_decl_line
	.long	6269                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x1800:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\220\207\177"
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	625                     # DW_AT_decl_line
	.long	6269                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x1811:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\220\365~"
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	626                     # DW_AT_decl_line
	.long	6281                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x1822:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\360\364~"
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	627                     # DW_AT_decl_line
	.long	6269                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1833:0x10 DW_TAG_variable
	.long	.Ldebug_loc278          # DW_AT_location
	.long	.Linfo_string32         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	355                     # DW_AT_decl_line
	.long	6212                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0x1844:0x7 DW_TAG_base_type
	.long	.Linfo_string16         # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	16                      # Abbrev [16] 0x184b:0x5 DW_TAG_pointer_type
	.long	6212                    # DW_AT_type
	.byte	16                      # Abbrev [16] 0x1850:0x5 DW_TAG_pointer_type
	.long	6229                    # DW_AT_type
	.byte	15                      # Abbrev [15] 0x1855:0x7 DW_TAG_base_type
	.long	.Linfo_string26         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	17                      # Abbrev [17] 0x185c:0xd DW_TAG_array_type
	.long	6212                    # DW_AT_type
	.byte	18                      # Abbrev [18] 0x1861:0x7 DW_TAG_subrange_type
	.long	6249                    # DW_AT_type
	.short	512                     # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	19                      # Abbrev [19] 0x1869:0x7 DW_TAG_base_type
	.long	.Linfo_string52         # DW_AT_name
	.byte	8                       # DW_AT_byte_size
	.byte	7                       # DW_AT_encoding
	.byte	17                      # Abbrev [17] 0x1870:0xd DW_TAG_array_type
	.long	6229                    # DW_AT_type
	.byte	18                      # Abbrev [18] 0x1875:0x7 DW_TAG_subrange_type
	.long	6249                    # DW_AT_type
	.short	448                     # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x187d:0xc DW_TAG_array_type
	.long	6212                    # DW_AT_type
	.byte	20                      # Abbrev [20] 0x1882:0x6 DW_TAG_subrange_type
	.long	6249                    # DW_AT_type
	.byte	8                       # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x1889:0xd DW_TAG_array_type
	.long	6212                    # DW_AT_type
	.byte	18                      # Abbrev [18] 0x188e:0x7 DW_TAG_subrange_type
	.long	6249                    # DW_AT_type
	.short	576                     # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.section	.debug_ranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
.Lcu_macro_begin0:
	.byte	0                       # End Of Macro List Mark
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end0-.LpubNames_begin0 # Length of Public Names Info
.LpubNames_begin0:
	.short	2                       # DWARF Version
	.long	.Lcu_begin0             # Offset of Compilation Unit Info
	.long	6295                    # Compilation Unit Length
	.long	5969                    # DIE offset
	.asciz	"main"                  # External Name
	.long	5678                    # DIE offset
	.asciz	"fft1D_512"             # External Name
	.long	42                      # DIE offset
	.asciz	"step1"                 # External Name
	.long	1155                    # DIE offset
	.asciz	"step2"                 # External Name
	.long	1435                    # DIE offset
	.asciz	"step3"                 # External Name
	.long	1723                    # DIE offset
	.asciz	"step4"                 # External Name
	.long	2003                    # DIE offset
	.asciz	"step5"                 # External Name
	.long	2291                    # DIE offset
	.asciz	"step6"                 # External Name
	.long	3408                    # DIE offset
	.asciz	"step7"                 # External Name
	.long	3692                    # DIE offset
	.asciz	"step8"                 # External Name
	.long	3980                    # DIE offset
	.asciz	"step9"                 # External Name
	.long	4264                    # DIE offset
	.asciz	"step10"                # External Name
	.long	4571                    # DIE offset
	.asciz	"step11"                # External Name
	.long	0                       # End Mark
.LpubNames_end0:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end0-.LpubTypes_begin0 # Length of Public Types Info
.LpubTypes_begin0:
	.short	2                       # DWARF Version
	.long	.Lcu_begin0             # Offset of Compilation Unit Info
	.long	6295                    # Compilation Unit Length
	.long	6229                    # DIE offset
	.asciz	"float"                 # External Name
	.long	6212                    # DIE offset
	.asciz	"int"                   # External Name
	.long	0                       # End Mark
.LpubTypes_end0:

	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
