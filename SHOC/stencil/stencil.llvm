; ModuleID = 'stencil.c'
source_filename = "stencil.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%d, %d, %d,%d\0A \00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"Success!!\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define void @stencil(i32* nocapture readonly %orig, i32* nocapture %sol, i32* nocapture readonly %filter) local_unnamed_addr #0 !dbg !10 {
  call void @llvm.dbg.value(metadata i32* %orig, metadata !16, metadata !DIExpression()), !dbg !31
  call void @llvm.dbg.value(metadata i32* %sol, metadata !17, metadata !DIExpression()), !dbg !32
  call void @llvm.dbg.value(metadata i32* %filter, metadata !18, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 0, metadata !19, metadata !DIExpression()), !dbg !34
  %arrayidx8 = getelementptr inbounds i32, i32* %filter, i64 1
  %arrayidx16 = getelementptr inbounds i32, i32* %filter, i64 2
  %arrayidx25 = getelementptr inbounds i32, i32* %filter, i64 3
  %arrayidx33 = getelementptr inbounds i32, i32* %filter, i64 4
  %arrayidx41 = getelementptr inbounds i32, i32* %filter, i64 5
  %arrayidx50 = getelementptr inbounds i32, i32* %filter, i64 6
  %arrayidx58 = getelementptr inbounds i32, i32* %filter, i64 7
  %arrayidx66 = getelementptr inbounds i32, i32* %filter, i64 8
  br label %1, !dbg !35

; <label>:1:                                      ; preds = %31, %0
  %indvars.iv174 = phi i64 [ 0, %0 ], [ %indvars.iv.next175, %31 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !20, metadata !DIExpression()), !dbg !37
  call void @llvm.dbg.value(metadata i64 %indvars.iv174, metadata !19, metadata !DIExpression()), !dbg !34
  %2 = shl nsw i64 %indvars.iv174, 5
  br label %3, !dbg !38

; <label>:3:                                      ; preds = %3, %1
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %3 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !27, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.value(metadata i32 0, metadata !28, metadata !DIExpression()), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, metadata !26, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !45
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !20, metadata !DIExpression()), !dbg !37
  %4 = add nuw nsw i64 %indvars.iv, %2, !dbg !46
  %5 = load i32, i32* %filter, align 4, !dbg !49, !tbaa !50
  %arrayidx3 = getelementptr inbounds i32, i32* %orig, i64 %4, !dbg !54
  %6 = load i32, i32* %arrayidx3, align 4, !dbg !54, !tbaa !50
  %mul4 = mul nsw i32 %6, %5, !dbg !55
  call void @llvm.dbg.value(metadata i32 %mul4, metadata !27, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.value(metadata i32 %mul4, metadata !26, metadata !DIExpression()), !dbg !44
  %7 = add nuw nsw i64 %4, 1, !dbg !56
  call void @llvm.dbg.value(metadata i32 1, metadata !25, metadata !DIExpression()), !dbg !45
  %8 = load i32, i32* %arrayidx8, align 4, !dbg !57, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %orig, i64 %7, !dbg !58
  %9 = load i32, i32* %arrayidx10, align 4, !dbg !58, !tbaa !50
  %mul11 = mul nsw i32 %9, %8, !dbg !59
  call void @llvm.dbg.value(metadata i32 %mul11, metadata !27, metadata !DIExpression()), !dbg !42
  %add12 = add nsw i32 %mul11, %mul4, !dbg !60
  call void @llvm.dbg.value(metadata i32 %add12, metadata !26, metadata !DIExpression()), !dbg !44
  %10 = add nuw nsw i64 %4, 2, !dbg !61
  call void @llvm.dbg.value(metadata i32 2, metadata !25, metadata !DIExpression()), !dbg !45
  %11 = load i32, i32* %arrayidx16, align 4, !dbg !62, !tbaa !50
  %arrayidx18 = getelementptr inbounds i32, i32* %orig, i64 %10, !dbg !63
  %12 = load i32, i32* %arrayidx18, align 4, !dbg !63, !tbaa !50
  %mul19 = mul nsw i32 %12, %11, !dbg !64
  call void @llvm.dbg.value(metadata i32 %mul19, metadata !27, metadata !DIExpression()), !dbg !42
  %add20 = add nsw i32 %add12, %mul19, !dbg !65
  call void @llvm.dbg.value(metadata i32 %add20, metadata !26, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 3, metadata !25, metadata !DIExpression()), !dbg !45
  %13 = add nuw nsw i64 %4, 32, !dbg !66
  %14 = load i32, i32* %arrayidx25, align 4, !dbg !67, !tbaa !50
  %arrayidx27 = getelementptr inbounds i32, i32* %orig, i64 %13, !dbg !68
  %15 = load i32, i32* %arrayidx27, align 4, !dbg !68, !tbaa !50
  %mul28 = mul nsw i32 %15, %14, !dbg !69
  call void @llvm.dbg.value(metadata i32 %mul28, metadata !27, metadata !DIExpression()), !dbg !42
  %add29 = add nsw i32 %add20, %mul28, !dbg !70
  call void @llvm.dbg.value(metadata i32 %add29, metadata !26, metadata !DIExpression()), !dbg !44
  %16 = add nuw nsw i64 %4, 33, !dbg !71
  call void @llvm.dbg.value(metadata i32 4, metadata !25, metadata !DIExpression()), !dbg !45
  %17 = load i32, i32* %arrayidx33, align 4, !dbg !72, !tbaa !50
  %arrayidx35 = getelementptr inbounds i32, i32* %orig, i64 %16, !dbg !73
  %18 = load i32, i32* %arrayidx35, align 4, !dbg !73, !tbaa !50
  %mul36 = mul nsw i32 %18, %17, !dbg !74
  call void @llvm.dbg.value(metadata i32 %mul36, metadata !27, metadata !DIExpression()), !dbg !42
  %add37 = add nsw i32 %add29, %mul36, !dbg !75
  call void @llvm.dbg.value(metadata i32 %add37, metadata !26, metadata !DIExpression()), !dbg !44
  %19 = add nuw nsw i64 %4, 34, !dbg !76
  call void @llvm.dbg.value(metadata i32 5, metadata !25, metadata !DIExpression()), !dbg !45
  %20 = load i32, i32* %arrayidx41, align 4, !dbg !77, !tbaa !50
  %arrayidx43 = getelementptr inbounds i32, i32* %orig, i64 %19, !dbg !78
  %21 = load i32, i32* %arrayidx43, align 4, !dbg !78, !tbaa !50
  %mul44 = mul nsw i32 %21, %20, !dbg !79
  call void @llvm.dbg.value(metadata i32 %mul44, metadata !27, metadata !DIExpression()), !dbg !42
  %add45 = add nsw i32 %add37, %mul44, !dbg !80
  call void @llvm.dbg.value(metadata i32 %add45, metadata !26, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 6, metadata !25, metadata !DIExpression()), !dbg !45
  %22 = add nuw nsw i64 %4, 64, !dbg !81
  %23 = load i32, i32* %arrayidx50, align 4, !dbg !82, !tbaa !50
  %arrayidx52 = getelementptr inbounds i32, i32* %orig, i64 %22, !dbg !83
  %24 = load i32, i32* %arrayidx52, align 4, !dbg !83, !tbaa !50
  %mul53 = mul nsw i32 %24, %23, !dbg !84
  call void @llvm.dbg.value(metadata i32 %mul53, metadata !27, metadata !DIExpression()), !dbg !42
  %add54 = add nsw i32 %add45, %mul53, !dbg !85
  call void @llvm.dbg.value(metadata i32 %add54, metadata !26, metadata !DIExpression()), !dbg !44
  %25 = add nuw nsw i64 %4, 65, !dbg !86
  call void @llvm.dbg.value(metadata i32 7, metadata !25, metadata !DIExpression()), !dbg !45
  %26 = load i32, i32* %arrayidx58, align 4, !dbg !87, !tbaa !50
  %arrayidx60 = getelementptr inbounds i32, i32* %orig, i64 %25, !dbg !88
  %27 = load i32, i32* %arrayidx60, align 4, !dbg !88, !tbaa !50
  %mul61 = mul nsw i32 %27, %26, !dbg !89
  call void @llvm.dbg.value(metadata i32 %mul61, metadata !27, metadata !DIExpression()), !dbg !42
  %add62 = add nsw i32 %add54, %mul61, !dbg !90
  call void @llvm.dbg.value(metadata i32 %add62, metadata !26, metadata !DIExpression()), !dbg !44
  %28 = add nuw nsw i64 %4, 66, !dbg !91
  call void @llvm.dbg.value(metadata i32 8, metadata !25, metadata !DIExpression()), !dbg !45
  %29 = load i32, i32* %arrayidx66, align 4, !dbg !92, !tbaa !50
  %arrayidx68 = getelementptr inbounds i32, i32* %orig, i64 %28, !dbg !93
  %30 = load i32, i32* %arrayidx68, align 4, !dbg !93, !tbaa !50
  %mul69 = mul nsw i32 %30, %29, !dbg !94
  call void @llvm.dbg.value(metadata i32 %mul69, metadata !27, metadata !DIExpression()), !dbg !42
  %add70 = add nsw i32 %add62, %mul69, !dbg !95
  call void @llvm.dbg.value(metadata i32 %add70, metadata !26, metadata !DIExpression()), !dbg !44
  %arrayidx74 = getelementptr inbounds i32, i32* %sol, i64 %4, !dbg !96
  store i32 %add70, i32* %arrayidx74, align 4, !dbg !97, !tbaa !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !98
  %exitcond = icmp eq i64 %indvars.iv.next, 30, !dbg !99
  br i1 %exitcond, label %31, label %3, !dbg !38, !llvm.loop !100

; <label>:31:                                     ; preds = %3
  %indvars.iv.next175 = add nuw nsw i64 %indvars.iv174, 1, !dbg !102
  %exitcond177 = icmp eq i64 %indvars.iv.next175, 30, !dbg !103
  br i1 %exitcond177, label %32, label %1, !dbg !35, !llvm.loop !104

; <label>:32:                                     ; preds = %31
  ret void, !dbg !106
}

; Function Attrs: noinline nounwind uwtable
define i32 @main() local_unnamed_addr #0 !dbg !107 {
  tail call void @srand(i32 8650341) #4, !dbg !119
  call void @llvm.dbg.value(metadata i32 2147483646, metadata !117, metadata !DIExpression()), !dbg !120
  call void @llvm.dbg.value(metadata i32 0, metadata !118, metadata !DIExpression()), !dbg !121
  %call = tail call noalias i8* @malloc(i64 4096) #4, !dbg !122
  %1 = bitcast i8* %call to i32*, !dbg !123
  call void @llvm.dbg.value(metadata i32* %1, metadata !111, metadata !DIExpression()), !dbg !124
  %call1 = tail call noalias i8* @malloc(i64 4096) #4, !dbg !125
  %2 = bitcast i8* %call1 to i32*, !dbg !126
  call void @llvm.dbg.value(metadata i32* %2, metadata !112, metadata !DIExpression()), !dbg !127
  %call2 = tail call noalias i8* @malloc(i64 36) #4, !dbg !128
  call void @llvm.dbg.value(metadata i32* %9, metadata !113, metadata !DIExpression()), !dbg !129
  call void @llvm.dbg.value(metadata i32 0, metadata !114, metadata !DIExpression()), !dbg !130
  br label %3, !dbg !131

; <label>:3:                                      ; preds = %7, %0
  %indvars.iv116 = phi i64 [ 0, %0 ], [ %indvars.iv.next117, %7 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !115, metadata !DIExpression()), !dbg !133
  call void @llvm.dbg.value(metadata i64 %indvars.iv116, metadata !114, metadata !DIExpression()), !dbg !130
  %4 = shl i64 %indvars.iv116, 5
  br label %5, !dbg !134

; <label>:5:                                      ; preds = %5, %3
  %indvars.iv112 = phi i64 [ 0, %3 ], [ %indvars.iv.next113, %5 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv112, metadata !115, metadata !DIExpression()), !dbg !133
  %call4 = tail call i32 @rand() #4, !dbg !138
  %conv = sitofp i32 %call4 to double, !dbg !138
  %mul6 = fmul double %conv, 0x41DFFFFFFF800000, !dbg !141
  %div = fdiv double %mul6, 0x41DFFFFFFFC00000, !dbg !142
  %add = fadd double %div, 0.000000e+00, !dbg !143
  %conv8 = fptosi double %add to i32, !dbg !144
  %6 = add nuw nsw i64 %indvars.iv112, %4, !dbg !145
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %6, !dbg !146
  store i32 %conv8, i32* %arrayidx, align 4, !dbg !147, !tbaa !50
  %arrayidx14 = getelementptr inbounds i32, i32* %2, i64 %6, !dbg !148
  store i32 0, i32* %arrayidx14, align 4, !dbg !149, !tbaa !50
  %indvars.iv.next113 = add nuw nsw i64 %indvars.iv112, 1, !dbg !150
  %exitcond115 = icmp eq i64 %indvars.iv.next113, 32, !dbg !151
  br i1 %exitcond115, label %7, label %5, !dbg !134, !llvm.loop !152

; <label>:7:                                      ; preds = %5
  %indvars.iv.next117 = add nuw nsw i64 %indvars.iv116, 1, !dbg !154
  %exitcond119 = icmp eq i64 %indvars.iv.next117, 32, !dbg !155
  br i1 %exitcond119, label %8, label %3, !dbg !131, !llvm.loop !156

; <label>:8:                                      ; preds = %7
  %9 = bitcast i8* %call2 to i32*, !dbg !158
  call void @llvm.dbg.value(metadata i32 0, metadata !114, metadata !DIExpression()), !dbg !130
  br label %10, !dbg !159

; <label>:10:                                     ; preds = %14, %8
  %indvars.iv108 = phi i64 [ 0, %8 ], [ %indvars.iv.next109, %14 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !115, metadata !DIExpression()), !dbg !133
  call void @llvm.dbg.value(metadata i64 %indvars.iv108, metadata !114, metadata !DIExpression()), !dbg !130
  %11 = mul nuw nsw i64 %indvars.iv108, 3
  br label %12, !dbg !161

; <label>:12:                                     ; preds = %12, %10
  %indvars.iv104 = phi i64 [ 0, %10 ], [ %indvars.iv.next105, %12 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv104, metadata !115, metadata !DIExpression()), !dbg !133
  %call20 = tail call i32 @rand() #4, !dbg !165
  %conv21 = sitofp i32 %call20 to double, !dbg !165
  %mul25 = fmul double %conv21, 0x41DFFFFFFF800000, !dbg !168
  %div26 = fdiv double %mul25, 0x41DFFFFFFFC00000, !dbg !169
  %add28 = fadd double %div26, 0.000000e+00, !dbg !170
  %conv29 = fptosi double %add28 to i32, !dbg !171
  %13 = add nuw nsw i64 %indvars.iv104, %11, !dbg !172
  %arrayidx33 = getelementptr inbounds i32, i32* %9, i64 %13, !dbg !173
  store i32 %conv29, i32* %arrayidx33, align 4, !dbg !174, !tbaa !50
  %indvars.iv.next105 = add nuw nsw i64 %indvars.iv104, 1, !dbg !175
  %exitcond107 = icmp eq i64 %indvars.iv.next105, 3, !dbg !176
  br i1 %exitcond107, label %14, label %12, !dbg !161, !llvm.loop !177

; <label>:14:                                     ; preds = %12
  %indvars.iv.next109 = add nuw nsw i64 %indvars.iv108, 1, !dbg !179
  %exitcond111 = icmp eq i64 %indvars.iv.next109, 3, !dbg !180
  br i1 %exitcond111, label %15, label %10, !dbg !159, !llvm.loop !181

; <label>:15:                                     ; preds = %14
  tail call void @stencil(i32* %1, i32* %2, i32* nonnull %9) #5, !dbg !183
  call void @llvm.dbg.value(metadata i32 0, metadata !114, metadata !DIExpression()), !dbg !130
  br label %16, !dbg !184

; <label>:16:                                     ; preds = %24, %15
  %indvars.iv100 = phi i64 [ 0, %15 ], [ %indvars.iv.next101, %24 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !115, metadata !DIExpression()), !dbg !133
  call void @llvm.dbg.value(metadata i64 %indvars.iv100, metadata !114, metadata !DIExpression()), !dbg !130
  %17 = shl i64 %indvars.iv100, 5
  %18 = trunc i64 %indvars.iv100 to i32
  br label %19, !dbg !186

; <label>:19:                                     ; preds = %19, %16
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %19 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !115, metadata !DIExpression()), !dbg !133
  %20 = add nuw nsw i64 %indvars.iv, %17, !dbg !190
  %arrayidx46 = getelementptr inbounds i32, i32* %1, i64 %20, !dbg !193
  %21 = load i32, i32* %arrayidx46, align 4, !dbg !193, !tbaa !50
  %arrayidx50 = getelementptr inbounds i32, i32* %2, i64 %20, !dbg !194
  %22 = load i32, i32* %arrayidx50, align 4, !dbg !194, !tbaa !50
  %23 = trunc i64 %indvars.iv to i32, !dbg !195
  %call51 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 %18, i32 %23, i32 %21, i32 %22) #4, !dbg !195
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !196
  %exitcond = icmp eq i64 %indvars.iv.next, 4, !dbg !197
  br i1 %exitcond, label %24, label %19, !dbg !186, !llvm.loop !198

; <label>:24:                                     ; preds = %19
  %indvars.iv.next101 = add nuw nsw i64 %indvars.iv100, 1, !dbg !200
  %exitcond103 = icmp eq i64 %indvars.iv.next101, 4, !dbg !201
  br i1 %exitcond103, label %25, label %16, !dbg !184, !llvm.loop !202

; <label>:25:                                     ; preds = %24
  %call54 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0)) #4, !dbg !204
  ret i32 0, !dbg !205
}

; Function Attrs: nounwind
declare void @srand(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #1

declare i32 @printf(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nounwind }
attributes #5 = { nobuiltin }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 6.0.0 (tags/RELEASE_600/final)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "stencil.c", directory: "/workspace/gem5-aladdin/src/aladdin/SHOC/stencil")
!2 = !{}
!3 = !{!4, !5}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !{i32 2, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
!10 = distinct !DISubprogram(name: "stencil", scope: !1, file: !1, line: 7, type: !11, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !15)
!11 = !DISubroutineType(types: !12)
!12 = !{null, !4, !4, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!16 = !DILocalVariable(name: "orig", arg: 1, scope: !10, file: !1, line: 7, type: !4)
!17 = !DILocalVariable(name: "sol", arg: 2, scope: !10, file: !1, line: 7, type: !4)
!18 = !DILocalVariable(name: "filter", arg: 3, scope: !10, file: !1, line: 7, type: !13)
!19 = !DILocalVariable(name: "i", scope: !10, file: !1, line: 12, type: !5)
!20 = !DILocalVariable(name: "j", scope: !10, file: !1, line: 12, type: !5)
!21 = !DILocalVariable(name: "k1", scope: !10, file: !1, line: 12, type: !5)
!22 = !DILocalVariable(name: "k2", scope: !10, file: !1, line: 12, type: !5)
!23 = !DILocalVariable(name: "sidx", scope: !10, file: !1, line: 12, type: !5)
!24 = !DILocalVariable(name: "didx", scope: !10, file: !1, line: 12, type: !5)
!25 = !DILocalVariable(name: "fidx", scope: !10, file: !1, line: 12, type: !5)
!26 = !DILocalVariable(name: "tmp", scope: !10, file: !1, line: 13, type: !5)
!27 = !DILocalVariable(name: "Si", scope: !10, file: !1, line: 13, type: !5)
!28 = !DILocalVariable(name: "SI", scope: !10, file: !1, line: 13, type: !5)
!29 = !DILocalVariable(name: "Di", scope: !10, file: !1, line: 13, type: !5)
!30 = !DILocalVariable(name: "Ti", scope: !10, file: !1, line: 13, type: !5)
!31 = !DILocation(line: 7, column: 20, scope: !10)
!32 = !DILocation(line: 7, column: 31, scope: !10)
!33 = !DILocation(line: 7, column: 47, scope: !10)
!34 = !DILocation(line: 12, column: 6, scope: !10)
!35 = !DILocation(line: 14, column: 9, scope: !36)
!36 = distinct !DILexicalBlock(scope: !10, file: !1, line: 14, column: 9)
!37 = !DILocation(line: 12, column: 9, scope: !10)
!38 = !DILocation(line: 15, column: 11, scope: !39)
!39 = distinct !DILexicalBlock(scope: !40, file: !1, line: 15, column: 11)
!40 = distinct !DILexicalBlock(scope: !41, file: !1, line: 14, column: 31)
!41 = distinct !DILexicalBlock(scope: !36, file: !1, line: 14, column: 9)
!42 = !DILocation(line: 13, column: 11, scope: !10)
!43 = !DILocation(line: 13, column: 15, scope: !10)
!44 = !DILocation(line: 13, column: 6, scope: !10)
!45 = !DILocation(line: 12, column: 31, scope: !10)
!46 = !DILocation(line: 21, column: 14, scope: !47)
!47 = distinct !DILexicalBlock(scope: !48, file: !1, line: 15, column: 33)
!48 = distinct !DILexicalBlock(scope: !39, file: !1, line: 15, column: 11)
!49 = !DILocation(line: 24, column: 9, scope: !47)
!50 = !{!51, !51, i64 0}
!51 = !{!"int", !52, i64 0}
!52 = !{!"omnipotent char", !53, i64 0}
!53 = !{!"Simple C/C++ TBAA"}
!54 = !DILocation(line: 24, column: 24, scope: !47)
!55 = !DILocation(line: 24, column: 22, scope: !47)
!56 = !DILocation(line: 26, column: 9, scope: !47)
!57 = !DILocation(line: 29, column: 9, scope: !47)
!58 = !DILocation(line: 29, column: 24, scope: !47)
!59 = !DILocation(line: 29, column: 22, scope: !47)
!60 = !DILocation(line: 30, column: 14, scope: !47)
!61 = !DILocation(line: 31, column: 9, scope: !47)
!62 = !DILocation(line: 34, column: 9, scope: !47)
!63 = !DILocation(line: 34, column: 24, scope: !47)
!64 = !DILocation(line: 34, column: 22, scope: !47)
!65 = !DILocation(line: 35, column: 14, scope: !47)
!66 = !DILocation(line: 39, column: 9, scope: !47)
!67 = !DILocation(line: 41, column: 9, scope: !47)
!68 = !DILocation(line: 41, column: 24, scope: !47)
!69 = !DILocation(line: 41, column: 22, scope: !47)
!70 = !DILocation(line: 42, column: 14, scope: !47)
!71 = !DILocation(line: 43, column: 9, scope: !47)
!72 = !DILocation(line: 46, column: 9, scope: !47)
!73 = !DILocation(line: 46, column: 24, scope: !47)
!74 = !DILocation(line: 46, column: 22, scope: !47)
!75 = !DILocation(line: 47, column: 14, scope: !47)
!76 = !DILocation(line: 48, column: 9, scope: !47)
!77 = !DILocation(line: 51, column: 9, scope: !47)
!78 = !DILocation(line: 51, column: 24, scope: !47)
!79 = !DILocation(line: 51, column: 22, scope: !47)
!80 = !DILocation(line: 52, column: 14, scope: !47)
!81 = !DILocation(line: 56, column: 23, scope: !47)
!82 = !DILocation(line: 58, column: 9, scope: !47)
!83 = !DILocation(line: 58, column: 24, scope: !47)
!84 = !DILocation(line: 58, column: 22, scope: !47)
!85 = !DILocation(line: 59, column: 14, scope: !47)
!86 = !DILocation(line: 60, column: 9, scope: !47)
!87 = !DILocation(line: 63, column: 9, scope: !47)
!88 = !DILocation(line: 63, column: 24, scope: !47)
!89 = !DILocation(line: 63, column: 22, scope: !47)
!90 = !DILocation(line: 64, column: 14, scope: !47)
!91 = !DILocation(line: 65, column: 9, scope: !47)
!92 = !DILocation(line: 68, column: 9, scope: !47)
!93 = !DILocation(line: 68, column: 24, scope: !47)
!94 = !DILocation(line: 68, column: 22, scope: !47)
!95 = !DILocation(line: 69, column: 14, scope: !47)
!96 = !DILocation(line: 72, column: 4, scope: !47)
!97 = !DILocation(line: 72, column: 14, scope: !47)
!98 = !DILocation(line: 15, column: 29, scope: !48)
!99 = !DILocation(line: 15, column: 22, scope: !48)
!100 = distinct !{!100, !38, !101}
!101 = !DILocation(line: 73, column: 3, scope: !39)
!102 = !DILocation(line: 14, column: 27, scope: !41)
!103 = !DILocation(line: 14, column: 20, scope: !41)
!104 = distinct !{!104, !35, !105}
!105 = !DILocation(line: 74, column: 2, scope: !36)
!106 = !DILocation(line: 78, column: 1, scope: !10)
!107 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 80, type: !108, isLocal: false, isDefinition: true, scopeLine: 81, isOptimized: true, unit: !0, variables: !110)
!108 = !DISubroutineType(types: !109)
!109 = !{!5}
!110 = !{!111, !112, !113, !114, !115, !116, !117, !118}
!111 = !DILocalVariable(name: "OrigImg", scope: !107, file: !1, line: 82, type: !4)
!112 = !DILocalVariable(name: "Solution", scope: !107, file: !1, line: 83, type: !4)
!113 = !DILocalVariable(name: "Filter", scope: !107, file: !1, line: 84, type: !4)
!114 = !DILocalVariable(name: "i", scope: !107, file: !1, line: 85, type: !5)
!115 = !DILocalVariable(name: "j", scope: !107, file: !1, line: 85, type: !5)
!116 = !DILocalVariable(name: "k", scope: !107, file: !1, line: 85, type: !5)
!117 = !DILocalVariable(name: "max", scope: !107, file: !1, line: 86, type: !5)
!118 = !DILocalVariable(name: "min", scope: !107, file: !1, line: 86, type: !5)
!119 = !DILocation(line: 88, column: 3, scope: !107)
!120 = !DILocation(line: 86, column: 9, scope: !107)
!121 = !DILocation(line: 86, column: 14, scope: !107)
!122 = !DILocation(line: 91, column: 20, scope: !107)
!123 = !DILocation(line: 91, column: 13, scope: !107)
!124 = !DILocation(line: 82, column: 7, scope: !107)
!125 = !DILocation(line: 92, column: 21, scope: !107)
!126 = !DILocation(line: 92, column: 14, scope: !107)
!127 = !DILocation(line: 83, column: 7, scope: !107)
!128 = !DILocation(line: 93, column: 20, scope: !107)
!129 = !DILocation(line: 84, column: 7, scope: !107)
!130 = !DILocation(line: 85, column: 9, scope: !107)
!131 = !DILocation(line: 94, column: 2, scope: !132)
!132 = distinct !DILexicalBlock(scope: !107, file: !1, line: 94, column: 2)
!133 = !DILocation(line: 85, column: 12, scope: !107)
!134 = !DILocation(line: 96, column: 3, scope: !135)
!135 = distinct !DILexicalBlock(scope: !136, file: !1, line: 96, column: 3)
!136 = distinct !DILexicalBlock(scope: !137, file: !1, line: 95, column: 2)
!137 = distinct !DILexicalBlock(scope: !132, file: !1, line: 94, column: 2)
!138 = !DILocation(line: 98, column: 36, scope: !139)
!139 = distinct !DILexicalBlock(scope: !140, file: !1, line: 97, column: 3)
!140 = distinct !DILexicalBlock(scope: !135, file: !1, line: 96, column: 3)
!141 = !DILocation(line: 98, column: 49, scope: !139)
!142 = !DILocation(line: 98, column: 62, scope: !139)
!143 = !DILocation(line: 98, column: 76, scope: !139)
!144 = !DILocation(line: 98, column: 28, scope: !139)
!145 = !DILocation(line: 98, column: 21, scope: !139)
!146 = !DILocation(line: 98, column: 4, scope: !139)
!147 = !DILocation(line: 98, column: 26, scope: !139)
!148 = !DILocation(line: 99, column: 4, scope: !139)
!149 = !DILocation(line: 99, column: 27, scope: !139)
!150 = !DILocation(line: 96, column: 17, scope: !140)
!151 = !DILocation(line: 96, column: 12, scope: !140)
!152 = distinct !{!152, !134, !153}
!153 = !DILocation(line: 101, column: 3, scope: !135)
!154 = !DILocation(line: 94, column: 16, scope: !137)
!155 = !DILocation(line: 94, column: 11, scope: !137)
!156 = distinct !{!156, !131, !157}
!157 = !DILocation(line: 102, column: 2, scope: !132)
!158 = !DILocation(line: 93, column: 12, scope: !107)
!159 = !DILocation(line: 104, column: 2, scope: !160)
!160 = distinct !DILexicalBlock(scope: !107, file: !1, line: 104, column: 2)
!161 = !DILocation(line: 106, column: 3, scope: !162)
!162 = distinct !DILexicalBlock(scope: !163, file: !1, line: 106, column: 3)
!163 = distinct !DILexicalBlock(scope: !164, file: !1, line: 105, column: 2)
!164 = distinct !DILexicalBlock(scope: !160, file: !1, line: 104, column: 2)
!165 = !DILocation(line: 108, column: 30, scope: !166)
!166 = distinct !DILexicalBlock(scope: !167, file: !1, line: 107, column: 3)
!167 = distinct !DILexicalBlock(scope: !162, file: !1, line: 106, column: 3)
!168 = !DILocation(line: 108, column: 43, scope: !166)
!169 = !DILocation(line: 108, column: 58, scope: !166)
!170 = !DILocation(line: 108, column: 72, scope: !166)
!171 = !DILocation(line: 108, column: 22, scope: !166)
!172 = !DILocation(line: 108, column: 15, scope: !166)
!173 = !DILocation(line: 108, column: 4, scope: !166)
!174 = !DILocation(line: 108, column: 20, scope: !166)
!175 = !DILocation(line: 106, column: 16, scope: !167)
!176 = !DILocation(line: 106, column: 12, scope: !167)
!177 = distinct !{!177, !161, !178}
!178 = !DILocation(line: 113, column: 3, scope: !162)
!179 = !DILocation(line: 104, column: 15, scope: !164)
!180 = !DILocation(line: 104, column: 11, scope: !164)
!181 = distinct !{!181, !159, !182}
!182 = !DILocation(line: 114, column: 2, scope: !160)
!183 = !DILocation(line: 119, column: 2, scope: !107)
!184 = !DILocation(line: 124, column: 2, scope: !185)
!185 = distinct !DILexicalBlock(scope: !107, file: !1, line: 124, column: 2)
!186 = !DILocation(line: 126, column: 4, scope: !187)
!187 = distinct !DILexicalBlock(scope: !188, file: !1, line: 126, column: 4)
!188 = distinct !DILexicalBlock(scope: !189, file: !1, line: 125, column: 3)
!189 = distinct !DILexicalBlock(scope: !185, file: !1, line: 124, column: 2)
!190 = !DILocation(line: 128, column: 53, scope: !191)
!191 = distinct !DILexicalBlock(scope: !192, file: !1, line: 127, column: 4)
!192 = distinct !DILexicalBlock(scope: !187, file: !1, line: 126, column: 4)
!193 = !DILocation(line: 128, column: 38, scope: !191)
!194 = !DILocation(line: 128, column: 59, scope: !191)
!195 = !DILocation(line: 128, column: 5, scope: !191)
!196 = !DILocation(line: 126, column: 17, scope: !192)
!197 = !DILocation(line: 126, column: 13, scope: !192)
!198 = distinct !{!198, !186, !199}
!199 = !DILocation(line: 130, column: 4, scope: !187)
!200 = !DILocation(line: 124, column: 17, scope: !189)
!201 = !DILocation(line: 124, column: 11, scope: !189)
!202 = distinct !{!202, !184, !203}
!203 = !DILocation(line: 131, column: 3, scope: !185)
!204 = !DILocation(line: 132, column: 2, scope: !107)
!205 = !DILocation(line: 134, column: 2, scope: !107)
