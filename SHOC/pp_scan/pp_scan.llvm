; ModuleID = 'pp_scan.c'
source_filename = "pp_scan.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%u\09\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define void @print(i32* nocapture readonly %a, i32 %size) local_unnamed_addr #0 !dbg !11 {
  call void @llvm.dbg.value(metadata i32* %a, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %size, metadata !16, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 0, metadata !17, metadata !DIExpression()), !dbg !20
  %cmp4 = icmp sgt i32 %size, 0, !dbg !21
  br i1 %cmp4, label %.lr.ph, label %._crit_edge, !dbg !24

.lr.ph:                                           ; preds = %0
  %wide.trip.count = zext i32 %size to i64
  br label %1, !dbg !24

; <label>:1:                                      ; preds = %1, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %1 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !17, metadata !DIExpression()), !dbg !20
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv, !dbg !25
  %2 = load i32, i32* %arrayidx, align 4, !dbg !25, !tbaa !26
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %2) #5, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !31
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !21
  br i1 %exitcond, label %._crit_edge, label %1, !dbg !24, !llvm.loop !32

._crit_edge:                                      ; preds = %1, %0
  ret void, !dbg !34
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

declare i32 @printf(i8*, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: noinline nounwind uwtable
define void @local_scan(i32* nocapture %bucket) local_unnamed_addr #0 !dbg !35 {
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !39, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.value(metadata i32 0, metadata !40, metadata !DIExpression()), !dbg !43
  br label %1, !dbg !44

; <label>:1:                                      ; preds = %7, %0
  %indvars.iv21 = phi i64 [ 0, %0 ], [ %indvars.iv.next22, %7 ]
  call void @llvm.dbg.value(metadata i32 1, metadata !41, metadata !DIExpression()), !dbg !46
  call void @llvm.dbg.value(metadata i64 %indvars.iv21, metadata !40, metadata !DIExpression()), !dbg !43
  %2 = shl i64 %indvars.iv21, 4
  %scevgep = getelementptr i32, i32* %bucket, i64 %2
  %3 = shl nsw i64 %indvars.iv21, 4
  %load_initial = load i32, i32* %scevgep, align 4
  br label %4, !dbg !47

; <label>:4:                                      ; preds = %4, %1
  %store_forwarded = phi i32 [ %load_initial, %1 ], [ %add6, %4 ]
  %indvars.iv = phi i64 [ 1, %1 ], [ %indvars.iv.next, %4 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !41, metadata !DIExpression()), !dbg !46
  %5 = add nuw nsw i64 %indvars.iv, %3, !dbg !50
  %arrayidx5 = getelementptr inbounds i32, i32* %bucket, i64 %5, !dbg !53
  %6 = load i32, i32* %arrayidx5, align 4, !dbg !54, !tbaa !26
  %add6 = add nsw i32 %6, %store_forwarded, !dbg !54
  store i32 %add6, i32* %arrayidx5, align 4, !dbg !54, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !56
  br i1 %exitcond, label %7, label %4, !dbg !47, !llvm.loop !57

; <label>:7:                                      ; preds = %4
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1, !dbg !59
  %exitcond24 = icmp eq i64 %indvars.iv.next22, 128, !dbg !60
  br i1 %exitcond24, label %8, label %1, !dbg !44, !llvm.loop !61

; <label>:8:                                      ; preds = %7
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind uwtable
define void @sum_scan(i32* nocapture %sum, i32* nocapture readonly %bucket) local_unnamed_addr #0 !dbg !64 {
  call void @llvm.dbg.value(metadata i32* %sum, metadata !68, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !69, metadata !DIExpression()), !dbg !72
  store i32 0, i32* %sum, align 4, !dbg !73, !tbaa !26
  call void @llvm.dbg.value(metadata i32 1, metadata !70, metadata !DIExpression()), !dbg !74
  br label %1, !dbg !75

; <label>:1:                                      ; preds = %1, %0
  %store_forwarded = phi i32 [ 0, %0 ], [ %add, %1 ]
  %indvars.iv = phi i64 [ 1, %0 ], [ %indvars.iv.next, %1 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !70, metadata !DIExpression()), !dbg !74
  %2 = shl i64 %indvars.iv, 4, !dbg !77
  %3 = add nsw i64 %2, -1, !dbg !79
  %arrayidx4 = getelementptr inbounds i32, i32* %bucket, i64 %3, !dbg !80
  %4 = load i32, i32* %arrayidx4, align 4, !dbg !80, !tbaa !26
  %add = add nsw i32 %4, %store_forwarded, !dbg !81
  %arrayidx6 = getelementptr inbounds i32, i32* %sum, i64 %indvars.iv, !dbg !82
  store i32 %add, i32* %arrayidx6, align 4, !dbg !83, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !84
  %exitcond = icmp eq i64 %indvars.iv.next, 128, !dbg !85
  br i1 %exitcond, label %5, label %1, !dbg !75, !llvm.loop !86

; <label>:5:                                      ; preds = %1
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind uwtable
define void @last_step_scan(i32* nocapture readonly %bucket, i32* nocapture %bucket2, i32* nocapture readonly %sum) local_unnamed_addr #0 !dbg !89 {
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !93, metadata !DIExpression()), !dbg !98
  call void @llvm.dbg.value(metadata i32* %bucket2, metadata !94, metadata !DIExpression()), !dbg !99
  call void @llvm.dbg.value(metadata i32* %sum, metadata !95, metadata !DIExpression()), !dbg !100
  call void @llvm.dbg.value(metadata i32 0, metadata !96, metadata !DIExpression()), !dbg !101
  br label %1, !dbg !102

; <label>:1:                                      ; preds = %7, %0
  %indvars.iv22 = phi i64 [ 0, %0 ], [ %indvars.iv.next23, %7 ]
  call void @llvm.dbg.value(metadata i32 0, metadata !97, metadata !DIExpression()), !dbg !104
  call void @llvm.dbg.value(metadata i64 %indvars.iv22, metadata !96, metadata !DIExpression()), !dbg !101
  %2 = shl i64 %indvars.iv22, 4
  %arrayidx3 = getelementptr inbounds i32, i32* %sum, i64 %indvars.iv22
  br label %3, !dbg !105

; <label>:3:                                      ; preds = %3, %1
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !97, metadata !DIExpression()), !dbg !104
  %4 = add nuw nsw i64 %indvars.iv, %2, !dbg !108
  %arrayidx = getelementptr inbounds i32, i32* %bucket, i64 %4, !dbg !111
  %5 = load i32, i32* %arrayidx, align 4, !dbg !111, !tbaa !26
  %6 = load i32, i32* %arrayidx3, align 4, !dbg !112, !tbaa !26
  %add4 = add nsw i32 %6, %5, !dbg !113
  %arrayidx8 = getelementptr inbounds i32, i32* %bucket2, i64 %4, !dbg !114
  store i32 %add4, i32* %arrayidx8, align 4, !dbg !115, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !116
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !117
  br i1 %exitcond, label %7, label %3, !dbg !105, !llvm.loop !118

; <label>:7:                                      ; preds = %3
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1, !dbg !120
  %exitcond25 = icmp eq i64 %indvars.iv.next23, 128, !dbg !121
  br i1 %exitcond25, label %8, label %1, !dbg !102, !llvm.loop !122

; <label>:8:                                      ; preds = %7
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind uwtable
define void @pp_scan(i32* nocapture %bucket, i32* nocapture %bucket2, i32* nocapture %sum) local_unnamed_addr #0 !dbg !125 {
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !127, metadata !DIExpression()), !dbg !130
  call void @llvm.dbg.value(metadata i32* %bucket2, metadata !128, metadata !DIExpression()), !dbg !131
  call void @llvm.dbg.value(metadata i32* %sum, metadata !129, metadata !DIExpression()), !dbg !132
  tail call void @local_scan(i32* %bucket) #6, !dbg !133
  tail call void @sum_scan(i32* %sum, i32* %bucket) #6, !dbg !134
  tail call void @last_step_scan(i32* %bucket, i32* %bucket2, i32* %sum) #6, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: noinline nounwind uwtable
define i32 @main() local_unnamed_addr #0 !dbg !137 {
  %sum = alloca [128 x i32], align 16
  %call = tail call noalias i8* @malloc(i64 8192) #5, !dbg !150
  %1 = bitcast i8* %call to i32*, !dbg !151
  call void @llvm.dbg.value(metadata i32* %1, metadata !142, metadata !DIExpression()), !dbg !152
  %call1 = tail call noalias i8* @malloc(i64 8192) #5, !dbg !153
  %2 = bitcast i8* %call1 to i32*, !dbg !154
  call void @llvm.dbg.value(metadata i32* %2, metadata !143, metadata !DIExpression()), !dbg !155
  %3 = bitcast [128 x i32]* %sum to i8*, !dbg !156
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %3) #7, !dbg !156
  call void @llvm.dbg.declare(metadata [128 x i32]* %sum, metadata !144, metadata !DIExpression()), !dbg !157
  tail call void @srand(i32 8650341) #5, !dbg !158
  call void @llvm.dbg.value(metadata i32 2048, metadata !148, metadata !DIExpression()), !dbg !159
  call void @llvm.dbg.value(metadata i32 0, metadata !149, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.value(metadata i32 0, metadata !141, metadata !DIExpression()), !dbg !161
  br label %4, !dbg !162

; <label>:4:                                      ; preds = %4, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %4 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !141, metadata !DIExpression()), !dbg !161
  %call2 = tail call i32 @rand() #5, !dbg !164
  %conv = sitofp i32 %call2 to double, !dbg !167
  %div = fdiv double %conv, 0x41DFFFFFFFC00000, !dbg !168
  %mul = fmul double %div, 2.048000e+03, !dbg !169
  %add = fadd double %mul, 0.000000e+00, !dbg !170
  %conv5 = fptosi double %add to i32, !dbg !171
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !172
  store i32 %conv5, i32* %arrayidx, align 4, !dbg !173, !tbaa !26
  %call6 = tail call i32 @rand() #5, !dbg !174
  %conv7 = sitofp i32 %call6 to double, !dbg !175
  %div8 = fdiv double %conv7, 0x41DFFFFFFFC00000, !dbg !176
  %mul11 = fmul double %div8, 2.048000e+03, !dbg !177
  %add13 = fadd double %mul11, 0.000000e+00, !dbg !178
  %conv14 = fptosi double %add13 to i32, !dbg !179
  %arrayidx16 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv, !dbg !180
  store i32 %conv14, i32* %arrayidx16, align 4, !dbg !181, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !182
  %exitcond = icmp eq i64 %indvars.iv.next, 2048, !dbg !183
  br i1 %exitcond, label %5, label %4, !dbg !162, !llvm.loop !184

; <label>:5:                                      ; preds = %4
  tail call void @print(i32* nonnull %1, i32 1) #6, !dbg !186
  %call18 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5, !dbg !187
  %arraydecay = getelementptr inbounds [128 x i32], [128 x i32]* %sum, i64 0, i64 0, !dbg !188
  call void @pp_scan(i32* nonnull %1, i32* nonnull %2, i32* nonnull %arraydecay) #6, !dbg !189
  tail call void @print(i32* nonnull %1, i32 2) #6, !dbg !190
  %call20 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5, !dbg !191
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %3) #7, !dbg !192
  ret i32 0, !dbg !193
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @srand(i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind }
attributes #6 = { nobuiltin }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 6.0.0 (tags/RELEASE_600/final)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "pp_scan.c", directory: "/workspace/gem5-aladdin/src/aladdin/SHOC/pp_scan")
!2 = !{}
!3 = !{!4, !5, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!7 = !{i32 2, !"Dwarf Version", i32 4}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
!11 = distinct !DISubprogram(name: "print", scope: !1, file: !1, line: 7, type: !12, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !14)
!12 = !DISubroutineType(types: !13)
!13 = !{null, !4, !5}
!14 = !{!15, !16, !17}
!15 = !DILocalVariable(name: "a", arg: 1, scope: !11, file: !1, line: 7, type: !4)
!16 = !DILocalVariable(name: "size", arg: 2, scope: !11, file: !1, line: 7, type: !5)
!17 = !DILocalVariable(name: "i", scope: !11, file: !1, line: 9, type: !5)
!18 = !DILocation(line: 7, column: 17, scope: !11)
!19 = !DILocation(line: 7, column: 24, scope: !11)
!20 = !DILocation(line: 9, column: 6, scope: !11)
!21 = !DILocation(line: 10, column: 16, scope: !22)
!22 = distinct !DILexicalBlock(scope: !23, file: !1, line: 10, column: 2)
!23 = distinct !DILexicalBlock(scope: !11, file: !1, line: 10, column: 2)
!24 = !DILocation(line: 10, column: 2, scope: !23)
!25 = !DILocation(line: 11, column: 18, scope: !22)
!26 = !{!27, !27, i64 0}
!27 = !{!"int", !28, i64 0}
!28 = !{!"omnipotent char", !29, i64 0}
!29 = !{!"Simple C/C++ TBAA"}
!30 = !DILocation(line: 11, column: 3, scope: !22)
!31 = !DILocation(line: 10, column: 25, scope: !22)
!32 = distinct !{!32, !24, !33}
!33 = !DILocation(line: 11, column: 22, scope: !23)
!34 = !DILocation(line: 12, column: 1, scope: !11)
!35 = distinct !DISubprogram(name: "local_scan", scope: !1, file: !1, line: 15, type: !36, isLocal: false, isDefinition: true, scopeLine: 16, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null, !4}
!38 = !{!39, !40, !41}
!39 = !DILocalVariable(name: "bucket", arg: 1, scope: !35, file: !1, line: 15, type: !4)
!40 = !DILocalVariable(name: "radixID", scope: !35, file: !1, line: 17, type: !5)
!41 = !DILocalVariable(name: "i", scope: !35, file: !1, line: 17, type: !5)
!42 = !DILocation(line: 15, column: 21, scope: !35)
!43 = !DILocation(line: 17, column: 7, scope: !35)
!44 = !DILocation(line: 18, column: 15, scope: !45)
!45 = distinct !DILexicalBlock(scope: !35, file: !1, line: 18, column: 15)
!46 = !DILocation(line: 17, column: 16, scope: !35)
!47 = !DILocation(line: 19, column: 17, scope: !48)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 19, column: 17)
!49 = distinct !DILexicalBlock(scope: !45, file: !1, line: 18, column: 15)
!50 = !DILocation(line: 21, column: 71, scope: !51)
!51 = distinct !DILexicalBlock(scope: !52, file: !1, line: 20, column: 5)
!52 = distinct !DILexicalBlock(scope: !48, file: !1, line: 19, column: 17)
!53 = !DILocation(line: 21, column: 7, scope: !51)
!54 = !DILocation(line: 21, column: 40, scope: !51)
!55 = !DILocation(line: 19, column: 45, scope: !52)
!56 = !DILocation(line: 19, column: 31, scope: !52)
!57 = distinct !{!57, !47, !58}
!58 = !DILocation(line: 22, column: 5, scope: !48)
!59 = !DILocation(line: 18, column: 55, scope: !49)
!60 = !DILocation(line: 18, column: 41, scope: !49)
!61 = distinct !{!61, !44, !62}
!62 = !DILocation(line: 22, column: 5, scope: !45)
!63 = !DILocation(line: 23, column: 1, scope: !35)
!64 = distinct !DISubprogram(name: "sum_scan", scope: !1, file: !1, line: 25, type: !65, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !67)
!65 = !DISubroutineType(types: !66)
!66 = !{null, !4, !4}
!67 = !{!68, !69, !70}
!68 = !DILocalVariable(name: "sum", arg: 1, scope: !64, file: !1, line: 25, type: !4)
!69 = !DILocalVariable(name: "bucket", arg: 2, scope: !64, file: !1, line: 25, type: !4)
!70 = !DILocalVariable(name: "radixID", scope: !64, file: !1, line: 27, type: !5)
!71 = !DILocation(line: 25, column: 19, scope: !64)
!72 = !DILocation(line: 25, column: 40, scope: !64)
!73 = !DILocation(line: 28, column: 10, scope: !64)
!74 = !DILocation(line: 27, column: 7, scope: !64)
!75 = !DILocation(line: 29, column: 9, scope: !76)
!76 = distinct !DILexicalBlock(scope: !64, file: !1, line: 29, column: 9)
!77 = !DILocation(line: 30, column: 53, scope: !78)
!78 = distinct !DILexicalBlock(scope: !76, file: !1, line: 29, column: 9)
!79 = !DILocation(line: 30, column: 66, scope: !78)
!80 = !DILocation(line: 30, column: 38, scope: !78)
!81 = !DILocation(line: 30, column: 36, scope: !78)
!82 = !DILocation(line: 30, column: 5, scope: !78)
!83 = !DILocation(line: 30, column: 18, scope: !78)
!84 = !DILocation(line: 29, column: 49, scope: !78)
!85 = !DILocation(line: 29, column: 35, scope: !78)
!86 = distinct !{!86, !75, !87}
!87 = !DILocation(line: 30, column: 69, scope: !76)
!88 = !DILocation(line: 31, column: 1, scope: !64)
!89 = distinct !DISubprogram(name: "last_step_scan", scope: !1, file: !1, line: 33, type: !90, isLocal: false, isDefinition: true, scopeLine: 34, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !92)
!90 = !DISubroutineType(types: !91)
!91 = !{null, !4, !4, !4}
!92 = !{!93, !94, !95, !96, !97}
!93 = !DILocalVariable(name: "bucket", arg: 1, scope: !89, file: !1, line: 33, type: !4)
!94 = !DILocalVariable(name: "bucket2", arg: 2, scope: !89, file: !1, line: 33, type: !4)
!95 = !DILocalVariable(name: "sum", arg: 3, scope: !89, file: !1, line: 33, type: !4)
!96 = !DILocalVariable(name: "radixID", scope: !89, file: !1, line: 35, type: !5)
!97 = !DILocalVariable(name: "i", scope: !89, file: !1, line: 35, type: !5)
!98 = !DILocation(line: 33, column: 25, scope: !89)
!99 = !DILocation(line: 33, column: 49, scope: !89)
!100 = !DILocation(line: 33, column: 74, scope: !89)
!101 = !DILocation(line: 35, column: 7, scope: !89)
!102 = !DILocation(line: 36, column: 15, scope: !103)
!103 = distinct !DILexicalBlock(scope: !89, file: !1, line: 36, column: 15)
!104 = !DILocation(line: 35, column: 16, scope: !89)
!105 = !DILocation(line: 37, column: 17, scope: !106)
!106 = distinct !DILexicalBlock(scope: !107, file: !1, line: 37, column: 17)
!107 = distinct !DILexicalBlock(scope: !103, file: !1, line: 36, column: 15)
!108 = !DILocation(line: 40, column: 37, scope: !109)
!109 = distinct !DILexicalBlock(scope: !110, file: !1, line: 38, column: 5)
!110 = distinct !DILexicalBlock(scope: !106, file: !1, line: 37, column: 17)
!111 = !DILocation(line: 40, column: 9, scope: !109)
!112 = !DILocation(line: 40, column: 45, scope: !109)
!113 = !DILocation(line: 40, column: 43, scope: !109)
!114 = !DILocation(line: 39, column: 7, scope: !109)
!115 = !DILocation(line: 39, column: 41, scope: !109)
!116 = !DILocation(line: 37, column: 45, scope: !110)
!117 = !DILocation(line: 37, column: 31, scope: !110)
!118 = distinct !{!118, !105, !119}
!119 = !DILocation(line: 41, column: 5, scope: !106)
!120 = !DILocation(line: 36, column: 55, scope: !107)
!121 = !DILocation(line: 36, column: 41, scope: !107)
!122 = distinct !{!122, !102, !123}
!123 = !DILocation(line: 41, column: 5, scope: !103)
!124 = !DILocation(line: 43, column: 1, scope: !89)
!125 = distinct !DISubprogram(name: "pp_scan", scope: !1, file: !1, line: 44, type: !90, isLocal: false, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !126)
!126 = !{!127, !128, !129}
!127 = !DILocalVariable(name: "bucket", arg: 1, scope: !125, file: !1, line: 44, type: !4)
!128 = !DILocalVariable(name: "bucket2", arg: 2, scope: !125, file: !1, line: 44, type: !4)
!129 = !DILocalVariable(name: "sum", arg: 3, scope: !125, file: !1, line: 45, type: !4)
!130 = !DILocation(line: 44, column: 18, scope: !125)
!131 = !DILocation(line: 44, column: 42, scope: !125)
!132 = !DILocation(line: 45, column: 7, scope: !125)
!133 = !DILocation(line: 51, column: 3, scope: !125)
!134 = !DILocation(line: 52, column: 3, scope: !125)
!135 = !DILocation(line: 53, column: 3, scope: !125)
!136 = !DILocation(line: 58, column: 1, scope: !125)
!137 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 60, type: !138, isLocal: false, isDefinition: true, scopeLine: 61, isOptimized: true, unit: !0, variables: !140)
!138 = !DISubroutineType(types: !139)
!139 = !{!5}
!140 = !{!141, !142, !143, !144, !148, !149}
!141 = !DILocalVariable(name: "i", scope: !137, file: !1, line: 62, type: !5)
!142 = !DILocalVariable(name: "bucket", scope: !137, file: !1, line: 63, type: !4)
!143 = !DILocalVariable(name: "bucket2", scope: !137, file: !1, line: 64, type: !4)
!144 = !DILocalVariable(name: "sum", scope: !137, file: !1, line: 67, type: !145)
!145 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 4096, elements: !146)
!146 = !{!147}
!147 = !DISubrange(count: 128)
!148 = !DILocalVariable(name: "max", scope: !137, file: !1, line: 68, type: !5)
!149 = !DILocalVariable(name: "min", scope: !137, file: !1, line: 68, type: !5)
!150 = !DILocation(line: 65, column: 19, scope: !137)
!151 = !DILocation(line: 65, column: 12, scope: !137)
!152 = !DILocation(line: 63, column: 9, scope: !137)
!153 = !DILocation(line: 66, column: 20, scope: !137)
!154 = !DILocation(line: 66, column: 13, scope: !137)
!155 = !DILocation(line: 64, column: 9, scope: !137)
!156 = !DILocation(line: 67, column: 3, scope: !137)
!157 = !DILocation(line: 67, column: 7, scope: !137)
!158 = !DILocation(line: 69, column: 2, scope: !137)
!159 = !DILocation(line: 68, column: 7, scope: !137)
!160 = !DILocation(line: 68, column: 12, scope: !137)
!161 = !DILocation(line: 62, column: 6, scope: !137)
!162 = !DILocation(line: 72, column: 3, scope: !163)
!163 = distinct !DILexicalBlock(scope: !137, file: !1, line: 72, column: 3)
!164 = !DILocation(line: 73, column: 34, scope: !165)
!165 = distinct !DILexicalBlock(scope: !166, file: !1, line: 72, column: 21)
!166 = distinct !DILexicalBlock(scope: !163, file: !1, line: 72, column: 3)
!167 = !DILocation(line: 73, column: 25, scope: !165)
!168 = !DILocation(line: 73, column: 41, scope: !165)
!169 = !DILocation(line: 73, column: 55, scope: !165)
!170 = !DILocation(line: 73, column: 67, scope: !165)
!171 = !DILocation(line: 73, column: 17, scope: !165)
!172 = !DILocation(line: 73, column: 5, scope: !165)
!173 = !DILocation(line: 73, column: 15, scope: !165)
!174 = !DILocation(line: 74, column: 35, scope: !165)
!175 = !DILocation(line: 74, column: 26, scope: !165)
!176 = !DILocation(line: 74, column: 42, scope: !165)
!177 = !DILocation(line: 74, column: 56, scope: !165)
!178 = !DILocation(line: 74, column: 68, scope: !165)
!179 = !DILocation(line: 74, column: 18, scope: !165)
!180 = !DILocation(line: 74, column: 5, scope: !165)
!181 = !DILocation(line: 74, column: 16, scope: !165)
!182 = !DILocation(line: 72, column: 18, scope: !166)
!183 = !DILocation(line: 72, column: 13, scope: !166)
!184 = distinct !{!184, !162, !185}
!185 = !DILocation(line: 75, column: 3, scope: !163)
!186 = !DILocation(line: 77, column: 2, scope: !137)
!187 = !DILocation(line: 78, column: 2, scope: !137)
!188 = !DILocation(line: 83, column: 27, scope: !137)
!189 = !DILocation(line: 83, column: 2, scope: !137)
!190 = !DILocation(line: 88, column: 2, scope: !137)
!191 = !DILocation(line: 89, column: 2, scope: !137)
!192 = !DILocation(line: 92, column: 1, scope: !137)
!193 = !DILocation(line: 91, column: 2, scope: !137)
